///////////////////////
///////////////////////
///////////////////////
//// BLOOD ////////////
///////////////////////
///////////////////////




// Blood Spurts are spawned by big gibs an in some frames of Death animations.
// Basically they are short and thick spurts of blood that then turn into blood drops.

actor BloodSpurt : BloodDrop
{
Deathsound ""
scale .5
gravity .5
height 1
states
	{
	spawn:
		TNT1 A 0 NoDelay A_JumpIf(GetCvar("bdoom_blood")==0,"Null")
		TNT1 A 0 A_JumpIf(GetCvar("bdoom_gibs")==0,"Null")
		TNT1 A 0 A_SetScale(scalex*randompick(-1,1),scaley)
		TNT1 A 0 A_JumpIf(waterlevel > 0, "Null")
		FBLD ABCDABCD 1 A_SpawnItemEx("BloodSpurtTrail",random(-1,1),random(-1,1),random(-1,1),0,0,0,0,SXF_TRANSFERTRANSLATION|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE)
		FBLD ABCDABCD 1 A_SpawnItemEx("BloodSpurtTrail",random(-1,1),random(-1,1),random(-1,1),0,0,0,0,SXF_TRANSFERTRANSLATION|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE)
		FBLD ABCDABCD 1 A_SpawnItemEx("BloodSpurtTrail",random(-1,1),random(-1,1),random(-1,1),0,0,0,0,SXF_TRANSFERTRANSLATION|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE)
		BLOD ABCDEF 1 A_JumpIf(waterlevel > 0, "Null")
		stop
	}
}

Actor BloodSpurtTrail : DebrisGeneral
{
+NOCLIP
scale .5
states
	{
	spawn:
		TNT1 A 0 NoDelay  A_JumpIf(GetCvar("bdoom_blood")==0,"Null")
		TNT1 A 0 A_SetScale(scalex*randompick(-1,1),scaley)
		BLOD ABCDEF 2
		BLOD FFFFFF 1 A_FadeOut(0.2)
		stop
	}
}

// This replaces blood so that the blood drop flies forward.
// If BloodDrop replaced Blood directly, it'd just follow Blood's 
// default behavior and fall down on the ground.
Actor BloodSpatter : Blood replaces Blood
{
+PUFFGETSOWNER
-NOGRAVITY
+FORCEXYBILLBOARD
-ALLOWPARTICLES
+THRUACTORS
-MISSILE
radius 1
height 1
mass 1
gravity 0.5
scale .45
alpha .75
states
	{
	Spawn:
		TNT1 AAA 0 //overrides vanilla frame-switching/damage-dependent behavior
		TNT1 A 0 A_SetScale(scalex*randompick(-1,1),scaley)
		TNT1 A 0 A_JumpIf(GetCvar("bdoom_blood")==0,"Animation")
		TNT1 A 0 A_FaceTarget

		TNT1 A 0 A_JumpIf(CheckClass("BlueBloodSpatter",	AAPTR_DEFAULT),3)
		TNT1 A 0 A_JumpIf(CheckClass("GreenBloodSpatter",	AAPTR_DEFAULT),3)

		TNT1 A 0 A_SpawnItemEx("BloodDrop",16,0,		random(4,8),random(1,3),0,random(1,3),random(-150,-210),SXF_TRANSFERPOINTERS)
		goto Animation
		TNT1 A 0 A_SpawnItemEx("BlueBloodDrop",16,0,	random(4,8),random(1,3),0,random(1,3),random(-150,-210),SXF_TRANSFERPOINTERS)
		goto Animation
		TNT1 A 0 A_SpawnItemEx("GreenBloodDrop",16,0,	random(4,8),random(1,3),0,random(1,3),random(-150,-210),SXF_TRANSFERPOINTERS)
		goto Animation

	Animation:
		BLOD ABCDEF 2 A_FadeOut(0.05)
		stop
	}
}

Actor BloodSpatter_Saw : BloodSpatter replaces AxeBlood
{
+NOGRAVITY
scale .3
alpha .5
states
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetScale(scalex*randompick(-1,1),scaley)
		TNT1 A 0 A_JumpIf(GetCvar("bdoom_blood")==0,"Animation")
		TNT1 A 0 A_FaceTarget

		TNT1 A 0 A_JumpIf(CheckClass("BlueBloodSpatter_Saw",	AAPTR_DEFAULT),5)
		TNT1 A 0 A_JumpIf(CheckClass("GreenBloodSpatter_Saw",	AAPTR_DEFAULT),7)

		TNT1 AAA 0 A_SpawnItemEx("BloodDrop",		random(-2,2),random(-2,2),random(4,6),random(0,1),0,random(6,9),random(-150,-210),SXF_TRANSFERPOINTERS,64)
		goto Animation
		TNT1 AAA 0 A_SpawnItemEx("BlueBloodDrop",	random(-2,2),random(-2,2),random(4,6),random(0,1),0,random(6,9),random(-150,-210),SXF_TRANSFERPOINTERS,64)
		goto Animation
		TNT1 AAA 0 A_SpawnItemEx("GreenBloodDrop",	random(-2,2),random(-2,2),random(4,6),random(0,1),0,random(6,9),random(-150,-210),SXF_TRANSFERPOINTERS,64)
		goto Animation
	}
}

// ********************
// Colored blood
// ********************



actor BlueBloodDrop : BloodDrop
{
translation "169:191=196:207", "16:31=196:207", "32:47=240:246" //"168:191=192:207","16:47=240:247"
stencilcolor "00 00 90"
decal CacoBloodSplat
}

actor BlueBloodSpurt : BloodSpurt
{
translation "169:191=196:207", "16:31=196:207", "32:47=240:246" //"168:191=192:207","16:47=240:247"
stencilcolor "00 00 90"
decal CacoBloodSplat
}

Actor GreenBloodDrop : BloodDrop
{	
translation "169:191=112:127", "16:31=152:159", "32:47=152:159"
stencilcolor "00 80 00"
decal BaronBloodSplat
}

actor GreenBloodSpurt : BloodSpurt
{
translation "169:191=112:127", "16:31=152:159", "32:47=152:159"
stencilcolor "00 80 00"
decal BaronBloodSplat
}

// Additional Blood Spatters for non-red blood


Actor BlueBloodSpatter : BloodSpatter
{
translation "169:191=196:207", "16:31=196:207", "32:47=240:246" //"168:191=192:207","16:47=240:247"
}

Actor BlueBloodSpatter_Saw : BloodSpatter_Saw
{
translation "169:191=196:207", "16:31=196:207", "32:47=240:246" //"168:191=192:207","16:47=240:247"
}

Actor GreenBloodSpatter : BloodSpatter
{
translation "169:191=112:127", "16:31=152:159", "32:47=152:159"
}

Actor GreenBloodSpatter_Saw : BloodSpatter_Saw
{
translation "169:191=112:127", "16:31=152:159", "32:47=152:159"
}





// ********************
// Bloody Footprints
// ********************

Actor BloodyFootprint_R : DebrisGeneral
{
-MISSILE
-NOGRAVITY
+FLOORCLIP
+FLATSPRITE
+DONTSPLASH
height 1
alpha 0.75
scale .1
gravity 10
states
	{
	Spawn:
		TNT1 A 0 NoDelay ACS_NamedExecuteAlways("BD_BloodRemoval",0)
		TNT1 A 0 A_JumpIf(GetZAt(5,0) == floorz && GetZAt(-5,0) == floorz && GetZAt(0,7) == floorz && GetZAt(0,-7) == floorz, "Spawn1")
		stop
	Spawn1:
		FPRT A 3 A_FadeOut(0.001)
		loop
	}
}


Actor BloodyFootprint_L : BloodyFootprint_R
{
states
	{
	Spawn1:
		FPRT B 3 A_FadeOut(0.001)
		loop
	}
}

Actor BlueBloodyFootprint_R : BloodyFootprint_R
{
translation "168:191=197:207","16:47=240:247"
}

Actor BlueBloodyFootprint_L : BloodyFootprint_L
{
translation "168:191=197:207","16:47=240:247"
}

Actor GreenBloodyFootprint_R : BloodyFootprint_R
{
translation "169:191=112:127", "16:31=152:159", "32:47=152:159"
}

Actor GreenBloodyFootprint_L : BloodyFootprint_L
{
translation "169:191=112:127", "16:31=152:159", "32:47=152:159"
}

Actor SpectreBloodyFootprint_R : BloodyFootprint_R
{
renderstyle Shaded
alpha 0.4
}

Actor SpectreBloodyFootprint_L : BloodyFootprint_L
{
renderstyle Shaded
alpha 0.4
}



// This dummy item has two uses:
// 1. it's given to gibbed monsters and later checked for to show correct gibbed-raise animation when resurrected
// 2. it's given to monster gibs and blood when the gibbed monster is resurrected;
// upon finding this item in their inventory, gibs and blood enter their own Raise states 
// in which they are thrown towards the point of resurrection while fading out, imitating the 'stitching back' sequence

Actor WasGibbed : Inventory 
{
+UNDROPPABLE +UNTOSSABLE
-COUNTITEM
-INVBAR
inventory.maxamount 1
}


Actor BD_Bloodpool //for decorative purposes
{
+NOBLOCKMAP
+MOVEWITHSECTOR
+FLOORCLIP
renderstyle Shaded
Stencilcolor "BB 00 00"
scale .45
alpha .85
height 1
states
	{
	Spawn:
		TNT1 A 0 NoDelay A_JumpIf(GetZAt(12,0) != floorz && GetZAt(-12,0) != floorz && GetZAt(0,12) != floorz && GetZAt(0,-12) != floorz, "Super::Spawn")
		TNT1 A 0 ACS_NamedExecuteAlways("BD_BloodRemoval",0)
		TNT1 A 0 A_ChangeFlag("FLATSPRITE",1)
		TNT1 A 0 A_QueueCorpse
		TNT1 A 0 A_Jump(256,1,2,3,4,5,6,7,8,9,10,11,12)
		SPLT A -1
		stop
		SPLT B -1
		stop
		SPLT C -1
		stop
		SPLT D -1
		stop
		SPLT E -1
		stop
		SPLT F -1
		stop
		SPLT G -1
		stop
		SPLT H -1
		stop
		SPLT I -1
		stop
		SPLT J -1
		stop
		SPLT K -1
		stop
		SPLT L -1
		stop
	}
}

Actor BD_BlueBloodPool : BD_Bloodpool { stencilcolor "00 00 90" }

