// ScaleSlader that can be greyed out. Supports up to 3 cvars and is greyed out if either is false

class OptionMenuItemScaleSliderGC : OptionMenuItemScaleSlider
{
	CVar mGrayCheck;
	CVar mGrayCheck2;
	CVar mGrayCheck3;
	
	OptionMenuItemScaleSliderGC Init(String label, Name command, double min, double max, double step, String zero, CVar graycheck = null, CVar graycheck2 = null, CVar graycheck3 = null)
	{
		Super.Init(label, command, min, max, step, zero);
		mCVar = CVar.FindCVar(command);
		mGrayCheck = graycheck;
		mGrayCheck2 = graycheck2;
		mGrayCheck3 = graycheck3;
		TextZero = zero;
		mClickVal = -10;
		return self;
	}

	//=============================================================================
	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
		bool grayed = isGrayed();
		
		drawLabel(indent, y, selected? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColor, grayed);

		int overlay = grayed? Color(96,48,0,0) : 0;
		int Selection = int(GetSliderValue());
		if ((Selection == 0 || Selection == -1) && mClickVal <= 0)
		{
			String text = Selection == 0? TextZero : "";
			screen.DrawText (SmallFont, OptionMenuSettings.mFontColorValue, indent + CursorSpace(), y, text, DTA_CleanNoMove_1, true);
		}
		else
		{
			mDrawX = indent + CursorSpace();
			DrawSlider (mDrawX, y, mMin, mMax, GetSliderValue(), mShowValue, indent);
		}
		return indent;
	}
	
	virtual bool isGrayed()
	{
		if ( (mGraycheck && mGrayCheck.GetInt() == 0) || (mGraycheck2 && mGrayCheck2.GetInt() == 0) || (mGraycheck3 && mGrayCheck3.GetInt() == 0)  )
			return true;
		else
			return false;
	}

	override bool Selectable()
	{
		return !isGrayed();
	}
	
}

// Submenu that can be greyed out

class OptionMenuItemSubmenuGC : OptionMenuItemSubmenu
{
	CVar mGrayCheck;
	
	OptionMenuItemSubmenuGC Init(String label, Name command, CVar graycheck, int param = 0, bool centered = false)
	{
		Super.init(label, command, centered, param);
		mGrayCheck = graycheck;
		return self;
	}

	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
		bool grayed = isGrayed();		
		int x = drawLabel(indent, y, selected? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColorMore, grayed);
		int overlay = grayed? Color(96,48,0,0) : 0;
		if (mCentered) 
		{
			return x - 16*CleanXfac_1;
		}
		return indent;
	}

	virtual bool isGrayed()
	{
		return mGrayCheck != null && !mGrayCheck.GetInt();
	}

	override bool Selectable()
	{
		return !isGrayed();
	}
}

// Option menu that can be greyed out when CVAR != 2 (for background weapon autoreload option, it's only available when bdoom_weapons == 2)

Class OptionMenuItemOptionBGReload : OptionMenuItemOption
{
	CVar mCVar2;
	CVar mGrayCheck2;

	OptionMenuItemOption Init(String label, Name command, Name values, CVar graycheck = null, CVar graycheck2 = null)
	{
		Super.Init(label, command, values, graycheck);
		mCVar2 = CVar.FindCVar(mAction);
		mGrayCheck2 = graycheck2;
		return self;
	}
	
	override bool isGrayed()
	{
		if ( (mGraycheck && mGrayCheck.GetInt() != 2) || (mGraycheck2 && mGrayCheck2.GetInt() == 0)  )
			return true;
		else
			return false;
	}
}

//option item that is unselectable when either of 2 cvars is false
class OptionMenuItemOptionEither : OptionMenuItemOption
{
	CVar mCVar2;
	CVar mGrayCheck2;

	OptionMenuItemOption Init(String label, Name command, Name values, CVar graycheck = null, CVar graycheck2 = null, int center = 0)
	{
		Super.Init(label, command, values, graycheck, center);
		mCVar2 = CVar.FindCVar(mAction);
		mGrayCheck2 = graycheck2;
		return self;
	}

	override bool isGrayed()
	{
		if ( (mGraycheck && mGrayCheck.GetInt() == 0) || (mGraycheck2 && mGrayCheck2.GetInt() == 0)  )
			return true;
		else
			return false;
	}
}

//option item that is unselectable when both of 2 cvars is false
Class OptionMenuItemOptionBoth : OptionMenuItemOptionEither
{
	override bool isGrayed()
	{
		if (mGraycheck && mGrayCheck.GetInt() == 0 && mGraycheck2 && mGrayCheck2.GetInt() == 0)
			return true;
		else
			return false;
	}
}