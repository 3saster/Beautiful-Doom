//*********************\\
//*********************\\
//****** G O R E ******\\
//*********************\\
//*********************\\


/////////////////////////
////// SIMPLE GIBS //////
/////////////////////////

/////////////////////////
///// BASIC GIBS ////////
/////////////////////////

class Gibs_General : DebrisGeneral abstract
{
//int etimer;
double brot; //how much to adjust rotation during flight
double bmass; //the mass the gib gains after it lands
bool bflat; //whether it needs to get FLATSPRITE when resting
int restframe; //last frame used in death animation
Default {
	DebrisGeneral.sfxtype "gibs";
	+NOTARGETSWITCH		//so that gibs pushed by explosions don't switch their target field to player
	-NOBLOCKMAP 
	+FLOORCLIP
	-THRUACTORS
	-NOGRAVITY
	-MISSILE
	+ROLLCENTER
	+CORPSE
	+DONTFALL
	+BUDDHA
	+NOPAIN
	seesound "none";
	Bouncesound "gibs/meatland";
	Deathsound "gibs/meatland";
	gravity 0.6;
	mass 1;
	radius 8;
	height 4;
	alpha 1.0;
	translation "0:255=0:255";
	}
virtual void GibBeginPlay() {}
virtual void GibFall() {}
/*override void Tick() {
	super.Tick();
	if (bNOINTERACTION)
		return;
	//console.printf ("%d",etimer);
	if (!level.isFrozen() && etimer < 200)
		etimer++;
	if (etimer >= 200 && pos.z != floorz) {
		A_Stop();
		bNOINTERACTION = true;
		bNOBLOOD = true;
		}
	}*/
states
	{
	LoadSprites:
		GIB1 AXZ 0;
		GIB2 AXZ 0;
		GIB3 AXZ 0;
		GIB4 AXZ 0;
		GIB5 AXZ 0;
		
		GIX1 AZ 0;
		GIX2 AZ 0;
		GIX3 AZ 0;
		GIX4 AXZ 0;
		
		//zombie
		HED1 ABCD 0;
		HND1 ABC 0;
		LEG1 ABCDE 0;
		TR11 ABCDEFG 0;
		TR12 ABCDEFG 0;
		//shotgunguy
		HED2 ABC 0;
		HND2 AB 0;
		LEG2 ABCDE 0;
		TR21 ABCDEFGH 0;
		TR22 ABCDEFGH 0;
		//chaingunguy
		HED3 ABC 0;
		HND3 ABC 0;
		LEG3 ABC 0;
		TR31 ABCDEFGHI 0;
		TR32 ABCDEFGH 0;
		//imp
		HED4 ABC 0;
		HND4 ABC 0;
		LEG4 ABCD 0;
		TR41 ABCDEFGH 0;
		TR42 ABCDEFGH 0;
		//ss
		HED5 ABC 0;
		HND5 AB 0;
		LEG5 ABC 0;
		SCAP A 0;
		//demon
		HED8 AB 0;
		HND8 AB 0;
		stop;
		//caco
		EYE1 AB 0;
		//pain elemental
		HND6 AB 0;
		PAPP AB 0;
		PARP AB 0;
		stop;
	}
}

//smaller version of BD_Blood that spawns behind flying gibs
Class BD_GibBlood : BD_Blood {
Default {
	Scale 0.15;
	deathsound "gibs/BD_Blood";
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	restscale = frandom(0.07,0.11);
	}
}

//smaller versions of resting blood pool that spawns by resting gibs when they're pushed by explosions, leaving trails of blood on the floor
Class BD_GibBloodPool : BD_BloodPool
{
Default {
	scale 0.1;
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	restscale = frandom(0.06,0.085);
	}
}

class BasicMeatPiece : Gibs_General
{
Default {
	scale 0.45;
	}
static const string GibSprite[] =
	{
		"GIB1","GIB2","GIB3","GIB4","GIB5"
	};
override void GibBeginPlay()
	{
	self.sprite = GetSpriteIndex(GibSprite[random(0,4)]);
	bmass = 50;
	brot = random(14,17)*randompick(-1,1);
	A_QueueCorpse();
	restframe = 25;
	roll = random(0,359);
	}
override void GibFall() {
	if (waterlevel == 0) {
		A_Scream();
		frame = restframe;
		roll = 0;
		if (bflat)
			bFLATSPRITE = true;
		}
	A_SetMass(bmass);
	bVULNERABLE = true;
	bDROPPED = true;
	//bFLOORCLIP = true;
	}
override void Tick() {
	Super.Tick();
	if (!bNOBLOOD && vel.length() <= 2 && !bdoom_blood && pos.z == floorz && waterlevel == 0)
		A_SpawnItemEx("BD_GibBloodPool",frandom(-2,2),frandom(-2,2),0,	0,0,0,	0,SXF_TRANSFERPOINTERS,80); //spawn blood trail on the floor when pushed around by explosions
	//if for some reason the switch into raising animation failed, just fade out the gib
	if (FindState("Raise") && target && (target is "BDoomMonster") && target.InStateSequence(target.curstate,target.FindState("Raise")) && !InStateSequence(curstate,FindState("Raise")))
		A_FadeOut(0.05);
	}
states
	{
	spawn:
		#### A 0 NoDelay {
			GibBeginPlay();
			scale.x*=randompick(-1,1);
			}
		#### A 1 {
			if (!bNOBLOOD && bdoom_blood && waterlevel == 0) //spawn blood is CVARs allow and not underwater
				A_SpawnItemEx("BD_GibBlood",frandom(-2,2),frandom(-2,2),frandom(0,2),0,frandom(0,1),frandom(0,1),random(175,185),SXF_TRANSFERPOINTERS,144);
			roll+=brot;
			if (waterlevel > 0) {
				if (!bNOBLOOD && bdoom_blood) //spawn less blood if underwater
					A_SpawnItemEx("BD_GibBlood",frandom(-2,2),frandom(-2,2),frandom(0,2),0,frandom(0,1),frandom(0,1),random(175,185),SXF_TRANSFERPOINTERS,212);
				if (abs(brot) > 0.5) //slow down rotation
					brot *= 0.98;
				else //when not rotating anymore, stop moving
					return ResolveState("Rest");
				}
			return ResolveState(null);
			}
		wait;
	Crash:
		#### # 0 {
			GibFall();
			return ResolveState("Rest");
			}
	Rest:
		#### # 1 { //prepare for resurrection
			if (FindState("Raise") && target && (target is "BDoomMonster") && target.InStateSequence(target.curstate,target.FindState("Raise")))
				return ResolveState("Raise");
			if (waterlevel > 0 && frame != restframe)
				roll += clamp(brot,-0.1,0.1);
			return ResolveState(null);
			}
		wait;
	Raise:
		#### # 0 FlyBack();
		#### A 1 {
			roll-=brot;
			A_FadeOut(0.05);
			if (target &&  Distance3D(target) < 16) {
				self.destroy();
				return ResolveState(null);
				}
			return ResolveState(null);
			}
		wait;
	}
}

class BasicMetalPiece : BasicMeatPiece
{
Default {
	+ROLLCENTER
	seesound "none";
	bouncesound "gibs/metallic";
	deathsound "gibs/metallic";
	-CORPSE
	+MISSILE
	bouncetype "Doom";
	bouncefactor 0.4;
	+NOBLOOD
	}
override void GibBeginPlay()
	{
	frame = random (0,5);
	bmass = 70;
	brot = random(14,20)*randompick(-1,1);
	A_QueueCorpse();
	roll = random(0,359);
	A_SetScale(frandom(0.3,0.8)*randompick(-1,1));
	}
override void GibFall() 
	{
	if (waterlevel == 0) {
		A_Scream();
		}
	A_SetMass(bmass);
	bVULNERABLE = true;
	bMISSILE = false;
	}
states
	{
	spawn:
		GMET A 0 NoDelay GibBeginPlay();
		#### # 1 {			
			roll+=brot;
			if (waterlevel > 0) {
				if (abs(brot) > 1)
					brot *= 0.98;
				if (pos.z > floorz)
					vel.z = -0.5;
				else
					return ResolveState("Rest");
				}
			return ResolveState(null);
			}
		wait;
	Death:
		#### # -1 GibFall();
		stop;
	Crash:
		stop;
	Raise:
		stop;
	}
}

Class MetalPieceTrail : Flare_General
{
Default {
	scale 0.06;
	alpha 0.5;
	+ROLLSPRITE
	renderstyle "Add";
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	roll = random(0,359);
	scale.x*randompick(-1,1);
	scale.y*randompick(-1,1);
	}
states
	{
	Spawn:
		BOM5 ABCDEFGHIJKLM 1 bright;
		stop;
	}
}

class BasicMeatPiece_Heavy : BasicMeatPiece
{
Default {
	scale 0.8;
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	bmass = 80;
	}
}

class Gib_Intestine : BasicMeatPiece
{
Default {
	bouncetype "none";
	scale 0.32;
	gravity 0.5;
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();	
	bmass = 80;
	bflat = true;
	brot = frandom(4,7)*randompick(1,-1);
	self.sprite = GetSpriteIndex("GIX2");
	}
}

class Gib_Lung : BasicMeatPiece
{
Default {
	scale 0.23;
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("GIX1");
	}
}

class Gib_Liver : BasicMeatPiece
{
Default {
	scale 0.23;
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("GIX3");
	}
}

class Gib_Kidneys : BasicMeatPiece //I don't know what that sprite is but it looks non-generic enough to be unique
{
Default {
	scale 0.4;
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("GIX4");
	}
}

class Gib_Hand : BasicMeatPiece
{
Default {
	+ROLLCENTER
	scale 0.8;
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	bmass = 70;
	brot = frandom(6,9)*randompick(1,-1);
	if (target){
		if (target is "BD_Zombieman") {
			self.sprite = GetSpriteIndex("HND1");
			restframe = random(1,2);
			}
		else if (target is "BD_ShotgunGuy") {
			self.sprite = GetSpriteIndex("HND2");
			restframe = 1;
			}
		else if (target is "BD_ChaingunGuy") {
			self.sprite = GetSpriteIndex("HND3");
			restframe = random(1,2);
			}
		else if (target is "BD_DoomImp") {
			self.sprite = GetSpriteIndex("HND4");
			restframe = random(1,2);
			}
		else if (target is "BD_WolfensteinSS") {
			self.sprite = GetSpriteIndex("HND5");
			restframe = 1;
			}
		else if (target is "BD_Demon") {
			self.sprite = GetSpriteIndex("HND8");
			restframe = 1;
			if (target is "BD_Spectre")
				A_SetRenderstyle(0.5,STYLE_OptFuzzy);
			}
		else {
			self.destroy();
			return;
			}
		}
	}
}

class Gib_Leg : BasicMeatPiece
{
Default {
	+ROLLCENTER
	scale 0.8;
	}
override void GibBeginPlay()
	{
	if (target){
		if (target is "BD_Zombieman") {
			self.sprite = GetSpriteIndex("LEG1");
			self.frame = random(0,1);
			restframe = random(2,4);
			}
		else if (target is "BD_ShotgunGuy") {
			self.sprite = GetSpriteIndex("LEG2");
			self.frame = random(0,1);
			restframe = random(2,4);
			}
		else if (target is "BD_ChaingunGuy") {
			self.sprite = GetSpriteIndex("LEG3");
			self.frame = 0;
			restframe = random(1,2);
			}
		else if (target is "BD_DoomImp") {
			self.sprite = GetSpriteIndex("LEG4");
			self.frame = random(0,1);
			restframe = random(2,3);
			}
		else if (target is "BD_WolfensteinSS") {
			self.sprite = GetSpriteIndex("LEG5");
			self.frame = 0;
			restframe = random(1,2);
			}
		else {
			self.destroy();
			return;
			}
		}
	bmass = 70;
	brot = frandom(5,8)*randompick(1,-1);
	}
}

class Gib_Head : BasicMeatPiece
{
Default {
	+ROLLCENTER
	scale 0.8;
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	bmass = 70;
	brot = frandom(8,12)*randompick(1,-1);
	if (target){
		if (target is "BD_Zombieman") {
			self.sprite = GetSpriteIndex("HED1");
			restframe = random(1,3);
			}
		else if (target is "BD_ShotgunGuy") {
			self.sprite = GetSpriteIndex("HED2");
			restframe = random(1,2);
			}
		else if (target is "BD_ChaingunGuy") {
			self.sprite = GetSpriteIndex("HED3");
			restframe = random(1,2);
			}
		else if (target is "BD_DoomImp") {
			self.sprite = GetSpriteIndex("HED4");
			restframe = random(1,2);
			}
		else if (target is "BD_WolfensteinSS") {
			self.sprite = GetSpriteIndex("HED5");
			restframe = random(1,2);
			}
		else if (target is "BD_Demon") {
			self.sprite = GetSpriteIndex("HED8");
			restframe = 1;
			brot = frandom(3,4)*randompick(1,-1);
			bmass = 100;
			if (target is "BD_Spectre")
				A_SetRenderstyle(0.5,STYLE_OptFuzzy);
			}
		else {
			self.destroy();
			return;
			}
		}
	}
}

class Gib_Torso1 : BasicMeatPiece
{
int finalframe; //last frame used in the flying animation
Default {
	gravity 1.0;
	scale 1.0;
	}
override void GibBeginPlay()
	{
	A_QueueCorpse();
	if (target) {
		brot = randompick(-1,1); //only used for underwater rotation
		if (target is "BD_Zombieman") {
			self.sprite = GetSpriteIndex("TR11");
			finalframe = 3; 
			restframe =  6; 
			}
		else if (target is "BD_ShotgunGuy") {
			self.sprite = GetSpriteIndex("TR21");
			finalframe = 3; 
			restframe =  7;
			}	
		else if (target is "BD_ChainGunGuy") {
			self.sprite = GetSpriteIndex("TR31");
			finalframe = 4; 
			restframe =  8; 
			}	
		else if (target is "BD_DoomImp") {
			self.sprite = GetSpriteIndex("TR41");
			finalframe = 3; 
			restframe =  7; 
			}		
		else if (target is "BD_WolfensteinSS") { //the SS soldier has only 1 torso set that is used as his death animation on the WolfesteinSS actor directly
			self.destroy();	
			return;
			}
		}
	bmass = 200;
	}
states
	{
	Spawn:
		#### A 1 NoDelay GibBeginPlay();
		#### # 3 {
			if (bdoom_blood)
				A_SpawnItemEx("BD_Blood",frandom(-2,2),frandom(-2,2),frandom(8,22),0,frandom(0,1),frandom(0,1),random(175,185),SXF_TRANSFERPOINTERS,144);
			if (self.frame < finalframe) //animate flying until the last flying frame
				self.frame++;
			if (waterlevel > 0)
				return ResolveState("Rest");
			return ResolveState(null);
			}
		wait;
	Crash:
		#### # 4 {
			if (self.frame < restframe) //landing ainmation (usually blood comes out of the torso,etc.)
				self.frame++;
			if (self.frame == restframe && vel.length() ~== 0) {
				bNOINTERACTION = true;
				bRELATIVETOFLOOR = true;
				bMOVEWITHSECTOR = true;
				return ResolveState("Rest");
				}
			return ResolveState(null);
			}
		loop;
	Raise:
		#### # 0 FlyBack();
		#### # 3 {
			if (self.frame > 0) //reverse animation
				self.frame--;
			A_FadeOut(0.06);
			if (target &&  Distance3D(target) < 16) {
				self.destroy();
				return ResolveState(null);
				}
			return ResolveState(null);
			}
		wait;
	loadsprites:
		TR11 ABCDEFG 0;
		TR12 ABCDEFG 0;
		TR21 ABCDEFGH 0;
		TR22 ABCDEFGH 0;
		stop;
	}
}

Class Gib_Torso2 : Gib_Torso1
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	if (target) {
		if (target is "BD_Zombieman") {
			self.sprite = GetSpriteIndex("TR12");
			finalframe = 3; 
			restframe =  6; 
			}
		else if (target is "BD_ShotgunGuy") {
			self.sprite = GetSpriteIndex("TR22");
			finalframe = 3; 
			restframe =  7; 
			}	
		else if (target is "BD_ChainGunGuy") {
			self.sprite = GetSpriteIndex("TR32");
			finalframe = 3; 
			restframe =  7; 
			}			
		else if (target is "BD_DoomImp") {
			self.sprite = GetSpriteIndex("TR42");
			finalframe = 3; 
			restframe =  7; 
			}		
		else if (target is "BD_WolfensteinSS") {
			self.destroy();
			return;
			}
		}
	}
}

//// CACODEMON


class CacodemonMeatPiece : BasicMeatPiece
{
Default {
	bloodcolor "00 00 CC";
	translation "CacoGibs";
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	restframe = 23;
	}
}

Class CacodemonEye : BasicMeatPiece
{
Default {
	bloodcolor "00 00 CC";
	}
override void GibBeginPlay()
	{
	self.sprite = GetSpriteIndex("EYE1");
	bmass = 40;
	brot = frandom(18,22)*randompick(1,-1);
	A_QueueCorpse();
	restframe = 1;
	}
}

//// LOST SOUL pieces

class LS_Horn : BasicMeatPiece
{
Default {
	scale 1.0;
	+NOBLOOD;
	seesound "";
	deathsound "";
	bouncesound "";
	}
override void GibBeginPlay()
	{
	Super.GibBeginPlay();
	self.sprite = GetSpriteIndex("LGI1");
	bmass = 40;
	brot = frandom(14,20)*randompick(1,-1);
	}
override void GibFall() 
	{
	if (waterlevel == 0) {
		roll = 0;
		}
	A_SetMass(bmass);
	bVULNERABLE = true;
	bDROPPED = true;
	}
states
	{
	Crash:
		#### # 0 GibFall();
		#### # -1;
		stop;
	Raise:
		stop;
	loadsprites:
		LGI1 A 0;
		LGI2 A 0;
		LGI3 A 0;
		stop;
	}
}

Class LS_shard : LS_Horn
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("LGI3");
	bmass = 30;
	}
}

Class LS_Skull : LS_Horn
{
Default {
	height 4;
	radius 6;
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("LGI2");
	bmass = 50;
	}
}

// PAIN ELEMENTAL

class PainElementalHand : BasicMeatPiece
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("HND6");
	restframe = 1;
	}
}

class PainElementalJaw : PainElementalHand
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("PAPP");
	}
}

class PainElementalHorn : PainElementalHand
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("PARP");
	}
}


// CYBERDEMON

Class BasicBossGib : BasicMeatPiece
{
Default {
	scale 1.0;
	}
override void GibBeginPlay()
	{
	A_QueueCorpse();
	bmass = 200;
	}
override void GibFall() {
	if (waterlevel == 0) {
		A_Scream();
		if (bflat)
			bFLATSPRITE = true;
		}
	roll = 0;
	A_SetMass(bmass);
	bVULNERABLE = true;
	bDROPPED = true;
	}
states
	{
	spawn:
		#### A 0 NoDelay GibBeginPlay();
		#### A 1 {
			if (bdoom_blood)
				A_SpawnItemEx("BD_Blood",frandom(-2,2),frandom(-2,2),frandom(0,2),0,frandom(0,1),frandom(0,1),random(175,185),SXF_TRANSFERPOINTERS,144);
			roll+=brot;
			if (waterlevel == 3)
				return ResolveState("Rest");
			return ResolveState(null);
			}
		wait;
	Crash:
		#### # 5 GibFall();
		#### # 5 {
			if (frame < restframe)
				frame++;
			else
				return ResolveState("Rest");
			return ResolveState(null);
			}
		wait;
	loadsprites:
		//cyberdemon
		HED7 ABCDEFGHIJKLM 0;
		HND7 ABCDEFGHIJ 0;
		HND9 ABCDEFG 0;
		LEG9 ABCDEFG 0;
		LEG7 ABCDEFG 0;
		TRC1 ABCDEFG 0;
		TRC2 ABCDEFGHIJ 0;
		TRC3 ABCDEFGHIJ 0;		
		stop;
	Raise:
		stop;
	}
}

class CyberHead : BasicBossGib
{
Default {
	scale 0.8;
	gravity 0.5;
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	brot = -10;
	self.sprite = GetSpriteIndex("HED7"); 
	}
override void GibFall ()
	{
	super.GibFall();
	frame = randompick(1,5,9);
	restframe = frame+3;
	}
}

Class CyberHandLeft : CyberHead
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	brot = -5;
	self.sprite = GetSpriteIndex("HND7"); 
	roll = 45;
	}
override void GibFall ()
	{
	super.GibFall();
	bNOBLOOD = true;
	frame = randompick(1,4,7);
	restframe = frame+2;
	}
}

Class CyberHandRight : CyberHandLeft
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("HND9"); 
	brot = 5;
	roll = 0;
	}
override void GibFall ()
	{
	super.GibFall();
	bNOBLOOD = false;
	frame = randompick(1,4);
	restframe = frame+2;
	}
}

Class CyberLegLeft : CyberHandRight
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("LEG9"); 
	brot = -5;
	}
}

Class CyberLegRight : CyberHandLeft
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("LEG7"); 
	brot = 5;
	roll = 0;
	}
override void GibFall ()
	{
	super.GibFall();
	bNOBLOOD = false;
	frame = randompick(1,4);
	restframe = frame+2;
	}
}

Class CyberTorso1 : CyberHandRight
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	self.sprite = GetSpriteIndex("TRC1"); 
	brot = 8;
	}
}

Class CyberTorso2 : Gib_Torso1
{
override void GibBeginPlay()
	{
	A_QueueCorpse();
	self.sprite = GetSpriteIndex("TRC2");
	restframe = 4; 
	restframe =  9; 
	bmass = 600;
	}
states
	{
	Rest:
		#### # 0 {
			self.frame = restframe; //in case for SOME reason the animation didn't finish
			}
		#### # -1;
		stop;
	}
}

Class CyberTorso3 : CyberTorso2
{
override void GibBeginPlay()
	{
	Super.GibBeginPlay();
	self.sprite = GetSpriteIndex("TRC3");
	}
}

// SPIDER MASTERMIND



Class SpiderBrainRight : BasicBossGib
{
Default {
	scale 0.8;
	}
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	brot = 7;
	self.sprite = GetSpriteIndex("SPP1"); 
	restframe = 3;
	}
override void GibFall() {
	super.GibFall();
	frame = 1;
	restframe = 3;
	}
states
	{
	loadsprites:
		SPP1 ABCD 0;
		SPP2 ABCD 0;
		SPP3 A 0;
		SPP4 AB 0;
		SPP5 ABCD 0;
		TRP1 ABC 0;
		TRP2 AB 0;
		stop;
	}
}

Class SpiderBrainLeft : SpiderBrainRight
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	brot = -7;
	self.sprite = GetSpriteIndex("SPP1"); 
	scale.x *= -1;
	}
}

Class SpiderBrainMid : SpiderBrainRight
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	brot = randompick(-6,6);
	self.sprite = GetSpriteIndex("SPP2"); 
	scale.x *= randompick(-1,1);
	}
}

Class SpiderFace : SpiderBrainRight
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	brot = randompick(-5,5);
	self.sprite = GetSpriteIndex("SPP3"); 
	}
override void GibFall() {
	super.GibFall();
	bFLATSPRITE = true;
	frame = 0;
	restframe = 0;
	}
}

class SpiderMetalPiece : BasicMetalPiece
{
override void GibBeginPlay()
	{	
	bmass = 100;
	A_QueueCorpse();
	roll = random(0,359);	
	self.sprite = GetSpriteIndex("TRP1"); 
	frame = random (0,2);
	brot = randompick(8,-8);
	A_SetScale(0.6);
	scale.x *= randompick(-1,1);
	}
}

class SpiderGunGib : SpiderMetalPiece
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	sprite = GetSpriteIndex("TRP2");
	frame = 0;
	brot = randompick(6,-6);
	scale.x *= randompick(-1,1);
	}
override void GibFall() {
	super.GibFall();
	frame = 1;
	}
}

class SpiderLegRight : BasicBossGib
{
int endroll;
Default {
	+NOBLOOD
	seesound "none";
	deathsound "gibs/metallic";
	scale 1.0;
	}
override void GibBeginPlay()
	{
	Super.GibBeginPlay();
	frame = random(0,3);
	brot = 5;
	endroll = 116;
	}
override void GibFall(){
	super.GibFall();
	roll = endroll;
	}
states
	{
	spawn:
		SPP5 # 0 NoDelay GibBeginPlay();
		SPP5 # 1 {
			if (abs(roll) < abs(endroll))
				roll+=brot;
			if (waterlevel == 3)
				return ResolveState("Rest");
			return ResolveState(null);
			}
		wait;
	Crash:
		SPP5 # -1 GibFall();
		stop;
	}
}

class SpiderLegLeft : SpiderLegRight
{
override void GibBeginPlay()
	{
	super.GibBeginPlay();
	scale.x *= -1;
	brot = -5;
	endroll = -116;
	}
}

Class SpiderHandRight : BasicBossGib
{
Default {
	xscale -1;
	}
override void GibBeginPlay() {
	super.GibBeginPlay();
	bmass = 50;
	brot = 8;
	restframe = 1;
	}
states
	{
	spawn:
		SPP4 A 0 NoDelay {
			GibBeginPlay();
			}
		SPP4 A 1 {
			A_SpawnItemEx("BD_GibBlood",frandom(-2,2),frandom(-2,2),frandom(0,2),0,frandom(0,1),frandom(0,1),random(175,185),SXF_TRANSFERPOINTERS,144);
			roll+=brot;
			if (waterlevel == 3)
				return ResolveState("Rest");
			return ResolveState(null);
			}
		wait;
	Crash:
		SPP4 B -1 GibFall();
		stop;
	}
}

Class SpiderHandLeft : SpiderHandRight
{
Default {
	xscale 1;
	}
override void GibBeginPlay() {
	super.GibBeginPlay();
	brot = -8;
	}
}