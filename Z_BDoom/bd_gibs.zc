
class BD_BaseGib : SmallDebris abstract {
	name gibtype; //can be set explicitly by the spawner; otherwise becomes equal to the class name of the spawner (which is normally the gib's target)
	protected double bmass; //the mass the gib gains after it lands
	protected int restframe; //last frame used in death animation
	protected bool bflat;
	bool instant;
	protected int outboundscounter;
	Default {
		BD_BaseDebris.sfxtype 'gibs';
		SmallDebris.removeonfall false;
		SmallDebris.dbrake 0.75;
		SmallDebris.hitceiling true;
		RenderStyle 'normal';
		+NOTARGETSWITCH		//so that gibs pushed by explosions don't switch their target field to player
		-NOGRAVITY
		-MISSILE
		+ROLLCENTER
		+CORPSE
		+BUDDHA //can't use +NODAMAGE here because it severely reduces the pushing effect of explosions
		+NOPAIN
		Deathsound "gibs/meatland";
		gravity 0.6;
		mass 1;
		radius 8;
		height 5;
		alpha 1.0;
		translation "0:255=0:255";
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		A_FaceMovementDirection();
		if (!target || !(target is "BDoomMonster"))
			return;
		CopyBloodColor(target);
		if (!Voffset)
			Voffset = 0.5;
	}
	virtual void GibBeginPlay() {
		if (gibtype == 'none' && target)
			gibtype = target.GetClassName();
	}
	override void BD_HitCeiling() {
		super.BD_HitCeiling();
		if (d_ceiling) {
			if (!bNOBLOOD) {
				let bld = BD_Blood(Spawn("BD_Blood",(pos.x,pos.y,ceilingz-1)));
				if (bld) {
					if (target && target is "BDoomMonster")	{
						bld.target = target;
						bld.translation = target.BloodTranslation;
						bld.vel.z = 0.1;
						let mon = BDoomMonster(target);
						if (mon) 
							mon.meatlist.Push(bld);
					}
				}
			}
			A_Stop();
			A_Scream();
			VOffset = height;
		}
		else {
			vel.z = -gravity;
			vel.xy *= 0.5;
			//Console.printf("%s hit ceiling, velz: %i",GetClassName(),vel.z);
		}
		SetOrigin((pos.x,pos.y,ceilingz-height),true);
	}		
	override void BD_HitWall() {
		super.BD_HitWall();
		if (!bNOBLOOD)
			TraceBleedAngle(1,angle,0);
		//if "WallSlide" state exists, stick to wall:
		if (d_wall) {
			SetOrigin(wallpos + wallnormal * radius,true);
			A_Stop();
		}
	}
	override void BD_HitFloor() {
		Super.BD_HitFloor();
		A_Scream();
		bSLIDESONWALLS = true;
		gravity = default.gravity;
		if (bflat) {
			bFLATSPRITE = true;
			pitch = 0;
		}
		if (waterlevel == 0) {
			if (!instant)
				A_Scream();
			frame = restframe;
			roll = 0;
		}
		if (!bNOBLOOD) {
			let bld = BD_Blood(Spawn("BD_BloodPool",(pos.x,pos.y,floorz)));
			if (bld) {
				if (target && target is "BDoomMonster")	{
					bld.target = target;
					bld.translation = target.BloodTranslation;
					let mon = BDoomMonster(target);
					if (mon) 
						mon.meatlist.Push(bld);
				}
			}
		}
		A_SetMass(bmass);
		bDROPPED = true;
	}
	void BD_GibBleed(Class<Actor> spawnclass, double hpos = 0, double vpos = 0, int spawnchance = 100) {				
		if (random(0,100) > spawnchance)
			return;
		let bdrop = BD_BaseDebris(Spawn(spawnclass, (pos.x+frandom(-hpos,hpos),pos.y+frandom(-hpos,hpos),pos.z+vpos ))	);
		if (!bdrop)
			return;
		bdrop.translation = BloodTranslation;
		bdrop.scale *= 0.6;
		if (target && target is "BDoomMonster") {
			bdrop.target = target;
			let mon = BDoomMonster(target);
			mon.meatlist.Push(bdrop);
		}
	}
	override void Tick() {
		Super.Tick();	//SmallDebris's Tick, not Actor's â€” handles movement itself
		if (isFrozen())
			return;		
		//remove if out of level:
		if (!level.IsPointInLevel(pos)) {
			outboundscounter++;
			if (outboundscounter > 35) {
				destroy();
				return;
			}
		}
		else
			outboundscounter = 0;	
		//Spawn blood trails when sliding across the floor:
		if (!bdoom_blood || bNOBLOOD || !landed || waterlevel != 0)
			return;
		if ((abs(vel.x) > 2 || abs(vel.y) > 2) )
			BD_GibBleed("BD_BloodPool",2,-pos.z+floorz,30);
	}
	states {
	LoadSprites:
		GIBD ABC 0;
		GIB1 AXZ 0;
		GIB2 AXZ 0;
		GIB3 AXZ 0;
		GIB4 AXZ 0;
		GIB5 AXZ 0;
		
		GIX1 AZ 0;
		GIX2 AZ 0;
		GIX3 AZ 0;
		GIX4 AXZ 0;
		
		//zombie
		HED1 ABCD 0;
		HND1 ABC 0;
		LEG1 ABCDE 0;
		TR11 ABCDEFG 0;
		TR12 ABCDEFG 0;
		//shotgunguy
		HED2 ABC 0;
		HND2 AB 0;
		LEG2 ABCDE 0;
		TR21 ABCDEFGH 0;
		TR22 ABCDEFGH 0;
		//chaingunguy
		HED3 ABC 0;
		HND3 ABC 0;
		LEG3 ABC 0;
		TR31 ABCDEFGHI 0;
		TR32 ABCDEFGH 0;
		//imp
		HED4 ABC 0;
		HND4 ABC 0;
		LEG4 ABCD 0;
		TR41 ABCDEFGH 0;
		TR42 ABCDEFGH 0;
		//ss
		HED5 ABC 0;
		HND5 AB 0;
		LEG5 ABC 0;
		SCAP A 0;
		//demon
		HED8 AB 0;
		HND8 AB 0;
		stop;
		//caco
		EYE1 AB 0;
		//pain elemental
		HND6 AB 0;
		PAPP AB 0;
		PARP AB 0;
		stop;
	}
}

//smaller version of BD_Blood that spawns behind flying gibs
Class BD_GibBlood : BD_Blood {
	Default {
		Scale 0.15;
		deathsound "gibs/blooddrop";
	}
}

class BasicMeatPiece : BD_BaseGib {
	double watergravity;
	property watergravity : watergravity;
	Default {
		BasicMeatPiece.watergravity 0.01;
		scale 0.45;
		radius 2;
	}
	static const string GibSprite[] =
		{
			"GIB1","GIB2","GIB3","GIB4","GIB5"
	};
	override void PostBeginPlay() {
		super.PostBeginPlay();	
		A_FaceMovementDirection();
		if (self.GetClassName() == "BasicMeatPiece")
			bSLIDESONWALLS = false;
		GibBeginPlay();
	}
	override void Tick() {
		super.Tick();
		if (isFrozen() || waterlevel <= 1)
			return;
		vel *= 0.9;		
		gravity = Clamp(gravity * 0.9,watergravity,10);
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex(GibSprite[random(0,4)]);
		bmass = 50;
		wrot = random(14,17)*randompick(-1,1);
		restframe = 25;
		roll = random(0,359);
		if (instant) {
			BD_HitFloor();
		}
	}
	states {
	spawn:
		#### A 0 NoDelay {
			bSPRITEFLIP = randompick(0,1);
		}
		#### # 1 {
			roll += wrot;
			if (waterlevel == 0)
				BD_GibBleed("BD_Blood",frandom(-2,2),frandom(-2,2),25);
			else {				
				if (!bNOBLOOD && bdoom_blood) //spawn less blood if underwater
					BD_GibBleed("BD_Blood",frandom(-2,2),frandom(-2,2),18);
				if (abs(wrot) > 0.5) //slow down rotation
					wrot *= 0.98;
				else //when not rotating anymore, stop moving
					return ResolveState("Rest");
			}
			return ResolveState(null);
		}
		wait;
	HitWall:
		#### # 1 {
			gravity = frandom(0.0018,0.0022);
			A_SetTics(random(35,90));
			roll = randompick(0,180);
			let smudge = GibSmudge(Spawn("GibSmudge",pos));
			if (smudge) {
				smudge.master = self;
				smudge.translation = BloodTranslation;
			}
			gravity = frandom(0.0018,0.0022);
		}
		#### # 0 {
			gravity = bmass*frandom(0.0006,0.0007);
		}
		#### # 1;
		wait;
	HitCeiling:
		#### # 1 {
			A_SetTics(random(50,100));		
			gravity = frandom(0.0022,0.0025);
			let smudge = GibSmudge(Spawn("GibSmudge",pos));
			if (smudge) {
				smudge.master = self;
				smudge.ceiling = true;
				smudge.scale.x*= 1.4;
			}
		}
		#### # 15 {
			gravity = default.gravity*0.1;
		}
		#### # 0 {
			gravity = default.gravity*0.6;
		}
		#### # 1;
		wait;
	Death:
		#### # 1 {
			if (vel ~== (0,0,0))
				return ResolveState("Rest");
			return ResolveState(null);
		}
		wait;
	Rest:
		#### # 1 { 
			if (waterlevel > 0 && frame != restframe)
				roll += clamp(wrot,-0.1,0.1);
		}
		wait;
	FadeOut:
		#### # 0 A_SetRenderstyle(alpha,Style_Translucent);
		#### # 1 A_FadeOut(0.01);
		wait;
	Raise:
		#### # 0 FlyBack();
		#### A 1 {
			roll-=wrot;
			A_FadeOut(0.01);
			if (target &&  Distance2D(target) < 16) {
				destroy();
				return ResolveState(null);
			}
			return ResolveState(null);
		}
		wait;
	}
}
	
Class GibSmudge : SmallDebris {
	BasicMeatPiece meat;
	bool ceiling;
	Default {
		BD_BaseDebris.sfxtype 'gibs';
		SmallDebris.removeonfall false;
		gravity 0;
		+FORCEYBILLBOARD
		xscale 0.32;
		yscale 0.5;
		alpha 0.8;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		bSPRITEFLIP = randompick(0,1);
		if (master)
			meat = BasicMeatPiece(master);
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (meat) {
			if (!meat.landed)
				SetOrigin(meat.pos,true);
			if (ceiling) {
				if (!meat.landed)
					scale.y = Clamp((ceilingz-meat.pos.z)*0.025,0.05,0.4);
				else if (abs(scale.y) > 0.01)
					scale.y *= 0.85;
				else {
					destroy();
					return;
				}
			}
			else {
				if (!meat.landed) 
					scale.y = Clamp(abs(meat.vel.z)*0.2,0.05,0.4);
				else if (abs(scale.y) > 0.01)
					scale.y *= 0.9;
				else {
					destroy();
					return;
				}
			}
		}
		else {
			 destroy();
			 return;
			 }
	}
	states {
	Spawn:
		GIBD B -1 NoDelay {
			if (ceiling)
				frame = 2;
		}
		stop;			
	}
}

Class BD_BasicLimb : BasicMeatPiece {
	Default {
		+BOUNCEONFLOORS
		+BOUNCEONWALLS		
		wallbouncefactor 0.4;
		bouncefactor 0.2;
	}
}

class BasicMetalPiece : BasicMeatPiece {
	Default {
		BasicMeatPiece.watergravity 0.08;
		seesound "none";
		bouncesound "gibs/metallic";
		deathsound "gibs/metallic";
		-CORPSE
		+MISSILE
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		wallbouncefactor 0.5;
		bouncefactor 0.4;
		+NOBLOOD		
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		Voffset = 2;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("GMET");
		bmass = 70;
		wrot = random(14,20)*randompick(-1,1);
		frame = random (0,5);
		restframe = frame;
		roll = random(0,359);
		A_SetScale(frandom(0.3,0.8)*randompick(-1,1));
	}
	override void BD_HitFloor()  {
		super.BD_HitFloor();
		bMISSILE = false;
	}
	states {
		spawn:
			GMET A 0 NoDelay GibBeginPlay();
			#### # 1 {			
				roll+=wrot;
				if (waterlevel > 0) {
					if (abs(wrot) > 1)
						wrot *= 0.98;
					if (pos.z > floorz)
						vel.z = -0.5;
					else
						return ResolveState("Rest");
				}
				return ResolveState(null);
			}
			wait;
		Raise:
			stop;
		HitWall:
			stop;
		HitCeiling:
			stop;
	}
}

class BasicMeatPiece_Heavy : BasicMeatPiece {
	Default {
		scale 0.8;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		bmass = 80;
	}
}

class Gib_Intestine : BasicMeatPiece {
	Default {
		scale 0.32;
		gravity 0.5;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();	
		bflat = true;
		bmass = 80;
		wrot = frandom(4,7)*randompick(1,-1);
		sprite = GetSpriteIndex("GIX2");
	}
}

class Gib_Lung : BasicMeatPiece {
	Default {
		+SLIDESONWALLS
		scale 0.23;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("GIX1");
	}
}

class Gib_Liver : BasicMeatPiece {
	Default {
		+SLIDESONWALLS
		scale 0.23;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("GIX3");
	}
}

class Gib_Kidneys : BasicMeatPiece { //I don't know what that sprite is but it looks non-generic enough to be unique
	Default {
		+SLIDESONWALLS
		scale 0.4;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("GIX4");
	}
}

class Gib_Hand : BD_BasicLimb {
	Default {
		scale 0.8;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		bmass = 70;
		wrot = frandom(6,9)*randompick(1,-1);
		if (gibtype == 'BD_Zombieman') {
			sprite = GetSpriteIndex("HND1");
			restframe = random(1,2);
		}
		else if (gibtype == 'BD_ShotgunGuy') {
			sprite = GetSpriteIndex("HND2");
			restframe = 1;
		}
		else if (gibtype == 'BD_ChaingunGuy') {
			sprite = GetSpriteIndex("HND3");
			restframe = random(1,2);
		}
		else if (gibtype == 'BD_DoomImp') {
			sprite = GetSpriteIndex("HND4");
			restframe = random(1,2);
		}
		else if (gibtype == 'BD_WolfensteinSS') {
			sprite = GetSpriteIndex("HND5");
			restframe = 1;
		}
		else if (gibtype == 'BD_Demon' || gibtype == 'BD_Spectre') {
			sprite = GetSpriteIndex("HND8");
			restframe = 1;
			if (gibtype == 'BD_Spectre')
				A_SetRenderstyle(0.5,STYLE_OptFuzzy);
		}
		else {
			destroy();
			return;
		}
	}
	states {		
	HitWall:
		stop;
	HitCeiling:
		stop;
	}
}

class Gib_Leg : BD_BasicLimb {
	Default {
		scale 0.8;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		if (gibtype == 'BD_Zombieman') {
			sprite = GetSpriteIndex("LEG1");
			frame = random(0,1);
			restframe = random(2,4);
		}
		else if (gibtype == 'BD_ShotgunGuy') {
			sprite = GetSpriteIndex("LEG2");
			frame = random(0,1);
			restframe = random(2,4);
		}
		else if (gibtype == 'BD_ChaingunGuy') {
			sprite = GetSpriteIndex("LEG3");
			frame = 0;
			restframe = random(1,2);
		}
		else if (gibtype == 'BD_DoomImp') {
			sprite = GetSpriteIndex("LEG4");
			frame = random(0,1);
			restframe = random(2,3);
		}
		else if (gibtype == 'BD_WolfensteinSS') {
			sprite = GetSpriteIndex("LEG5");
			frame = 0;
			restframe = random(1,2);
		}
		else {
			destroy();
			return;
		}
		bmass = 70;
		wrot = frandom(5,8)*randompick(1,-1);
	}
	states {		
	HitWall:
		stop;
	HitCeiling:
		stop;
	}
}

class Gib_Head : BD_BasicLimb {
	Default {
		scale 0.8;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		bmass = 70;
		wrot = frandom(8,12)*randompick(1,-1);
		if (gibtype == 'BD_Zombieman') {
			sprite = GetSpriteIndex("HED1");
			restframe = random(1,3);
		}
		else if (gibtype == 'BD_ShotgunGuy') {
			sprite = GetSpriteIndex("HED2");
			restframe = random(1,2);
		}
		else if (gibtype == 'BD_ChaingunGuy') {
			sprite = GetSpriteIndex("HED3");
			restframe = random(1,2);
		}
		else if (gibtype == 'BD_DoomImp') {
			sprite = GetSpriteIndex("HED4");
			restframe = random(1,2);
		}
		else if (gibtype == 'BD_WolfensteinSS') {
			sprite = GetSpriteIndex("HED5");
			restframe = random(1,2);
		}
		else if (gibtype == 'BD_Demon' || gibtype == 'BD_Spectre') {
			sprite = GetSpriteIndex("HED8");
			restframe = 1;
			wrot = frandom(3,4)*randompick(1,-1);
			bmass = 100;
			if (gibtype == 'BD_Spectre')
				A_SetRenderstyle(0.5,STYLE_OptFuzzy);
		}
		else {
			destroy();
			return;
		}
	}
	states {		
	HitWall:
		stop;
	HitCeiling:
		stop;
	}
}

class Gib_Torso1 : BasicMeatPiece {
	int finalframe; //last frame used in the flying animation
	Default {
		BD_BaseDebris.sfxtype "none"; //I don't want torsos to get destroyed because they essentially function as bld corpse and show where the monster died
		gravity 1.0;
		scale 1.0;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		roll = 0;
		wrot = randompick(-1,1); //only used for underwater rotation
		if (gibtype == 'BD_Zombieman') {
			sprite = GetSpriteIndex("TR11");
			finalframe = 3; 
			restframe =  6; 
		}
		else if (gibtype == 'BD_ShotgunGuy') {
			sprite = GetSpriteIndex("TR21");
			finalframe = 3; 
			restframe =  7;
		}	
		else if (gibtype == 'BD_ChainGunGuy') {
			sprite = GetSpriteIndex("TR31");
			finalframe = 4; 
			restframe =  8; 
		}	
		else if (gibtype == 'BD_DoomImp') {
			sprite = GetSpriteIndex("TR41");
			finalframe = 3; 
			restframe =  7; 
		}		
		else if (gibtype == 'BD_WolfensteinSS') { //the SS soldier has only 1 torso set that is used as his death animation on the WolfesteinSS actor directly
			destroy();	
			return;
		}
		bmass = 200;
	}
	states {
		Spawn:
			#### A 1 NoDelay GibBeginPlay();
			#### # 3 {
				if (bdoom_blood)
					A_SpawnItemEx("BD_Blood",frandom(-2,2),frandom(-2,2),frandom(8,22),0,frandom(0,1),frandom(0,1),random(175,185),SXF_TRANSFERPOINTERS,144);
				if (frame < finalframe) //animate flying until the last flying frame
					frame++;
				if (waterlevel > 0)
					return ResolveState("Rest");
				return ResolveState(null);
			}
			wait;
		HitWall:
			stop;
		HitCeiling:
			stop;
		Death:
			#### # 4 {
				if (frame < restframe) //landing ainmation (usually blood comes out of the torso,etc.)
					frame++;
				if (frame == restframe && vel ~== (0, 0, 0)) { //in contrast to other gibs, torso is always noninteractive, so that it always stays close to the position of the original dead body (so that players can see where the monster died and can predict where the Arch-Vile is going to go to resurrect them)
					if (bdoom_blood && target && (target is "BDoomMonster")) {
						let body = BDoomMonster(target);
						let pool = BD_BaseDebris(Spawn("AniBloodPool",(pos.x,pos.y,floorz)));
						if (body && pool) {
							body.meatlist.push(pool);
							pool.target = body;
						}
					}
					A_SpawnItemEx("CorpseFlySpawner",flags:SXF_SETMASTER);
					return ResolveState("Rest");
				}
				return ResolveState(null);
			}
			loop;
		Rest:
			#### # 1 { 
				if (waterlevel > 0 && frame != restframe)
					roll += clamp(wrot,-0.1,0.1);
				return ResolveState(null);
			}
			wait;
		Raise:
			#### # 0 FlyBack();
			#### # 3 {
				if (frame > 0) //reverse animation
					frame--;
				A_FadeOut(0.03);
				if (target &&  Distance3D(target) < 16) {
					destroy();
					return ResolveState(null);
				}
				return ResolveState(null);
			}
			wait;
		loadsprites:
			TR11 ABCDEFG 0;
			TR12 ABCDEFG 0;
			TR21 ABCDEFGH 0;
			TR22 ABCDEFGH 0;
			stop;
	}
}

Class Gib_Torso2 : Gib_Torso1 {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		if (gibtype == 'BD_Zombieman') {
			sprite = GetSpriteIndex("TR12");
			finalframe = 3; 
			restframe =  6; 
		}
		else if (gibtype == 'BD_ShotgunGuy') {
			sprite = GetSpriteIndex("TR22");
			finalframe = 3; 
			restframe =  7; 
		}	
		else if (gibtype == 'BD_ChainGunGuy') {
			sprite = GetSpriteIndex("TR32");
			finalframe = 3; 
			restframe =  7; 
		}			
		else if (gibtype == 'BD_DoomImp') {
			sprite = GetSpriteIndex("TR42");
			finalframe = 3; 
			restframe =  7; 
		}		
		else if (gibtype == 'BD_WolfensteinSS') {
			destroy();
			return;
		}
	}
}

//// CACODEMON


class CacodemonMeatPiece : BasicMeatPiece {
	Default {
		bloodcolor "00 00 CC";
		translation "CacoGibs";
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		restframe = 23;
	}
}

Class BD_CacoEye : BasicMeatPiece {
	Default {
		bloodcolor "00 00 CC";
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("EYE1");
		bmass = 40;
		wrot = frandom(18,22)*randompick(1,-1);
		restframe = 1;
	}
}

//// LOST SOUL pieces

class LS_Horn : BD_BasicLimb {
	Default {
		scale 1.0;
		+NOBLOOD;
		seesound "";
		deathsound "";
		bouncesound "";
	}
	override void GibBeginPlay() {
		Super.GibBeginPlay();
		sprite = GetSpriteIndex("LGI1");
		restframe = 0;
		bmass = 40;
		wrot = frandom(14,20)*randompick(1,-1);
	}
	states {
		Raise:
			stop;
		loadsprites:
			LGI1 A 0;
			LGI2 A 0;
			LGI3 A 0;
			stop;
	}
}

Class LS_shard : LS_Horn {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("LGI3");
		bmass = 30;
	}
}

Class LS_Skull : LS_Horn {
	Default {
		height 4;
		radius 2;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("LGI2");
		bmass = 50;
	}
}

// PAIN ELEMENTAL

class PainElementalHand : BasicMeatPiece {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("HND6");
		restframe = 1;
	}
}

class PainElementalJaw : BD_BasicLimb {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("PAPP");
		restframe = 1;
	}
}

class PainElementalHorn : BD_BasicLimb {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("PARP");
		restframe = 1;
	}
}


// CYBERDEMON

Class BasicBossGib : BasicMeatPiece {
	Default {
		scale 1.0;
	}
	override void GibBeginPlay() {
		bmass = 200;
		wrot = random(14,17)*randompick(-1,1);
		restframe = 25;
		roll = random(0,359);
	}
	states {
		spawn:
			#### A 0 NoDelay GibBeginPlay();
			#### A 1 {
				if (bdoom_blood)
					A_SpawnItemEx("BD_Blood",frandom(-2,2),frandom(-2,2),frandom(0,2),0,frandom(0,1),frandom(0,1),random(175,185),SXF_TRANSFERPOINTERS,144);
				roll+=wrot;
				if (waterlevel == 3)
					return ResolveState("Rest");
				return ResolveState(null);
			}
			wait;
		Death:
			#### # 5;
			#### # 5 {
				if (frame < restframe)
					frame++;
				else if (vel ~== (0,0,0))
					return ResolveState("Rest");
				return ResolveState(null);
			}
			wait;
		loadsprites:
			//cyberdemon
			HED7 ABCDEFGHIJKLM 0;
			HND7 ABCDEFGHIJ 0;
			HND9 ABCDEFG 0;
			LEG9 ABCDEFG 0;
			LEG7 ABCDEFG 0;
			TRC1 ABCDEFG 0;
			TRC2 ABCDEFGHIJ 0;
			TRC3 ABCDEFGHIJ 0;		
			stop;
		Raise:
			stop;
	}
	States {
	HitWall:
		stop;
	HitCeiling:
		stop;
	}
}

class CyberHead : BasicBossGib {
	Default {
		scale 0.8;
		gravity 0.5;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = -10;
		sprite = GetSpriteIndex("HED7"); 
	}
	override void BD_HitFloor () {
		super.BD_HitFloor();
		frame = randompick(1,5,9);
		restframe = frame+3;
	}
}

Class CyberHandLeft : CyberHead {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = -5;
		sprite = GetSpriteIndex("HND7"); 
		roll = 45;
	}
	override void BD_HitFloor () {
		super.BD_HitFloor();
		bNOBLOOD = true;
		frame = randompick(1,4,7);
		restframe = frame+2;
	}
}

Class CyberHandRight : CyberHandLeft {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("HND9"); 
		wrot = 5;
		roll = 0;
	}
	override void BD_HitFloor () {
		super.BD_HitFloor();
		bNOBLOOD = false;
		frame = randompick(1,4);
		restframe = frame+2;
	}
}

Class CyberLegLeft : CyberHandRight {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("LEG9"); 
		wrot = -5;
	}
}

Class CyberLegRight : CyberHandLeft {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("LEG7"); 
		wrot = 5;
		roll = 0;
	}
	override void BD_HitFloor () {
		super.BD_HitFloor();
		bNOBLOOD = false;
		frame = randompick(1,4);
		restframe = frame+2;
	}
}

Class CyberTorso1 : CyberHandRight {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("TRC1"); 
		wrot = 8;
	}
}

Class CyberTorso2 : Gib_Torso1 {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("TRC2");
		restframe = 4; 
		restframe = 9; 
		bmass = 600;
	}
	states {
		Rest:
			#### # 0 {
				frame = restframe; //in case for SOME reason the animation didn't finish
			}
			#### # -1;
			stop;
	}
}

Class CyberTorso3 : CyberTorso2 {
	override void GibBeginPlay() {
		Super.GibBeginPlay();
		sprite = GetSpriteIndex("TRC3");
	}
}

// SPIDER MASTERMIND



Class SpiderBrainRight : BasicBossGib {
	Default {
		scale 0.8;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = 7;
		sprite = GetSpriteIndex("SPP1"); 
		restframe = 3;
	}
	override void BD_HitFloor() {
		super.BD_HitFloor();
		frame = 1;
		restframe = 3;
	}
	states {
		loadsprites:
			SPP1 ABCD 0;
			SPP2 ABCD 0;
			SPP3 A 0;
			SPP4 AB 0;
			SPP5 ABCD 0;
			TRP1 ABC 0;
			TRP2 AB 0;
			stop;
	}
}

Class SpiderBrainLeft : SpiderBrainRight {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = -7;
		sprite = GetSpriteIndex("SPP1"); 
		scale.x *= -1;
	}
}

Class SpiderBrainMid : SpiderBrainRight {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = randompick(-6,6);
		sprite = GetSpriteIndex("SPP2"); 
		scale.x *= randompick(-1,1);
	}
}

Class SpiderFace : SpiderBrainRight {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = randompick(-5,5);
		sprite = GetSpriteIndex("SPP3"); 
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		bflat = true;
	}
	override void BD_HitFloor() {
		super.BD_HitFloor();
		frame = 0;
		restframe = 0;
	}
}

class SpiderMetalPiece : BasicMetalPiece {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		bmass = 100;
		sprite = GetSpriteIndex("TRP1"); 
		frame = random (0,2);
		restframe = frame;
		wrot = randompick(8,-8);
		A_SetScale(0.6);
		scale.x *= randompick(-1,1);
	}
}

class SpiderGunGib : SpiderMetalPiece {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("TRP2");
		frame = 0;
		wrot = randompick(6,-6);
		scale.x *= randompick(-1,1);
	}
	override void BD_HitFloor() {
		super.BD_HitFloor();
		frame = 1;
	}
}

class SpiderLegRight : BasicBossGib {
	int endroll;
	Default {
		+NOBLOOD
		seesound "none";
		deathsound "gibs/metallic";
		scale 1.0;
	}
	override void GibBeginPlay() {
		Super.GibBeginPlay();
		frame = random(0,3);
		restframe = frame;
		wrot = 5;
		roll = 0;
		endroll = 116;
	}
	override void BD_HitFloor(){
		super.BD_HitFloor();
		roll = endroll;
	}
	states {
		spawn:
			SPP5 A 0 NoDelay GibBeginPlay();
			SPP5 # 1 {
				if (abs(roll) < abs(endroll))
					roll+=wrot;
				if (waterlevel == 3)
					return ResolveState("Rest");
				return ResolveState(null);
			}
			wait;
		Death:
			SPP5 # -1;
			stop;
	}
}

class SpiderLegLeft : SpiderLegRight {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		scale.x *= -1;
		wrot = -5;
		endroll = -116;
	}
}

Class SpiderHandRight : BasicBossGib {
	Default {
		xscale -1;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		bmass = 50;
		wrot = 8;
		restframe = 1;
	}
	states {
		spawn:
			SPP4 A 0 NoDelay {
				GibBeginPlay();
			}
			SPP4 A 1 {
				A_SpawnItemEx("BD_GibBlood",frandom(-2,2),frandom(-2,2),frandom(0,2),0,frandom(0,1),frandom(0,1),random(175,185),SXF_TRANSFERPOINTERS,144);
				roll+=wrot;
				if (waterlevel == 3)
					return ResolveState("Rest");
				return ResolveState(null);
			}
			wait;
		Death:
			SPP4 B -1;
			stop;
	}
}

Class SpiderHandLeft : SpiderHandRight {
	Default {
		xscale 1;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = -8;
	}
}