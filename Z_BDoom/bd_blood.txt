Class BloodGeneral : DebrisGeneral
{
string bloodfloor;
string bloodceiling;
string bcolor;
Default {
	DebrisGeneral.sfxtype 2;
	+PUFFGETSOWNER
	-NOGRAVITY
	+ROLLSPRITE
	+DONTSPLASH
	gravity 0.7;
	renderstyle "Translucent";
	seesound "none";
	Deathsound "none";
	decal "none";
	height 1;
	}
states
	{
	LoadSprites:
		2PLT ABCDEFGHIJKLMNOPQ 0;
		YBL7 ABCDEFGHIJKLMNOPQRS 0;
		YBL8 ABCDEFGHIJKLMNOPQRS 0;
		YBL9 ABCDEFGHIJKLMNOPQRS 0;
		stop;
	Fade:
		#### # 1 A_FadeOut(0.02);
		loop;
	}
}


Class BloodDrop : BloodGeneral replaces Blood
{
Default {
	scale 0.35;
	gravity 0.5;
	renderstyle "Translucent";
	alpha 0.8;
	height 8;
	}
// some rough math incoming but I think it does the job
override void PostBeginPlay() {
	if (target) {
	//obvious green prevalence
		if (target.bloodcolor.G > 4*(target.bloodcolor.R  + target.bloodcolor.B)) {
			bcolor = "green";
			A_SetTranslation("GreenBlood");
			}
	 //obvious blue prevalence
		else if (target.bloodcolor.B > 4*(target.bloodcolor.R  + target.bloodcolor.G)) {
			bcolor = "blue";
			A_SetTranslation("BlueBlood");
			}
	 //obvious red prevalence. bloodcolor = 0 means default bloodcolor (68 00 00 or specified in MAPINFO). If changed in MAPINFO, it'll be a mismatch, but whaddaya do
		else if (target.bloodcolor.R > 4*(target.bloodcolor.B  + target.bloodcolor.G) || target.bloodcolor == 0) {
			bcolor = "red";
			}
	 //if played with another wad that contains very peculiar blood, like yellow or purple, shade sprites along with it
		else {
			A_SetRenderstyle(0.8,STYLE_Shaded);
			SetShade(target.bloodcolor);
			bcolor = "shade";
			}
		}
	Super.PostBeginPlay();
	}
states
	{
	spawn:
		TNT1 AAA 0 NoDelay; //override hardcoded frame-skipping behavior for Blood
		TNT1 A 0 A_CheckSight("Null");
		TNT1 A 0 {
			A_FaceTarget(0,270,180,0);
			A_SetScale(scale.x*randompick(-1,1)*frandom(0.7,1.2),scale.y*randompick(-1,1)*frandom(0.7,1.2));
			roll = random(0,359);
			}
		TNT1 a 0 A_Jump(256,1,2,3);
		YBL7 A 0 A_Jump(256,"BloodDrop");
		YBL8 A 0 A_Jump(256,"BloodDrop");
		YBL9 A 0 A_Jump(256,"BloodDrop");
	BloodDrop:
		#### ABCDEFGHIJKLMNOPQRS 1 {
			if (waterlevel > 0)
				return ResolveState("Fade");
			/*if (vel.z == 0)
				return ResolveState("Death");*/
			return ResolveState(null);
			}
		stop;
	Death:
		TNT1 A 0 { 
			A_Stop();
			if (bcolor ~== "blue")
				A_SprayDecal("BloodSplatBlue",32);
			else if (bcolor ~== "green")
				A_SprayDecal("BloodSplatGreen",32);
			else if (bcolor ~== "red")
				A_SprayDecal("BloodSplatRed",32);
			//no way to transfer shade to decals, so specially shaded blood particles won't produce decals
			bloodfloor = TexMan.GetName(floorpic);
			bloodceiling = TexMan.GetName(ceilingpic);
			bFLATSPRITE = true;
			A_SetScale(frandom(0.1,0.18)*randompick(1,-1),frandom(0.1,0.18)*randompick(1,-1));
			}
		TNT1 A 0 A_CheckCeiling("Ceiling");
		TNT1 A 0 {
			if (bloodfloor ~==  "F_SKY1")
				self.destroy();
			if (pos.z != floorz)
				self.destroy();
			A_QueueCorpse();
			if (GetZAt(24,0) != floorz || GetZAt(-24,0) != floorz || GetZAt(0,24) != floorz || GetZAt(0,-24) != floorz) 
				A_SetScale(scale.x*0.7,scale.y*0.7);
			if (GetZAt(18,0) != floorz || GetZAt(-18,0) != floorz || GetZAt(0,18) != floorz || GetZAt(0,-18) != floorz)
				A_SetScale(scale.x*0.6,scale.y*0.6);
			if (GetZAt(12,0) != floorz || GetZAt(-12,0) != floorz || GetZAt(0,12) != floorz || GetZAt(0,-12) != floorz)
				A_SetScale(scale.x*0.4,scale.y*0.4);
			if (GetZAt(6,0) != floorz || GetZAt(-6,0) != floorz || GetZAt(0,6) != floorz || GetZAt(0,-6) != floorz)
				self.destroy();
			bNOINTERACTION = true;
			}
		2PLT A 0 { self.frame = random(0,16); }

		#### # 1 {
			if (waterlevel > 0 || GetFloorTerrain().isLiquid == true || bloodfloor ~== "BLOOD1" || bloodfloor ~==  "BLOOD2" || bloodfloor ~==  "BLOOD3" || bloodfloor ~==  "FWATER1" || bloodfloor ~==  "FWATER2" || bloodfloor ~==  "FWATER3" || bloodfloor ~==  "FWATER4" || bloodfloor ~==  "LAVA1" || bloodfloor ~==  "LAVA2" || bloodfloor ~==  "LAVA3" || bloodfloor ~==  "LAVA4" || bloodfloor ~==  "NUKAGE1" || bloodfloor ~==  "NUKAGE2" || bloodfloor ~==  "NUKAGE3" || bloodfloor ~==  "SLIME01" || bloodfloor ~==  "SLIME02" || bloodfloor ~==  "SLIME03" || bloodfloor ~==  "SLIME04" || bloodfloor ~==  "SLIME05" || bloodfloor ~==  "SLIME06" || bloodfloor ~==  "SLIME07" || bloodfloor ~==  "SLIME08" || bloodfloor ~==  "SLIME09" || bloodfloor ~==  "SLIME10" || bloodfloor ~==  "SLIME11" || bloodfloor ~==  "SLIME12")
				return ResolveState("Fade");
			if(target && target is "BDoomMonster") {
				let bleeder = BDoomMonster(target);
				if (bleeder.raised)
					return ResolveState("Raise");
				}
			return ResolveState(null);
			}
		wait;
	Ceiling:
		TNT1 A 0 {
			if (bloodceiling ~== "F_SKY1")
				self.destroy();
			if (GetZAt(24,0,0,GZF_CEILING) > ceilingz || GetZAt(-24,0,0,GZF_CEILING) > ceilingz || GetZAt(0,24,0,GZF_CEILING) > ceilingz || GetZAt(0,-24,0,GZF_CEILING) > ceilingz) 
				A_SetScale(scale.x*0.7,scale.y*0.7);
			if (GetZAt(18,0,0,GZF_CEILING) > ceilingz || GetZAt(-18,0,0,GZF_CEILING) > ceilingz || GetZAt(0,18,0,GZF_CEILING) > ceilingz || GetZAt(0,-18,0,GZF_CEILING) > ceilingz)
				A_SetScale(scale.x*0.6,scale.y*0.6);
			if (GetZAt(12,0,0,GZF_CEILING) > ceilingz || GetZAt(-12,0,0,GZF_CEILING) > ceilingz || GetZAt(0,12,0,GZF_CEILING) > ceilingz || GetZAt(0,-12,0,GZF_CEILING) > ceilingz)
				A_SetScale(scale.x*0.4,scale.y*0.4);
			if (GetZAt(6,0,0,GZF_CEILING) > ceilingz || GetZAt(-6,0,0,GZF_CEILING) > ceilingz || GetZAt(0,6,0,GZF_CEILING) > ceilingz || GetZAt(0,-6,0,GZF_CEILING) > ceilingz)
				self.destroy();
			}
		TNT1 A 0 A_SpawnItemEx("CeilingSplat",0,0,7,0,0,0,0,SXF_TRANSFERTRANSLATION|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS);
		stop;
	Raise:
		TNT1 A 0 {
			bNOINTERACTION = false;
			bFLATSPRITE = false;
			roll = random(0,359);
			//BD_FlyBack();
			if (target) {
				A_FaceTarget();
				int tdistance = Distance3D(target);
				Thrust(tdistance * 0.04, angle);
				vel.z = tdistance * 0.05;
				}
			}
		TNT1 a 0 A_Jump(256,1,2,3);
		YBL7 A 0 A_Jump(256,"BloodDrop");
		YBL8 A 0 A_Jump(256,"BloodDrop");
		YBL9 A 0 A_Jump(256,"BloodDrop");
	Raise1:
		#### SRQPONMLKJIHGFEDCBA 1 {
			A_FadeOut(0.05);
			if (target &&  Distance2D(target) < 16)
				self.destroy();
			}
		stop;
	}
}



Class CeilingSplat : BloodGeneral
{
Default {
	-MISSILE
	+NOGRAVITY
	+FLATSPRITE
	+NOINTERACTION
	height 1;
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay A_QueueCorpse();
		TNT1 A 0 A_Jump(256,random(1,17));
		2PLT ABCDEFGHIJKLMNOPQ 0 A_Jump(256,"Drip");
	Drip:
		#### # 5 {
			SetOrigin((pos.x,pos.y,ceilingz-0.3),0);
			if(target && target is "BDoomMonster") {
				let bleeder = BDoomMonster(target);
				if (bleeder.raised)
					return ResolveState("Fade");
				}
			A_SpawnitemEx("CeilingBloodDrop",frandom(-2.0,2.0),frandom(-2.0,2.0),-1.,0,0,0,0,SXF_TRANSFERTRANSLATION|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERRENDERSTYLE|SXF_NOPOINTERS,250);
			A_FadeTo(0.1,0.001,1);
			return ResolveState(null);
			}
		loop;
	}
}

Class CeilingBloodDrop : BloodGeneral
{
Default {
	+FORCEYBILLBOARD
	+NOINTERACTION
	scale 0.1;
	alpha 0.75;
	}
states
	{
	spawn:
		TNT1 A 0 NoDelay A_CheckSight("Null");
		TNT1 A 0 A_SetScale(scale.x*randompick(-1,1)*frandom(1.0,1.3),scale.y*frandom(1.0,1.3));
		BLOD UVWWXXYYY 2;
		TNT1 A 0 { vel.z = -3.7; }
		BLOD ZZZZZZZZZZZZZZZZZZZZZZZZZ 1 {
			if (waterlevel > 0)
				self.destroy();
			if (pos.z <= floorz)
				return ResolveState("Death");
			return ResolveState(null);
			}
		stop;
	Death:
		TNT1 A 0 {
			vel.z = 0.0;
			SetOrigin((pos.x,pos.y,floorz),0);
			A_SetScale(frandom(0.22,0.25)*randompick(-1,1));
			}
		BLOD GHIJK 3;
		stop;
	}
}


Class AniBloodPool : BloodDrop
{
double psize;
Default {
	+NOINTERACTION
	+RELATIVETOFLOOR
	-MISSILE
	+FLATSPRITE
	height 1;
	renderstyle "Normal";
	decal "none";
	scale 0.2;
	}
override void PostBeginPlay() {
	if (waterlevel > 0)
		self.destroy();
	double pscale;
	pscale = frandom(0.23,0.35);
	psize = pscale*22;
	A_SetScale(pscale*frandom(0.8,1.1)*randompick(-1,1),pscale*frandom(0.8,1.1)*randompick(-1,1));
	super.PostBeginPlay();
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			if (GetZAt(psize,0) < floorz || GetZAt(-psize,0) < floorz || GetZAt(0,psize) < floorz || GetZAt(0,-psize) < floorz)
				self.destroy();
			SetOrigin((pos.x,pos.y,floorz+0.5),0);
			A_QueueCorpse();
			}
		TNT1 A 0 A_Jump(128,"Spawn1");
		0000 ABCDEFGHI 2 {
			if (GetZAt(psize,0) < floorz || GetZAt(-psize,0) < floorz || GetZAt(0,psize) < floorz || GetZAt(0,-psize) < floorz)
				return ResolveState("Rest");
			psize+=2.0;
			return ResolveState(null);
			}
		0000 JKLMNOPQRSTU 2 {
			if (GetZAt(psize,0) < floorz || GetZAt(-psize,0) < floorz || GetZAt(0,psize) < floorz || GetZAt(0,-psize) < floorz)
				return ResolveState("Rest");
			psize+=1.2;
			return ResolveState(null);
			}
		0000 VWXYZ 3 {
			if (GetZAt(psize,0) < floorz || GetZAt(-psize,0) < floorz || GetZAt(0,psize) < floorz || GetZAt(0,-psize) < floorz)
				return ResolveState("Rest");
			psize+=1.0;
			return ResolveState(null);
			}
		0001 ABCD 3 {
			if (GetZAt(psize,0) < floorz || GetZAt(-psize,0) < floorz || GetZAt(0,psize) < floorz || GetZAt(0,-psize) < floorz)
				return ResolveState("Rest");
			psize+=1.0;
			return ResolveState(null);
			}
		goto rest;
	Spawn1:
		1000 ABCDEFGHI 2 {
			if (GetZAt(psize,0) < floorz || GetZAt(-psize,0) < floorz || GetZAt(0,psize) < floorz || GetZAt(0,-psize) < floorz)
				return ResolveState("Rest");
			psize+=2.0;
			return ResolveState(null);
			}
		1000 JKLMNOPQRSTU 2 {
			if (GetZAt(psize,0) < floorz || GetZAt(-psize,0) < floorz || GetZAt(0,psize) < floorz || GetZAt(0,-psize) < floorz)
				return ResolveState("Rest");
			psize+=1.2;
			return ResolveState(null);
			}
		1000 VWXYZ 3 {
			if (GetZAt(psize,0) < floorz || GetZAt(-psize,0) < floorz || GetZAt(0,psize) < floorz || GetZAt(0,-psize) < floorz)
				return ResolveState("Rest");
			psize+=1.0;
			return ResolveState(null);
			}
		1001 ABCD 3 {
			if (GetZAt(psize,0) < floorz || GetZAt(-psize,0) < floorz || GetZAt(0,psize) < floorz || GetZAt(0,-psize) < floorz)
				return ResolveState("Rest");
			psize+=1.0;
			return ResolveState(null);
			}
		goto rest;
	Rest:
		#### # 1 {
			if (waterlevel > 0)
				self.destroy();
			if(target && target is "BDoomMonster") {
				let bleeder = BDoomMonster(target);
				if (bleeder.raised)
					return ResolveState("Fade");
				}
			return ResolveState(null);
			}
		wait;
	}
}

//decorative blood for gory decorations
Class BloodSpill : CeilingBloodDrop
{
Default {
	height 1;
	scale 0.2;
	gravity 0.1;
	alpha 0.75;
	}
states	
	{
	spawn:
		TNT1 A 0 NoDelay {
			A_CheckSight("Null");
			if (waterlevel > 0)
				self.destroy();
			}
		TNT1 A 0 A_SetScale(scale.x*randompick(-1,1)*frandom(1.0,1.3),scale.y*frandom(1.0,1.3));
		BLOD XYZ 3;
		TNT1 A 0 {
			bNOGRAVITY = false;
			A_SetGravity(0.7);
			}
		BLOD ZZZZ 5 {
			if (waterlevel > 0)
				self.destroy();
			}
		stop;
	}
}

//for projectile bullets
Class BD_BloodSplatter : BloodDrop replaces BloodSplatter {}

//thinner and faster version for spurts
Class BloodSpray : BloodDrop
{
Default {
	scale 0.12;
	gravity 0.5;
	alpha 0.7;
	}
states
	{
	spawn:
		TNT1 A 0 NoDelay A_CheckSight("Null");
		TNT1 A 0 {
			A_SetGravity(frandom(0.4,0.6));
			A_SetScale(scale.x*randompick(-1,1),scale.y*randompick(-1,1));
			roll = random(0,359);
			}		
		TNT1 a 0 A_Jump(256,1,2,3);
		YBL7 A 0 A_Jump(256,"BloodDrop");
		YBL8 A 0 A_Jump(256,"BloodDrop");
		YBL9 A 0 A_Jump(256,"BloodDrop");
	BloodDrop:
		#### ABCDEFGHIJKLMNOPQRS 1 {
			if (waterlevel > 0)
				return ResolveState("Fade");
			A_FadeOut(0.001);
			return ResolveState(null);
			}
		stop;
	Death:
		TNT1 A 1 { 
			if (bcolor ~== "blue")
				A_SprayDecal("BloodSprayBlue",32);
			if (bcolor ~== "green")
				A_SprayDecal("BloodSprayGreen",32);
			if (bcolor ~== "red")
				A_SprayDecal("BloodSprayRed",32);
			}
		stop;
	}
}

// spurts spawner — temporary, for backwards compatibility with existing decorate stuff
Class BloodSpurt : Bloodsprayer {}

Class BloodSprayer : BloodDrop
{
double bpitch;
double bspeed;
Default {
	+NOGRAVITY
	+NOINTERACTION
	seesound "gibs/bloodtrickle";
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			if (waterlevel > 0)
				self.destroy();
			A_CheckSight("Null");
			A_FaceTarget(0,270,0,0);
			bpitch = frandom(1.0,5.0);
			bspeed = frandom(4.0,6.0);
			}
		TNT1 A 0 A_Jump(256,random(1,6));
		TNT1 AAAAAAAAAAAA 1 { 
			A_SpawnItemEx("BloodSpray",0,0,0,bspeed+frandom(0.0,1.2),0,bpitch,frandom(170.0,180.0), SXF_TRANSFERTRANSLATION|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSTENCILCOL);
			bpitch+=0.5;
			}
		TNT1 A 0 A_StopSound(4);
		stop;
	}
}

Class BloodSprayer_Saw : BloodSprayer replaces AxeBlood
{
Default {
	seesound "none";
	}
}

//large quickly disappearing spray creating a "bloody mist" upon xdeath
Class BFountainSpray : BloodDrop
{
Default {
	-MISSILE
	+NOINTERACTION
	scale 0.45;
	renderstyle "Translucent";
	alpha 0.6;
	}
states
	{
	spawn:
		TNT1 A 0 NoDelay {
			A_FaceTarget(0,270,180,0);
			A_SetScale(scale.x*randompick(-1,1)*frandom(0.7,1.2),scale.y*randompick(-1,1)*frandom(0.7,1.2));
			roll = random(0,359);
			}
		TNT1 a 0 A_Jump(256,1,2,3);
		YBL7 A 0 A_Jump(256,"BloodDrop");
		YBL8 A 0 A_Jump(256,"BloodDrop");
		YBL9 A 0 A_Jump(256,"BloodDrop");
	BloodDrop:
		#### ABCDEFGHIJKKLLMMNNOOOPPPQQQRRRSSS 1 {
			if (waterlevel > 0)
				self.destroy();
			vel.z = clamp(vel.z - 0.3,-2.0,10.0);
			a_Setscale(clamp(scale.x * 1.05,0.0,1.0),clamp(scale.y * 1.05,0.0,1.0));
			a_fadeout(0.02);
			}
		stop;
	}
}