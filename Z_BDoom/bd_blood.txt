Class BloodGeneral : Actor
{
Default {
	+FIXMAPTHINGPOS
	+NOBLOCKMAP 
	+MOVEWITHSECTOR
	+MISSILE
	-NOGRAVITY
	+DROPOFF
	+NOTELEPORT
	+FORCEXYBILLBOARD
	+THRUACTORS
	-ALLOWPARTICLES
	+ROLLSPRITE
	+DONTSPLASH
	gravity 0.7;
	renderstyle "Translucent";
	seesound "null";
	Deathsound "null";
	decal "null";
	height 1;
	}
}

Class BloodGun : Pistol
{
Default {
	+WEAPON.AMMO_OPTIONAL
	+WEAPON.ALT_AMMO_OPTIONAL
	+WEAPON.NOALERT
	}
states
	{  
	Fire:
		PISG A 4;
		PISG B 6 A_SpawnItemEx("BloodDrop",0,0,32,8,0,0,0,SXF_SETTARGET);
		PISG C 4;
		PISG B 5 A_ReFire;
		Goto Ready;
	}
}


Class BloodDrop : BloodGeneral replaces Blood
{
string bcolor;
Default {
	+PUFFGETSOWNER
	scale 0.35;
	gravity 0.5;
	renderstyle "Translucent";
	alpha 0.8;
	height 2;
	}
// some rough math incoming but I think it does the job
override void PostBeginPlay() {
 //obvious green prevalence
	if (target.bloodcolor.G > 4*(target.bloodcolor.R  + target.bloodcolor.B)) {
		bcolor = "green";
		A_SetTranslation("GreenBlood");
		}
 //obvious blue prevalence
	else if (target.bloodcolor.B > 4*(target.bloodcolor.R  + target.bloodcolor.G)) {
		bcolor = "blue";
		A_SetTranslation("BlueBlood");
		}
 //obvious red prevalence. bloodcolor = 0 means default bloodcolor (68 00 00 or specified in MAPINFO). If changed in MAPINFO, it'll be a mismatch, but whaddaya do
	else if (target.bloodcolor.R > 4*(target.bloodcolor.B  + target.bloodcolor.G) || target.bloodcolor == 0) {
		bcolor = "red";
		}
 //if played with another wad that contains very peculiar blood, shade sprites along with it
	else {
		A_SetRenderstyle(0.8,STYLE_Shaded);
		SetShade(target.bloodcolor);
		bcolor = "shade";
		}
	Super.PostBeginPlay();
	}
states
	{
	spawn:
		TNT1 AAA 0 NoDelay;
		TNT1 A 0 A_CheckSight("Null");
		TNT1 A 0 {
			A_FaceTarget(0,270,180,0);
			A_SetScale(scale.x*randompick(-1,1)*frandom(0.7,1.2),scale.y*randompick(-1,1)*frandom(0.7,1.2));
			A_SetRoll(random(0,359));
			}
		TNT1 a 0 A_Jump(256,"blood1","blood2","blood3");
	blood1:
		YBL7 ABCDEFGHIJKLMNOPQRS 1 {
			//A_FadeOut(0.005);
			if (bdoom_blood == 0 || waterlevel > 0)
				self.destroy();
			}
		stop;
	blood2:
		YBL8 ABCDEFGHIJKLMNOPQR 1 {
			//A_FadeOut(0.005);
			if (bdoom_blood == 0 || waterlevel > 0)
				self.destroy();
			}
		stop;
	blood3:
		YBL9 ABCDEFGHIJKLM 1 {
			//A_FadeOut(0.005);
			if (bdoom_blood == 0 || waterlevel > 0)
				self.destroy();
			}
		stop;
	Death:
		TNT1 A 0 { 
			if (bdoom_blood == 0)
				self.destroy();
			A_Stop();
			A_QueueCorpse();
			bFlatsprite = true;
			A_SetScale(frandom(0.1,0.18),frandom(0.1,0.18));
			if (bcolor == "blue")
				A_SprayDecal("BloodSplatGreen",32);
			if (bcolor == "green")
				A_SprayDecal("BloodSplatBlue",32);
			if (bcolor == "red")
				A_SprayDecal("BloodSplatRed",32);
			//no way to transfer shade to decals, so specially shaded blood particles won't produce decals
			}
		TNT1 A 0 A_CheckCeiling("Ceiling");
		TNT1 A 0 {
			ACS_NamedExecuteAlways("BD_BloodRemoval",0);
			bFloorClip = true;
			if (GetZAt(24,0) != floorz || GetZAt(-24,0) != floorz || GetZAt(0,24) != floorz || GetZAt(0,-24) != floorz) 
				A_SetScale(scale.x*0.7,scale.y*0.7);
			if (GetZAt(18,0) != floorz || GetZAt(-18,0) != floorz || GetZAt(0,18) != floorz || GetZAt(0,-18) != floorz)
				A_SetScale(scale.x*0.6,scale.y*0.6);
			if (GetZAt(12,0) != floorz || GetZAt(-12,0) != floorz || GetZAt(0,12) != floorz || GetZAt(0,-12) != floorz)
				A_SetScale(scale.x*0.4,scale.y*0.4);
			if (GetZAt(6,0) != floorz || GetZAt(-6,0) != floorz || GetZAt(0,6) != floorz || GetZAt(0,-6) != floorz)
				self.destroy();
			}
		TNT1 A 0 A_Jump(256,random(1,17));
		2PLT ABCDEFGHIJKLMNOPQ 1 A_Jump(256,"Crash");
	Crash:
		#### # 50 {
			if (bdoom_blood == 0 || waterlevel > 0)
				self.destroy();
			if (CountInv("WasGibbed") > 0)
				return ResolveState("Raise");
			return ResolveState(null);
			}
		loop;
	Raise:
		#### # 1 A_FadeOut(0.05);
		wait;
	Ceiling:
		TNT1 A 0 {
			bNOGRAVITY = true;
			bMOVEWITHSECTOR = false;
			ACS_NamedExecuteAlways("BloodSkyRemoval",0);
			if (GetZAt(24,0) > ceilingz || GetZAt(-24,0) > ceilingz || GetZAt(0,24) > ceilingz || GetZAt(0,-24) > ceilingz) 
				A_SetScale(scale.x*0.7,scale.y*0.7);
			if (GetZAt(18,0) > ceilingz || GetZAt(-18,0) > ceilingz || GetZAt(0,18) > ceilingz || GetZAt(0,-18) > ceilingz)
				A_SetScale(scale.x*0.6,scale.y*0.6);
			if (GetZAt(12,0) > ceilingz || GetZAt(-12,0) > ceilingz || GetZAt(0,12) > ceilingz || GetZAt(0,-12) > ceilingz)
				A_SetScale(scale.x*0.4,scale.y*0.4);
			if (GetZAt(6,0) > ceilingz || GetZAt(-6,0) > ceilingz || GetZAt(0,6) > ceilingz || GetZAt(0,-6) > ceilingz)
				self.destroy();
			}
		TNT1 A 0 A_Jump(256,random(1,17));
		2PLT ABCDEFGHIJKLMNOPQ 1 A_Jump(256,"Ceiling1");
	Ceiling1:
		#### # 3 {
			if (bdoom_blood == 0)
				self.destroy();
			if (GetZAt(24,0) > ceilingz || GetZAt(-24,0) > ceilingz || GetZAt(0,24) > ceilingz || GetZAt(0,-24) > ceilingz) 
				A_SetScale(scale.x*0.7,scale.y*0.7);
			if (GetZAt(18,0) > ceilingz || GetZAt(-18,0) > ceilingz || GetZAt(0,18) > ceilingz || GetZAt(0,-18) > ceilingz)
				A_SetScale(scale.x*0.6,scale.y*0.6);
			if (GetZAt(12,0) > ceilingz || GetZAt(-12,0) > ceilingz || GetZAt(0,12) > ceilingz || GetZAt(0,-12) > ceilingz)
				A_SetScale(scale.x*0.4,scale.y*0.4);
			if (GetZAt(6,0) > ceilingz || GetZAt(-6,0) > ceilingz || GetZAt(0,6) > ceilingz || GetZAt(0,-6) > ceilingz)
				self.destroy();
			A_SpawnitemEx("CeilingBloodDrop",frandom(-2.0,2.0),frandom(-2.0,2.0),-1,0,0,0,0,SXF_TRANSFERTRANSLATION|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSTENCILCOL,250);
			A_FadeTo(0.1,0.001,1);
			}
		loop;
	}
}

Class BD_BloodSplatter : BloodDrop replaces BloodSplatter {}

Class BloodFountain : Actor
{
Default {
	+NOBLOCKMAP
	+MOVEWITHSECTOR
	-NOGRAVITY
	renderstyle "Add";
	alpha 0.85;
	scale 0.5;
	}
states
	{
	Spawn:
		SPUR ABCDEFGHIJKL 1 ;
		SPUR MNOPQRSTUVWXYZ 2 ;
		stop;
	}
}