////////////////////////////////////////////////////////////
////////////// ALL BASIC BEAUTIFUL DOOM OBJECTS ////////////
////////////////////////////////////////////////////////////

//base class for most debris
Class DebrisGeneral : Actor abstract
{
bool landed;
name sfxtype; //'debris', 'flames', 'blood', 'gibs' — based on the value the thing gets put into a special array that controls their number, see bd_events.zc
property sfxtype : sfxtype;
Default {
	DebrisGeneral.sfxtype "debris";
	+ROLLSPRITE
	+BLOODLESSIMPACT	//for debris that can bump into actors
	+NOTAUTOAIMED
	+MISSILE			//enters Death when it hits the floor
	+NOBLOCKMAP
	+NOGRAVITY
	+DROPOFF
	+NOTELEPORT
	+FORCEXYBILLBOARD
	+THRUACTORS
	+FLOORCLIP
	+INTERPOLATEANGLES
	-ALLOWPARTICLES
	renderstyle "Translucent";
	alpha 1.0;
	radius 1;
	height 1;
	mass 1;
	damage 0;
	}
// thanks Gutawer for explaning the math and helping this function come to life
virtual void FlyBack() {
	if (!target)
		return;
	landed = false;
	bFLATSPRITE = false;
	bNOGRAVITY = false;
	bNOINTERACTION = false;
	bRELATIVETOFLOOR = false;
	bMOVEWITHSECTOR = false;
	bTHRUACTORS = true;
	gravity = 1.0;
	A_FaceTarget();
	
	double dist = Distance2D(target);							//horizontal distance to target
	double vdisp = target.pos.z - pos.z + frandom(8,32);		//height difference between gib and target + randomized height
	double ftime = 20;											//time of flight
	
	double vvel = (vdisp + 0.5 * ftime*ftime) / ftime;
	double hvel = dist / ftime;
	
	Thrust(hvel,angle);
	vel.z = vvel;
	}
	
override void PostBeginPlay()
	{
	if (!level.IsPointInLevel(pos)) {
		destroy();
		return;
		}
	super.PostBeginPlay();
	}
override void Tick()
	{
	if (!self)
		return;
	super.Tick();
	/*if (!level.isFrozen() &&
		((sfxtype == 'debris' &&!bdoom_debris)	||
		 (sfxtype == 'flames' &&!bdoom_flames)	||
		 (sfxtype == 'blood' && !bdoom_blood)	||
		 (sfxtype == 'gibs' && 	!bdoom_gibs)	)) {
		A_DeQueueCorpse();
		destroy();
		return;
		}*/
	}
bool CheckWater() {
	string flr = TexMan.GetName(floorpic);
	return (GetFloorTerrain().isLiquid == true || flr == "BLOOD1" || flr ==  "BLOOD2" || flr ==  "BLOOD3" || flr.IndexOf("WATER") >= 0 || flr.IndexOf("LAVA") >= 0 || flr.IndexOf("NUKAGE") >= 0 || flr ==  "SLIME01" || flr ==  "SLIME02" || flr ==  "SLIME03" || flr ==  "SLIME04" || flr ==  "SLIME05" || flr ==  "SLIME06" || flr ==  "SLIME07" || flr ==  "SLIME08" || flr ==  "SLIME09" || flr ==  "SLIME10" || flr ==  "SLIME11" || flr ==  "SLIME12");
	}
}

//base class for less expensive version for small debris
Class SmallDebris : DebrisGeneral abstract
{
int wrot;
double dgravity; //fake gravity
double dbreak; //how quickly to reduce horizontal speed of "landed" particles
bool removeonfall; //whether to remove immediately as it reaches the floor
property dgravity : dgravity;
property removeonfall : removeonfall;
property dbreak : dbreak;
Default {
	+CLIENTSIDEONLY
	SmallDebris.removeonfall true;
	SmallDebris.dbreak 0;
	-MISSILE
	-RELATIVETOFLOOR
	+NOINTERACTION
	-FLOORCLIP //this flag can screw up pos.z detection
	smalldebris.dgravity 0.8;
	}
override void Tick() {
	if (!level.IsPointInLevel(pos)) {
		destroy();
		return;
		}
	super.tick();
	if (level.isFrozen())
		return;
	if (pos.z > floorz)
		vel.z-=dgravity;
	else if (removeonfall) {
		destroy();
		return;
		}
	else {
		vel.z = 0;
		vel.x *= dbreak;
		vel.y *= dbreak;
		if (vel.length() < 0.1)
			landed = true;
		if (pos.z < floorz)
			SetOrigin((pos.x,pos.y,floorz),0);
		bMOVEWITHSECTOR = true;
		bRELATIVETOFLOOR = true;
		}		
	}
}

//base class for flares and flame effects
Class Flare_General : DebrisGeneral abstract
{
name fcolor;		//flare of the color; can be set as a property or externally
double fscale;		//scale; used to when scale needs to be easily set externally from the spawner
double falpha;		//alpha; used to when scale needs to be easily set externally from the spawner
property fcolor : fcolor;
Default {
	DebrisGeneral.sfxtype "flames";
	-MISSILE
	+RELATIVETOFLOOR
	+MOVEWITHSECTOR
	+NOINTERACTION
	+BRIGHT
	renderstyle "Add";
	alpha 0.4;
	scale 0.4;
	}
virtual void SetColor() { //fcolor is meant to be set by the actor that spawns the flare
	if (fcolor == 'red')
		sprite = GetSpriteIndex("LENR");
	else if (fcolor == 'green')
		sprite = GetSpriteIndex("LENG");
	else if (fcolor == 'blue')
		sprite = GetSpriteIndex("LENB");
	else if (fcolor == 'yellow')
		sprite = GetSpriteIndex("LENY");
	else if (fcolor == 'tech')
		sprite = GetSpriteIndex("LENS"); //tech lamps use a completely different flare
	else if (fcolor == 'cbra')
		sprite = GetSpriteIndex("LENC"); //so do candelabras
	else {
		destroy();
		return;
		}
	}
states
	{
	Loadsprites:
		LENR A 0;
		LENB A 0;
		LENG A 0;
		LENY A 0;
		LENC A 0;
		LENS A 0;
		SPRK ABC 0;
		stop;
	}
}

Class BD_BaseFlare : Flare_General
{
states
	{
	Spawn:
		TNT1 A 0 NoDelay SetColor();
		#### # 1;
		wait;
	}
}

// base glow to be spawned alongside projectiles
Class BD_ProjFlare : Flare_General
{
Default {
	DebrisGeneral.sfxtype "debris";
	Flare_General.fcolor "Red";
	alpha 0.8;
	scale 0.11;
	-RELATIVETOFLOOR
	-MOVEWITHSECTOR
	}
virtual void SetPos() {
	if (master) {
		SetOrigin(master.pos,0);
		vel = master.vel;
		}
	}
override void Tick() {
	super.Tick();
	if (!master || !bdoom_debris || 
		(master && (master.InstateSequence(master.curstate,master.FindState("Death")) || 
		 master.InstateSequence(master.curstate,master.FindState("XDeath")))	)	) {
		Destroy();
		return;
		}
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay { //this part makes sure the flare is aligned with the master, otherwise it tends to appear at the wrong place when spawned
			SetPos();
			SetColor();
			}
		#### # 1 bright;
		wait;
	}
}



Class ParticleFire_General : Flare_General abstract
{
Default {
	renderstyle "Add";
	scale 0.5;
	alpha 0.5;
	DebrisGeneral.sfxtype "flames";
	}
Override void PostBeginPlay() {
	super.PostBeginPlay();
	scale.x*=randompick(-1,1);
	}
}

// Small fire particle that spawns over torches and fades away
Class BD_FireParticle : Flare_General
{
Default {
	alpha 0.5;
	scale 0.04;
	}
override void SetColor() {
	if (fcolor == 'green')
		frame = 1;
	else if (fcolor == 'blue')
		frame = 2;
	else if (fcolor == 'yellow')
		frame = 3;
	}
states
	{
	Loadsprites:
		SPRK ABCD 0;
	Spawn:
		SPRK A 0 NoDelay SetColor();
		SPRK # 1 bright {
			A_FadeOut(0.01);
			scale*=0.95;
			}
		wait;
	}
}

Class ParticleFire_Red : ParticleFire_General
{
states
	{
	Spawn:
		FIPR ABCDEFGHIJKLMNOPQRST 1 bright Nodelay A_FadeOut(0.03);
		stop;
	}
}

Class ParticleFire_Yellow : ParticleFire_General
{
Default {
	alpha 0.6;
	scale 0.35;
	}
states
	{
	Spawn:
		FIPY ABCDEFGHIJKL 2 bright Nodelay A_FadeOut(0.06);
		stop;
	}
}

Class ParticleFire_Green : ParticleFire_Red
{
Default {
translation "0:3=112:127","5:8=112:127","9:12=112:127","13:15=112:127","16:47=112:127","48:79=112:127","96:111=112:127","112:127=112:127","128:151=112:127","152:159=112:127","160:167=112:127","169:191=112:127","193:207=112:127","208:223=112:127","224:231=112:127","232:235=112:127","236:239=112:127","240:247=112:127","248:249=112:127","250:254=112:127","255:255=112:127";
	}
}

Class FirePiece : Flare_General abstract
{
Default {
	scale 0.2;
	alpha 0.5;
	}
states
	{
	Spawn:		
		FIRP ABCDEFGHIJ 2 bright NoDelay A_FadeOut(0.05);
		stop;
	}
}



///////////////;
//// SMOKE ////;
///////////////

Class Smoke_General : SmallDebris abstract
{
Default {
	DebrisGeneral.sfxtype "debris";
	smalldebris.dgravity 0;
	renderstyle "Add";
	alpha 0.3;
	scale 0.1;
	}
override void PostBeginPlay() {
	if (waterlevel > 1) {
		self.destroy();
		return;
		}
	super.PostbeginPlay();
	roll = random(0,359);
	}
states
	{
	Spawn:
		SMOK ABCDEFGHIJKLMNOPQ 1 NoDelay {
			if (!master)
				A_SpawnItemEx("BasicSmokeTrail",frandom(-2,2),frandom(-2,2),frandom(-2,2),0,0,0,0,SXF_SETMASTER);
			A_Fadeout(0.01);
			}
		stop;
	}
}

Class BasicSmokeTrail : Smoke_General abstract
{
Default {
	alpha 0.15;
	}
states
	{
	Spawn:
		SMOK DEFGHIJKLMNOPQ 1 NoDelay A_Fadeout(0.01);
		stop;
	}
}

//old smoke used by puffs
class ShotSmoke : Smoke_General
{ 
Default {
	alpha 0.4;
	scale 0.18;
	}
states
	{
	Spawn:
		SMK1 ABCDEFGHIJKLMNOPQR 1 NoDelay {
			A_SpawnItemEx("ShotSmokeTrail",frandom(-1.5,1.5),frandom(-1.5,1.5),frandom(-1.5,1.5),0,0,0,0,SXF_SETMASTER);
			A_Fadeout(0.01);
			}
		stop;
	}
}

Class ShotSmokeTrail : BasicSmokeTrail
{
Default {
	alpha 0.15;
	}
states
	{
	Spawn:
		SMK1 DEFGHIJKLMNOPQR 1 NoDelay A_Fadeout(0.01);
		stop;
	}
}

//spawned over weapon barrels after shooting
class BarrelSmoke : Smoke_General
{
Default {
	alpha 0.05;
	scale 0.02;
	}
/*override void Tick() {
	if (target) {
		vel.x = target.vel.x;
		vel.y = target.vel.y;
		}
	super.Tick();
	}*/
states
	{
	Spawn:
		SMK1 ABCDEF 2 NoDelay A_FadeIn(0.025);
		SMK1 GHIJKLMNOPQR 2 {
			vel.z = clamp(vel.z*0.6,0.04,0.1);
			A_FadeOut(0.005);
			roll+-8;
			}
		stop;
	}
}

//bigger smoke to spawn over heated weapon body
class WeaponSmoke : Smoke_General
{
Default {
	alpha 0.25;
	scale 0.15;
	}
states
	{
	Spawn:		
		SMK1 ABCDEFGHIJKLMNOPQR 1 NoDelay {
			A_SpawnItemEx("WeaponSmokeTrail",random(-2,2),random(-2,2),random(-2,2),0,0,0,0);
			A_FadeOut(0.01);
			}
		stop;
	}
}

Class WeaponSmokeTrail : BasicSmokeTrail
{
Default {
	alpha 0.1;
	scale 0.12;
	}
states
	{
	Spawn:
		SMK1 DEFGHIJKLMNOPQR 1 NoDelay A_Fadeout(0.01);
		stop;
	}
}

//big dark smoke used for some explosions
class BlackSmoke : Smoke_General
{
Default {
	renderstyle "Translucent";
	alpha 0.15;
	}
states
	{
	Spawn:
		SMOK ABCDEFGHIJKLMNOPQ 2 NoDelay {
			A_SpawnItemEx("BlackSmokeTrail",frandom(-2,2),frandom(-2,2),frandom(-2,2));
			A_FadeOut(0.01);
			}
		wait;
	}
}

Class BlackSmokeTrail : BasicSmokeTrail
{
Default {
	renderstyle "Translucent";
	alpha 0.08;
	}
}

//dark small piece of smoke with a hint of flame — for "dirty" fires like burning barrel
Class BurnSmokePiece : Smoke_General
{
Default {
	renderstyle "Translucent";
	alpha 0.3;
	scale 0.05;
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	scale*=randompick(0.6,1);
	}
states
	{
	Spawn:
		BSMO ABCDEFGHIJKLMNOPQRSTU 1 NoDelay A_FadeOut(0.005);
		stop;
	}
}

//even bigger smoke for bigger explosions
class BigBlackSmoke : BlackSmoke
{
Default {
	alpha 0.2;
	scale 0.2;
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			A_SetScale(scale.x*frandom(0.8,1.2)*randompick(-1,1), scale.y*frandom(0.8,1.2)*randompick(-1,1));
			}
		SMOK ABCDEFGHIJKLMNOPQ 2 {
			if (self.GetClassName() == "BigBlackSmoke")
				A_SpawnItemEx("BigBlackSmokeTrail",frandom(-2,2),frandom(-2,2),frandom(-2,2),0,0,0,0,SXF_SETMASTER);
			A_FadeOut(0.02);
			a_Setscale(clamp(scale.x*1.03,default.scale.x,default.scale.x*2.2),clamp(scale.y*1.03,default.scale.y,default.scale.y*2.2));
			}
		wait;
	}
}

Class BigBlackSmokeTrail : BigBlackSmoke {}

//basic smoke behind a rocket
Class Rocket1Trail : Smoke_General
{
Default {
	scale 0.1;
	renderstyle "Translucent";
	alpha 0.3;
	}
states
	{
	Spawn:
		SMOK ABCDEFGHIJKLMNOPQ 1 NoDelay A_FadeOut(0.01);
		stop;
	}
}

Class SmokeBallTrail : Rocket1Trail
{
Default {
	alpha 0.15;
	}
}

//a particle that spawns thin smoke behind itself
Class SmokingPiece : SmallDebris
{
Default {
	smalldebris.dgravity 0.7;
	alpha 1.0;
	}
states
		{
		Spawn:
			TNT1 A 1 NoDelay {
				A_SpawnItem("SmokingPieceSmoke");
				A_FadeOut(0.025);
				}
			loop;
		}
}

Class SmokingPieceSmoke : BasicSmokeTrail
{
Default {
	scale 0.04;
	alpha 0.3;
	}
}

///////////////
//// PUFFS ////
///////////////

//smoke coming out of wood walls
Class WallSmoke : Smoke_General
{
Default {
	+ROLLCENTER
	scale 0.015;
	renderstyle "Add";
	alpha 0.4;
	}
override void PostBeginPlay()
	{
	super.PostBeginPlay();
	A_SetScale(frandom(0.028,0.032),frandom(0.028,0.032));
	wrot = (random(3,10)*randompick(-1,1));
	}
states
	{
	Spawn:
		SM21 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 NoDelay {
			A_Fadeout(0.006);
			a_Setscale(clamp(scale.x*1.02,0.01,0.1),clamp(scale.y*1.02,0.01,0.1));
			vel*=0.95;
			roll+=wrot;
			}
		SM22 ABCDEFGHIJK 1 {
			A_Fadeout(0.006);
			a_Setscale(clamp(scale.x*1.02,0.01,0.1),clamp(scale.y*1.02,0.01,0.1));
			vel*=0.95;
			roll+=wrot;
			}
		wait;
	}
}

//circular puff of smoke for hard walls (stone, brick)
Class RingSmoke : WallSmoke
{
Default {
	alpha 0.2;
	}
states
	{
	Spawn:
		SM21 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 NoDelay {
			A_Fadeout(0.005);
			a_Setscale(clamp(scale.x*1.03,0.01,0.1),clamp(scale.y*1.03,0.01,0.1));
			vel*=0.9;
			roll+=wrot;
			}
		SM22 ABCDEFGHIJK 1 {
			A_Fadeout(0.005);
			a_Setscale(clamp(scale.x*1.03,0.01,0.1),clamp(scale.y*1.03,0.01,0.1));
			vel*=0.9;
			roll+=wrot;
			}
		wait;
	}
}

Class BdoomPuff : Actor abstract
{
Default {
	+NOBLOCKMAP
	+NOGRAVITY
	+FORCEXYBILLBOARD
	-ALLOWPARTICLES
	+DONTSPLASH
	-FLOORCLIP
	}
}

//used by stuff like decorative rails spawned by BFGball
Class NullPuff : Actor
{
Default {
	decal "none";
	+NODECAL
	+NOINTERACTION
	+BLOODLESSIMPACT
	+PAINLESS
	+PUFFONACTORS
	}
states
	{
	Spawn:
		TNT1 A 1;
		stop;
	}
}

Class EnBulletPuff : BDoomPuff
{
//int hitangle;
string hittex; //texture that was hit
name dtype; //debris type
int rchance; //ricochet chance
bool debris; //whether to spawn debris
int  smoke; //0 - none, 1 - directional, 2 - radial along the wall
int sparkchance; //spark chance
string decaltype;
Default {
	+NOINTERACTION
	+PUFFGETSOWNER
	decal "none";
	renderstyle "Add";
	scale 0.075;
	alpha 0.8;
	mass 1;
	height 1;
	radius 1;
	vspeed 0;
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			if (target)
				angle = target.angle;
			int tracepitch;
			int traceheight;
			if (pos.z <= floorz+8) {
				tracepitch = 90;
				traceheight = floorz+8;
				}
			else if (pos.z >= ceilingz-8) {
				tracepitch = -90;
				traceheight = ceilingz-8;
				}
			else {
				tracepitch = 0;
				traceheight = pos.z;
				}
			FLineTraceData puffdata;
			LineTrace(angle,10,tracepitch,TRF_THRUACTORS|TRF_NOSKY|TRF_ABSPOSITION,traceheight,pos.x,pos.y,puffdata);	
			if (puffdata.HitType == TRACE_HitFloor)
				hittex = texman.GetName(floorpic);
			else if (puffdata.HitType == TRACE_HitCeiling)
				hittex = texman.GetName(ceilingpic);
			else if (puffdata.HitType == TRACE_HitWall) {
				hittex = texman.GetName(puffdata.HitTexture);
				}
			
			if (hittex.IndexOf("WATER") >= 0 || hittex.IndexOf("FALL") >= 0 || hittex.IndexOf("BLOOD") >= 0) {
				A_PlaySound("world/watersplashsmall",0,1.0,0,3);
				self.destroy();
				return ResolveState(null);
				}				
			else if (hittex.IndexOf("LAVA") >= 0 || hittex.IndexOf("FIRE") >= 0 || hittex.IndexOf("NUKAGE") >= 0) {
				A_PlaySound("world/lavasizzlesmall",0,1.0,0,3);
				self.destroy();
				return ResolveState(null);
				}
			else if (	hittex.IndexOf("WOOD") >= 0		|| hittex.IndexOf("PAN") >= 0		|| hittex.IndexOf("CRAT") >= 0	
				|| 		hittex.IndexOf("STUCCO") >= 0 	|| hittex.IndexOf("FLAT5_1") >= 0 	|| hittex.IndexOf("FLAT5_2") >= 0 
				|| 		hittex.IndexOf("CEIL1_1") >= 0 	|| hittex.IndexOf("FLOOR0_1") >= 0 	|| hittex.IndexOf("FLOOR0_2") >= 0 
				|| 		hittex.IndexOf("FLOOR0_3") >= 0 || hittex.IndexOf("FLOOR7_1") >= 0	|| hittex.IndexOf("FLAT5_5") >= 0
				||		hittex.IndexOf("TANROCK2") >= 0	|| hittex.IndexOf("TANROCK3") >= 0	|| hittex.IndexOf("TANROCK8") >= 0
				||		hittex.IndexOf("ZZWOLF5") >= 0	|| hittex.IndexOf("ZZWOLF6") >= 0	|| hittex.IndexOf("ZZWOLF7") >= 0
						) {
				decaltype = "BulletWchip";
				dtype = 'wood';
				debris = true;
				smoke = 1;
				A_Playsound("bullet/wood",0,1.0,0,3);				
				}
			else if (	hittex.IndexOf("MARB") >= 0 	|| hittex.IndexOf("GST") >= 0 		|| hittex.IndexOf("DEM") >= 0
				||		hittex.IndexOf("FLOOR7_2") >= 0
						) {
				decaltype = "BulletSchip";
				dtype = 'marble';
				rchance = 20;
				debris = true;
				smoke = 2;
				A_Playsound("bullet/stone",0,1.0,0,3);				
				}
			else if (	hittex.IndexOf("BRICK") >= 0 	|| hittex.IndexOf("BIGBRIK1") >= 0 	|| hittex.IndexOf("BIGBRIK3") >= 0) {
				decaltype = "BulletSchip";
				dtype = 'brick';
				rchance = 15;
				debris = true;
				smoke = 2;
				A_Playsound("bullet/stone",0,1.0,0,3);				
				}
			else if (	hittex.IndexOf("METAL") >= 0 	|| hittex.IndexOf("DOOR") >= 0 
				||		hittex.IndexOf("SHAWN") >= 0 	|| hittex.IndexOf("SILVER") >= 0	|| hittex.IndexOf("BRONZ") >= 0
				||		hittex.IndexOf("PIPE") >= 0 	|| hittex.IndexOf("SUPPORT") >= 0 	|| hittex.IndexOf("TEK") >= 0
				||		hittex.IndexOf("ZZZFACE6") >= 0 || hittex.IndexOf("ZZZFACE7") >= 0 	|| hittex.IndexOf("ZZZFACE8") >= 0 
				||		hittex.IndexOf("ZZZFACE9") >= 0 || hittex.IndexOf("FLOOR0_6") >= 0 	|| hittex.IndexOf("FLOOR0_7") >= 0
				||		hittex.IndexOf("FLOOR3_3") >= 0 || hittex.IndexOf("FLOOR4_1") >= 0 	|| hittex.IndexOf("FLOOR4_5") >= 0
				||		hittex.IndexOf("FLOOR4_8") >= 0	|| hittex.IndexOf("FLOOR5_1") >= 0	|| hittex.IndexOf("STEP") >= 0	
				|| 		hittex.IndexOf("CEIL5_2") >= 0	|| hittex.IndexOf("FLAT22") >= 0	|| hittex.IndexOf("FLAT23") >= 0
				||		hittex.IndexOf("CONS") >= 0		|| hittex.IndexOf("CEIL1_1") >= 0	|| hittex.IndexOf("CEIL1_2") >= 0
				||		hittex.IndexOf("CEIL1_1") >= 0	|| hittex.IndexOf("SLIME14") >= 0	|| hittex.IndexOf("SLIME15") >= 0
				||		hittex.IndexOf("SLIME16") >= 0	|| hittex.IndexOf("LITE") >= 0		|| hittex.IndexOf("COMP") >= 0
				||		hittex.IndexOf("COMM") >= 0		|| hittex.IndexOf("SW2MET") >= 0
						) {
				decaltype = "BulletMchip";
				rchance = 40;
				sparkchance = 50;
				debris = false;
				smoke = 0;
				A_Playsound("bullet/metal",0,1.0,0,3);				
				}
			else if (	hittex.IndexOf("SK_") >= 0		|| hittex.IndexOf("SKIN2") >= 0		|| hittex.IndexOf("SKINCUT") >= 0
				||		hittex.IndexOf("SKINEDGE") >= 0	|| hittex.IndexOf("SKINFACE") >= 0	|| hittex.IndexOf("SFLR") >= 0
				||		hittex.IndexOf("SPINE") >= 0	|| hittex.IndexOf("SNAKE") >= 0		|| hittex.IndexOf("SLOPPY") >= 0
				||		hittex.IndexOf("SP_FACE") >= 0
						) {
				decaltype = "Bulletchip";
				dtype = 'bloody';
				debris = true;
				smoke = 0;
				A_Playsound("bullet/body",0,1.0,0,3);				
				}
			else if (hittex.IndexOf("SKIN") >= 0 	|| hittex.IndexOf("ZFACE") >= 0	) {
				decaltype = "Bulletchip";
				dtype = 'skin';
				debris = false;
				smoke = 0;
				A_Playsound("bullet/body",0,1.0,0,3);				
				}
			else if (puffdata.HitType != TRACE_HitNone) { //BROWN GRAY CEMENT and the rest, stone seems like a good generic type
				decaltype = "Bulletchip";
				dtype = 'stone';
				rchance = 25;
				debris = true;
				smoke = 2;
				A_Playsound("bullet/stone",0,1.0,0,3);				
				}
			if (bdoom_debris == 1) {
				if (random(0,100) < rchance)
					A_SpawnProjectile("RicochetBullet",0,0,random(0,359),CMF_AIMDIRECTION,random(-45,45));
				if (smoke == 1) {
					for (int i = 0; i < 10; i++) {
						double ws = frandom(0.1,1.2);
						A_SpawnItemEx("WallSmoke",		0,0,0,	cos(-pitch)*ws,		0,					sin(pitch)*ws,		random(175,185),0,				48);
						}
					}
				else if (smoke == 2) {
					if (pos.z > floorz+8 && pos.z < ceilingz-8) {
						for (int i = 0; i < 15; i++)
							A_SpawnItemEx("RingSmoke",	0,0,0,	frandom(-0.7,0.7),frandom(-0.7,0.7),frandom(-0.7,0.7),	0,		0 ,				64);
						}
					else {
						for (int i = 0; i < 15; i++)
							A_SpawnItemEx("RingSmoke",	0,0,0,		frandom(-0.7,0.7),frandom(-0.7,0.7),0,		0,	SXF_ABSOLUTEVELOCITY,				64);
						}
					}
				if (debris) {
					for (int i = 0; i < 5; i++)
						A_SpawnItemEx("Wallpart",		0,0,0,	frandom(2,5),		0,					frandom(1,4),		random(150,210),SXF_SETTARGET,	64);
					}
				if (random(0,100) < sparkchance) {
					for (int i = 0; i < 6; i++)
						A_SpawnItemEx("RicochetSpark",	0,0,0,	frandom(-1.5,1.5),	frandom(-1.5,1.5),	frandom(1,4),		0,				0,				72);
					}
				}
			if (pos.z > floorz+8 && pos.z < ceilingz-8)
				A_SprayDecal(decaltype,8);
			//Console.PrintF("z %d, wallangle %d, %s - %s",traceheight,hitangle,hittex,dtype);
			return ResolveState(null);
			}
		BPUF ABCD 1 bright;
		stop;
	}
}

//a very small dark piece of debris spawned by hitting a wall
Class WallPart : SmallDebris
{
Default {
	SmallDebris.removeonfall false;
	SmallDebris.dbreak 0.8;
	-NOGRAVITY
	Renderstyle "Translucent";
	alpha 1.0;
	scale 0.16;
	smalldebris.dgravity 0.4;
	translation "DebrisStone";
	}
override void PostBeginPlay()
	{
	super.PostBeginPlay();
	wrot = random(8,14)*randompick(-1,1);
	scale*=frandom(0.8,1.2)*randompick(-1,1);
	if (!target || !(target is "EnBulletPuff"))
		return;
	let puff = EnBulletPuff(target);
	if (puff.dtype == 'wood') {
		A_SetTranslation("DebrisWood");
		A_setScale(frandom(0.14,0.18),frandom(0.06,0.09));
		}
	else if (puff.dtype == 'marble') {
		if (random(0,1) == 1)
			A_SetTranslation("DebrisMarble1");
		else
			A_SetTranslation("DebrisMarble2");
		}
	else if (puff.dtype == 'brick')
		A_SetTranslation("DebrisBrick");
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			if (target && target is "EnBulletPuff") {
				let puff = EnBulletPuff(target);
				if (puff.dtype == 'bloody')
				return ResolveState("Bloody");
				}
			return ResolveState(null);
			}
		BPRT AAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			A_FadeOut(0.005);
			scale*=0.95;
			if (pos.z > floorz)
				roll+=wrot;
			}
		wait;
	Bloody:
		TNT1 A 0 {
			A_SetScale(0.1,0.1);
			static const string bsprite[] =
			{
				"YBL7","YBL8","YBL9"
			};
			self.sprite = GetSpriteIndex(bsprite[random(0,2)]);
			}
		#### ABCDEFGHIJKLMNOPQRS 1 A_Fadeout(0.08);
		stop;		
	 }
}

Class BD_GlassPiece : WallPart {
Default {
	renderstyle "Add";
	alpha 0.4;
	}
states
	{
	Bloody:
		stop;
	}
}

Class EnSSGPuff : EnBulletPuff
{
Default {
	damagetype "SSG";
	}
}


Class RocketDebris : WallPart
{
Default {
	smalldebris.dgravity 0.75;
	scale 0.24;
	}
}

//small spark spawned by chainsaw, knuckle, bullets on metal
Class RicochetSpark : SmallDebris
{
Default {
	SmallDebris.removeonfall false;
	SmallDebris.dbreak 0.9;
	renderstyle "Add";
	alpha 1.0;
	radius 3;
	height 3;
	scale 0.03;
	}
override Void PostBeginPlay() {
	if (waterlevel > 1) {
		self.destroy();
		return;
		}
	super.PostbeginPlay();
	}
states
	{
	Spawn:
		SPRK A 1 bright	{
			A_FadeOut(0.03);
			scale *= 0.95;
			}
		loop;
	}
}



//fake bullet that ricochets from bulletpuffs
Class RicochetBullet : DebrisGeneral
{
Default {
	+NOINTERACTION
	//+THRUACTORS
	//+DONTSPLASH
	//bouncetype "Hexen";
	speed 40;
	seesound "none";
	deathsound "none";
	renderstyle "Add";
	alpha 0.8;
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			//if (bdoom_sparks == 1)
				//A_PlaySound("weapons/ricochet");
			}
		PUFF A 2;
		stop;
	}
}

//for backwards compatibility, will be removed after full transition to zscript
Class DummyChecker : Inventory
{
Default {
	+INVENTORY.UNDROPPABLE 
	+INVENTORY.UNTOSSABLE
	-COUNTITEM
	-INVENTORY.INVBAR
	+INVENTORY.PERSISTENTPOWER
	inventory.amount 1;
	inventory.maxamount 9999;
	}
}

Class SphereSpawner : Actor
{
int langle;
int lpitch;
Default {
	+NOINTERACTION
	+FORCEXYBILLBOARD
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	langle = 0;
	lpitch = -90;
	}
states
	{
	Spawn:
		TNT1 A 1 NoDelay {
			while (langle <= 350) {
					while (lpitch <= 90) {
						FLineTraceData ltr;
						LineTrace(langle,8,lpitch,TRF_THRUACTORS,data:ltr);
						let vec = level.vec3diff (pos,ltr.hitlocation);						
						A_SpawnParticle("0000FF",SPF_FULLBRIGHT,100,1,0,vec.x,vec.y,vec.z);
						lpitch+=10;
						}
					lpitch = -90;
					langle+=10;
				}
			}
		stop;
	}
}