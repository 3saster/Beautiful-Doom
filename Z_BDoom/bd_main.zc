////////////////////////////////////////////////////////////
////////////// ALL BASIC BEAUTIFUL DOOM OBJECTS ////////////
////////////////////////////////////////////////////////////

Class BDoomActor : Actor abstract {
	protected double pi;
	protected name bcolor;
	
	bool CheckLandingSize (double cradius = 0, bool checkceiling = false) {
		bool ret = false;
		if (checkceiling) {
			double ceilingHeight = GetZAt (flags: GZF_CEILING);
			for (int i = 0; i < 360; i += 45) {
				double curHeight = GetZAt (cradius, 0, i, GZF_ABSOLUTEANG | GZF_CEILING);
				ret = ret || (curHeight > ceilingHeight);
			}
		}
		else {
			double floorHeight = GetZAt ();
			for (int i = 0; i < 360; i += 45) {
				double curHeight = GetZAt (cradius, 0, i, GZF_ABSOLUTEANG);
				ret = ret || (curHeight < floorHeight);
			}
		}
		return ret;
	}
	
	int BD_Sign (int i) {
		if (i >= 0)
			return 1;
		else
			return -1;
	}
	
	static const name BD_LiquidFloors[] = { 
		"BLOOD1", "BLOOD2", "BLOOD3", "SLIME01", "SLIME02", "SLIME03", "SLIME04", "SLIME05", "SLIME06", "SLIME07", "SLIME08", "SLIME09", "SLIME10", "SLIME11", "SLIME12"
	};
	
	static bool CheckWater(actor checker = null) {
		if (!checker)
			return false;
		if (checker.waterlevel > 0)
			return true;
		if (checker.GetFloorTerrain().isLiquid == true)
			return true;
		let event = BD_Animated_Handler(StaticEventHandler.Find("BD_Animated_Handler"));
		if (event && event.IsAnimated(checker.floorpic)) {
			return event.IsAnimated(checker.floorpic);
		}
		return false;
	}
	
	// function that aligns flat models to slopes by Boondorl:
	// (Note: when hitting a slope, I don't do an overhang check because I can't be bothered with the maths required to do that)
	static void AlignToPlane(Actor a, SecPlane sec = null, bool ceiling = false) {
		if (!a)
			return;
		Vector3 norm;
		a.pitch = 0;
		a.roll = 0;
		if (!sec) {
			if (ceiling)
				norm = a.CurSector.ceilingplane.normal;
			else
				norm = a.CurSector.floorplane.normal;
		}
		else
			norm = sec.normal;
		if (abs(norm.z) ~== 1) {
			if (ceiling) {
				a.pitch += 180;
			}
			return;		
		}
		a.angle = 0;
		double ang = DeltaAngle(VectorAngle(norm.x, norm.y), a.angle);
		double pch = 90 - asin(norm.z);
		if (pch > 90)
			pch -= 180;
			
		a.pitch = pch * cos(ang);
		a.roll = pch * sin(ang);	
		if (ceiling) {
			a.pitch += 180;
			a.roll *= -1;
		}
	}
	
	override void BeginPlay() {
		super.BeginPlay();
		pi = 3.141592653589793;
	}	
	
	States {
	Loadsprites:
		LENR A 0;
		LENB A 0;
		LENG A 0;
		LENY A 0;
		LENC A 0;
		LENS AB 0;
		SPRK ABC 0;
		SMO2 ABCDEF 0;
		stop;
	}
}

//base class for most debris
Class BD_BaseDebris : BDoomActor abstract {
	protected bool landed;			//true if object landed on the floor (or ceiling, if can stick to ceiling)
	protected bool moving; 		//marks actor as moving; sets to true automatically if actor spawns with non-zero vel
	name sfxtype; //'debris', 'flames', 'blood', 'gibs' â€” based on the value the thing gets put into a special array that controls their number, see bd_events.zc
	property sfxtype : sfxtype;
	Default {
		BD_BaseDebris.sfxtype 'debris';
		+ROLLSPRITE
		+NOTAUTOAIMED
		+MISSILE			//enters Death when it hits the floor
		+NOBLOCKMAP
		+NOGRAVITY
		+DROPOFF
		+NOTELEPORT
		+FORCEXYBILLBOARD
		+THRUACTORS
		+INTERPOLATEANGLES
		-ALLOWPARTICLES
		renderstyle 'Translucent';
		alpha 1.0;
		radius 1;
		height 1;
		mass 1;
		damage 0;
	}
	// thanks Gutawer for explaning the math and helping this function come to life
	virtual void FlyBack() {
		if (!target)
			return;
		SetZ(pos.z+5);
		moving = true;
		landed = false;
		bFLATSPRITE = false;
		bTHRUACTORS = true;
		bNOGRAVITY = false;
		gravity = 1.0;
		A_FaceTarget();
		
		double dist = Distance2D(target);							//horizontal distance to target
		double vdisp = target.pos.z - pos.z + frandom[bdsfx](8,32);		//height difference between gib and target + randomized height
		double ftime = 20;											//time of flight
		
		double vvel = (vdisp + 0.5 * ftime*ftime) / ftime;
		double hvel = dist / ftime;
		
		VelFromAngle(hvel,angle);
		vel.z = vvel;
	}
	override void PostBeginPlay() {
		if (!level.IsPointInLevel(pos)) {
			destroy();
			return;
		}
		super.PostBeginPlay();
	}
}

//base inexpensive class for non-interactive particles and small debris
Class SmallDebris : BD_BaseDebris abstract {
	protected bool onceiling;		//true if object is stuck on ceiling (must be combined with landed)
	protected double Voffset;		//small randomized plane offset to reduce z-fighting for blood pools and such
	double wrot;					//gets added to roll to imitate rotation during flying
	double dbrake; 				//how quickly to reduce horizontal speed of "landed" particles to simulate sliding along the floor
	property dbrake : dbrake;	
	protected bool removeonfall;	//if true, object is removed when reaching the floor
	property removeonfall : removeonfall;
	protected bool hitceiling;		//if true, react to reaching the ceiling (otherwise ignore)
	property hitceiling : hitceiling;
	
	protected vector2 wallnormal;
	protected vector3 wallpos;
	
	protected state d_spawn;
	protected state d_death;
	protected state d_ceiling;
	protected state d_wall;
	
	Default {
		gravity 0.8;
		SmallDebris.removeonfall false;
		SmallDebris.dbrake 0;
		SmallDebris.hitceiling false;
	}

	//a chad tick override that skips Actor's super.tick!
	override void Tick() {
		if (alpha < 0){
			destroy();
			return;
		}
		if (isFrozen())
			return;
		UpdateWaterLevel();
		//animation:
		if (tics != -1) {
			if (tics > 0) 
				tics--;
			while (!tics) {
				if (!SetState (CurState.NextState)) // mobj was removed
					return;
			}
		}
		if (!bNOINTERACTION) {
			if (d_spawn && InStateSequence(curstate,d_spawn)) {
				//check if hit ceiling: (if hitceiling is true)
				if (hitceiling && pos.z >= ceilingz - 10 && vel.z > 0) {
					BD_Hitceiling();
					if (!self)
						return;
				}
				//check if hit wall:
				else if (pos.z > floorz+Voffset) {
					A_FaceMovementDirection(flags:FMDF_NOPITCH);
					FLineTraceData hit;
					LineTrace(angle,16,0,flags:TRF_THRUACTORS|TRF_NOSKY,data:hit);
					if (hit.HitLine) {
						wallnormal = (-hit.HitLine.delta.y,hit.HitLine.delta.x).unit();
						wallpos = hit.HitLocation;
						if (!hit.LineSide)
							wallnormal *= -1;						
						if (bBOUNCEONWALLS || pos.z <= floorz+Voffset){										
							wrot *= -1;
							vel = vel - (wallnormal,0) * 2 * (vel dot (wallnormal,0));
							if (wallbouncefactor)
								vel *= wallbouncefactor;
							else
								vel *= bouncefactor;
							A_FaceMovementDirection();
						}
						else
							BD_HitWall();
					}
					if (!self)
						return;
				}
			}
			//stick to surface if already landed:
			if (landed) {
				if (onceiling)
					SetOrigin((pos.x,pos.y,ceilingz-Voffset),true);
				else {
					SetOrigin((pos.x,pos.y,floorz+Voffset),true);
					if (!(vel.x ~== 0) || !(vel.y ~== 0)) {
						vel.xy *= dbrake;
						A_FaceMovementDirection(flags:FMDF_NOPITCH);
						FLineTraceData hit;
						LineTrace(angle,12,0,flags:TRF_THRUACTORS|TRF_NOSKY,data:hit);
						if (hit.HitLine) {
							wallnormal = (-hit.HitLine.delta.y,hit.HitLine.delta.x).unit();
							wallpos = hit.HitLocation;
							if (!hit.LineSide)
								wallnormal *= -1;
							vel = vel - (wallnormal,0) * 2 * (vel dot (wallnormal,0));
							vel *= bouncefactor * 0.5;
							A_FaceMovementDirection();
						}
					}
				}
			}
			//simulate falling if not yet landed:
			else {
				if (pos.z <= floorz+Voffset) {
					if (bBOUNCEONFLOORS && abs(vel.z) > 1) {
						SetZ(floorz+Voffset);
						vel.z *= -bouncefactor;
					}
					else
						BD_HitFloor();	
					if (!self)
						return;
				}
				else if (!bNOGRAVITY) 
						vel.z -= gravity;
			}
		}
		//finally, manually move the object:
		if (moving)
			SetOrigin(pos+vel,true);
	}
	virtual void BD_HitFloor() {			//hit floor if close enough
		if (removeonfall) {
			destroy();
			return;
		}
		if (floorpic == skyflatnum) { 
			destroy();
			return;
		}
		landed = true;
		vel.z = 0;
		SetZ(floorz+Voffset);
		if (d_death)
			SetState(d_death);
	}
	virtual void BD_Hitceiling() {
		if (ceilingpic == skyflatnum) {
			destroy();
			return;
		}
		SetZ(ceilingz-Voffset);
		if (d_ceiling)
			SetState(d_ceiling);
	}
	virtual void BD_HitWall() {
		if (d_wall)
			SetState(d_wall);	
	}
	
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (vel.length() != 0 || gravity != 0) //mark as movable if given any non-zero velocity
			moving = true;
		d_spawn = FindState("Spawn");
		d_death = FindState("Death");
		d_ceiling = FindState("HitCeiling");
		d_wall = FindState("HitWall");
	}
	states {
	Spawn:
		#### # -1;
		stop;
	}
}

//base class for flares and flame effects
Class BD_BaseFlare : SmallDebris abstract {
	protected state mdeath;
	protected state mxdeath;
	name fcolor;		//flare of the color; can be set as a property or externally
	double fscale;		//scale; used to when scale needs to be easily set externally from the spawner
	double falpha;		//alpha; used to when scale needs to be easily set externally from the spawner
	property fcolor : fcolor;
	Default {
		BD_BaseDebris.sfxtype 'flames';
		+BRIGHT
		+NOINTERACTION
		renderstyle 'Add';
		alpha 0.4;
		scale 0.4;
		gravity 0;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (master) {
			mdeath = master.FindState("Death");
			mxdeath = master.FindState("XDeath");
		}
		SetColor();
	}
	virtual void SetColor() { //fcolor is meant to be set by the actor that spawns the flare
		switch (fcolor) {
			case 'red'		: sprite = GetSpriteIndex("LENR"); break;
			case 'green'	: sprite = GetSpriteIndex("LENG"); break;
			case 'blue'		: sprite = GetSpriteIndex("LENB"); break;
			case 'yellow'	: sprite = GetSpriteIndex("LENY"); break;
			case 'tech'		: sprite = GetSpriteIndex("LENS"); break; //tech lamps use a completely different flare
			case 'cbra'		: sprite = GetSpriteIndex("LENC"); break; //so do candelabras
		}
		if (fscale != 0)
			A_SetScale(fscale);
		if (falpha != 0)
			alpha = falpha;
	}
	states {
	Spawn:
		#### # -1;
		stop;
	}
}

// base glow to be spawned alongside projectiles
Class BD_ProjFlare : BD_BaseFlare {
	double xoffset;
	Default {
		BD_BaseDebris.sfxtype "debris";
		BD_BaseFlare.fcolor "Red";
		alpha 0.8;
		scale 0.11;
	}
	override void Tick() {
		super.Tick();
		if (!master || !bdoom_debris) {
			destroy();
			return;
		}
		if (isFrozen())
			return;
		Warp(master,xoffset,0,0,flags:WARPF_INTERPOLATE);
		if (master.InstateSequence(master.curstate,mdeath) || master.InstateSequence(master.curstate,mxdeath)) {
			Destroy();
			return;
		}
	}
}


Class ParticleFire_General : BD_BaseFlare abstract {
	Default {
		scale 0.5;
		alpha 0.5;
	}
	Override void PostBeginPlay() {
		super.PostBeginPlay();
		bSPRITEFLIP = randompick(0,1);
	}
}

// Small fire particle that spawns over torches and fades away
Class BD_FireParticle : BD_BaseFlare {
	Default {
		alpha 0.5;
		scale 0.04;
	}
	override void SetColor() {
		sprite = GetSpriteIndex("SPRK");
		if (fcolor == 'green')
			frame = 1;
		else if (fcolor == 'blue')
			frame = 2;
		else if (fcolor == 'yellow')
			frame = 3;
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		A_FadeOut(0.01);
		scale*=0.95;
	}
}

Class ParticleFire_Red : ParticleFire_General {
	states {
	Spawn:
		FIPR ABCDEFGHIJKLMNOPQRST 1 A_FadeOut(0.03);
		stop;
	}
}

Class ParticleFire_Yellow : ParticleFire_General {
	Default {
		alpha 0.6;
		scale 0.35;
	}
	states{
	Spawn:
		FIPY ABCDEFGHIJKL 2 A_FadeOut(0.06);
		stop;
	}
}

Class ParticleFire_Green : ParticleFire_Red {
	Default {
	translation "0:3=112:127","5:8=112:127","9:12=112:127","13:15=112:127","16:47=112:127","48:79=112:127","96:111=112:127","112:127=112:127","128:151=112:127","152:159=112:127","160:167=112:127","169:191=112:127","193:207=112:127","208:223=112:127","224:231=112:127","232:235=112:127","236:239=112:127","240:247=112:127","248:249=112:127","250:254=112:127","255:255=112:127";
	}
}

Class FirePiece : BD_BaseFlare abstract {
	Default {
		scale 0.2;
		alpha 0.5;
	}
	states	{
	Spawn:		
		FIRP ABCDEFGHIJ 2 bright NoDelay A_FadeOut(0.05);
		stop;
	}
}



///////////////;
//// SMOKE ////;
///////////////

Class BD_BaseSmoke : SmallDebris abstract {
	Default {
		+NOINTERACTION
		BD_BaseDebris.sfxtype 'debris';
		gravity 0;
		renderstyle 'Add';
		alpha 0.3;
		scale 0.1;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (waterlevel > 1) {
			self.destroy();
			return;
		}
		scale.x *= frandom[bdsfx](0.8,1.2);
		scale.y *= frandom[bdsfx](0.8,1.2);
		bSPRITEFLIP = randompick(0,1);
	}
	states	{
	Spawn:
		#### # 1 {
			A_Fadeout(0.01);
		}
		loop;
	}
}

//white smoke to spawn over heated weapons
class WeaponSmoke : BD_BaseSmoke {
	Default {
		alpha 0.25;
		scale 0.15;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		roll = random[bdsfx](0,359);
	}
	states	{
	Spawn:		
		SMOK ABCDEFGHIJKLMNOPQR 1 {
			A_FadeOut(0.01);
		}
		stop;
	}
}

//medium-sized dark smoke that raises over burnt/plasmaburnt bodies
class BlackSmoke : BD_BaseSmoke {
	Default {
		renderstyle 'Translucent';
		alpha 0.3;
		scale 0.3;
	}
	override void Tick() {
		if (isFrozen())
			return;
		vel *= 0.99;
		super.Tick();
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		roll += frandom[bdsfx](-40,40);
	}
	states	{
	Spawn:
		SMOK ABCDEFGHIJKLMNOPQ 2 NoDelay {
			A_FadeOut(0.01);
		}
		SMOK R 2 {
			A_FadeOut(0.005);
			scale *= 0.99;
		}
		wait;
	}
}

//even bigger smoke for bigger explosions
class BigBlackSmoke : BlackSmoke {
	Default {
		alpha 0.6;
		scale 0.45;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		wrot = frandom[bdsfx](0.3,1.2) * randompick(-1,1);
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (GetAge() > 20)
			roll+=wrot;
		A_FadeOut(0.012);
		scale *= 1.01;
	}
	states {
	Spawn:
		SMOK ABCDEFGH 2;
		SMOK IJKLMNOPQR 3;
		wait;
	}
}

//dark small piece of smoke with a hint of flame â€” for "dirty" fires like burning barrel
Class BurnSmokePiece : BD_BaseSmoke {
	Default {
		renderstyle 'Translucent';
		alpha 0.3;
		scale 0.08;
	}
	states {
	Spawn:
		BSMO ABCDEFGHIJKLMNOPQRSTU 1 A_FadeOut(0.005);
		stop;
	}
}


//basic smoke behind a rocket
Class BD_RocketTrail : BD_BaseSmoke {
	Default {
		scale 0.1;
		renderstyle 'Translucent';
		alpha 0.3;
	}
	states {
	Spawn:
		SMOK ABCDEFGHIJKLMNOPQ 1 NoDelay A_FadeOut(0.03);
		stop;
	}
}

Class SmokeBallTrail : BD_RocketTrail {
	Default {
		alpha 0.15;
	}
}

//a particle that spawns thin smoke behind itself
Class SmokingPiece : SmallDebris {
	Default {
		gravity 0.7;
		alpha 1.0;
		SmallDebris.removeonfall true;
	}
	states	{
	Spawn:
		TNT1 A 1 NoDelay {
			A_SpawnItem("SmokingPieceSmoke");
			A_FadeOut(0.025);
		}
		loop;
	}
}

Class SmokingPieceSmoke : BD_BaseSmoke {
	Default {
		scale 0.04;
		alpha 0.3;
	}
	states {
	Spawn:
		SMOK ABCDEFGHIJKLMNOPQ 1 NoDelay A_FadeOut(0.03);
		stop;
	}
}

///////////////
//// PUFFS ////
///////////////

//smoke coming out of wood walls
Class WallSmoke : BD_BaseSmoke {
	Default {
		+ROLLCENTER
		scale 0.018;
		renderstyle 'Translucent';
		alpha 0.3;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		A_SetScale(frandom[bdsfx](0.028,0.032),frandom[bdsfx](0.028,0.032));
		wrot = (random[bdsfx](3,10)*randompick(-1,1));
		frame = random[bdsfx](0,5);
	}
	states {
	Spawn:
		SMO2 # 1 NoDelay {
			if (GetAge() < 26) {
				wrot *= 0.98;
				A_Fadeout(0.006);
				a_Setscale(clamp(scale.x*1.02,0.01,0.06),clamp(scale.y*1.02,0.01,0.06));
				vel*=0.97;
				roll+=wrot;
			}
			else {
				alpha*=0.997;
				wrot *= 0.97;
				a_Setscale(clamp(scale.x*1.01,0.01,0.06),clamp(scale.y*1.01,0.01,0.06));
				vel*=0.93;
				roll+=wrot;
				if (alpha < 0.1)
					A_FadeOut(0.005);
			}
		}
		loop;
	}
}

//circular puff of smoke for hard walls (stone, brick)
Class RingSmoke : WallSmoke {
	Default {
		alpha 0.4;
	}
	states {
	Spawn:
		SMO2 # 1 NoDelay {
			if (GetAge() < 26) {
				A_Fadeout(0.015);
				scale*1.5;
				vel*=0.8;
				roll+=wrot;
				wrot *= 0.96;
			}
			else {
				A_Fadeout(0.01);
				scale*1.2;
				vel*=0.9;
				roll+=wrot;
				wrot *= 0.95;
				if (alpha < 0.1)
					A_FadeOut(0.005);
			}
		}
		loop;
	}
}

// Base puff class. Also holds arrays with texture names to simulate different effects for different "surfaces"
Class BdoomPuff : BDoomActor abstract {
	Default {
		+NOBLOCKMAP
		+NOGRAVITY
		+FORCEXYBILLBOARD
		-ALLOWPARTICLES
		+DONTSPLASH
		-FLOORCLIP
		radius 1;
		height 1;
	}
	static const string LiquidWalls[] = {
		"WATER", "FALL", "BLOOD"
	};
	static const string HotWalls[] = {
		"LAVA", "FIRE", "NUKAGE", "DBRAIN"
	};
	static const string WoodWalls[] = {
		"WOOD", "PAN", "CRAT", "PANEL", "STUCCO", "FLAT5_1", "FLAT5_2", "CEIL1_1", "FLOOR0_1", "FLOOR0_2", "FLOOR0_3", "FLOOR7_1", "FLAT5_5", "TANROCK2", "TANROCK3", "TANROCK8", "ZZWOLF5", "ZZWOLF6", "ZZWOLF7", "BIGDOOR5", "BIGDOOR6", "BIGDOOR7", "ZZWOLF5"
	};
	static const string MetalWalls[] = {
		"METAL", "SHAWN", "SILVER", "BRONZ", "PIPE", "SUPPORT", "TEK", "ZZZFACE6", "ZZZFACE7", "ZZZFACE8", "ZZZFACE9", "FLOOR0_6", "FLOOR0_7", "FLOOR3_3", "FLOOR4_1", "FLOOR4_5", "FLOOR4_8", "FLOOR5_1", "STEP", "CEIL5_2", "FLAT22", "FLAT23", "CONS", "CEIL1_1", "CEIL1_2", "CEIL1_1", "SLIME14", "SLIME15", "SLIME16", "LITE", "COMP", "COMM", "SW2MET", "BIGDOOR1", "BIGDOOR2", "BIGDOOR3", "BIGDOOR4", "DOOR", "EXITDOOR", "SPCDOOR", "BRNSMAL", "COMP", "MIDB", "MIDS", "PLAT"
	};
	static const string BrickWalls[] = {
		"BRICK", "BIGBRIK"
	};
	static const string MarbleWalls[] = {
		"MARB", "GST", "DEM", "FLOOR7_2"
	};
	static const string GoreWalls[] = {
		"SK_", "SKIN2", "SKINCUT", "SKINEDGE", "SKINFACE", "SFLR", "SPINE", "SNAKE", "SLOPPY", "SP_FACE"
	};
	static const string SkinWalls[] = {
		"SKIN", "ZFACE"
	};
}

//used by stuff like decorative rails spawned by BFGball
Class NullPuff : Actor {
	Default {
		decal "none";
		+NODECAL
		+NOINTERACTION
		+BLOODLESSIMPACT
		+PAINLESS
		+PUFFONACTORS
		+NODAMAGETHRUST
	}
	states {
		Spawn:
			TNT1 A 1;
			stop;
	}
}

// Spawned by hitscans and real bullets (when in Modern Guns mode). Simulates different effects based on texture name
Class EnBulletPuff : BDoomPuff {
	protected string hittex; 				//name of texture that was hit. Needs to be string to use IndexOf for partial matches
	name DebrisType;						//debris type (different shape/colors for wood, bricks, etc.)
	protected int rchance; 				//ricochet chance
	protected bool debris; 				//whether to spawn debris
	protected int smoke; 					//0 - none, 1 - long directional, 2 - circular
	protected int sparkchance; 			//spark spawn chance
	protected double hitangle;				//angle at which the bullet hit a line
	protected Vector3 hitnormal;			//vector normal of the hit 
	protected string decaltype;			//type of decals to leave (wood hole, metal dent, stone chip, generic hole). Decals are strings, not names
	protected FLineTraceData puffdata;	//gets all the data about hit location
	Default {
		+PUFFGETSOWNER
		+HITTRACER
		+PUFFONACTORS
		+ALWAYSPUFF
		decal "none";
		renderstyle 'Add';
		scale 0.075;
		alpha 0.8;
		mass 1;
	}
	states {
	XDeath:
		TNT1 A 1 {
			let mon = BDoomMonster(tracer);
			if (mon) {				
				mon.hitheight = pos.z - mon.pos.z;
			}
		}
		stop;
	Spawn:
		TNT1 A 0 NoDelay {
			// First we fire linetrace, using angle and pitch of target (which is either the player or the bullet projectile)
			if (target) {
				angle = target.angle;
				pitch = target.pitch;
			}
			// When spawned by hitscans and by bullets pos.z ends up different. Make sure linetrace is not executed inside floor/ceiling
			double traceheight = pos.z;
			if (pos.z <= floorz)
				traceheight = floorz+1;
			else if (pos.z >= ceilingz)
				traceheight = ceilingz-1;
			//console.printf("posz: %d | floorz: %d | ceilingz: %d | angle: %d | pitch: %d",pos.z,floorz,ceilingz,angle,pitch);
			LineTrace(angle,16,pitch,TRF_THRUACTORS|TRF_NOSKY|TRF_ABSPOSITION,traceheight,pos.x,pos.y,data:puffdata);	
			hittex = texman.GetName(puffdata.HitTexture);	
			hitnormal = -puffdata.HitDir;
			if ( puffdata.HitType == TRACE_HitFloor ) {
				if ( puffdata.Hit3DFloor ) 
					hitnormal = -puffdata.Hit3DFloor.top.Normal;
				else 
					hitnormal = puffdata.HitSector.floorplane.Normal;
			}
			else if ( puffdata.HitType == TRACE_HitCeiling )	{
				if ( puffdata.Hit3DFloor ) 
					hitnormal = -puffdata.Hit3DFloor.bottom.Normal;
				else 
					hitnormal = puffdata.HitSector.ceilingplane.Normal;
			}
			else if ( puffdata.HitType == TRACE_HitWall ) {
				hitnormal = (-puffdata.HitLine.delta.y,puffdata.HitLine.delta.x,0).unit();
				if ( !puffdata.LineSide ) 
					hitnormal *= -1;
			}
			
			// regular liquids â€” splash sound, no visuals
			for (int i = 0; i < LiquidWalls.Size(); i++) {
				if (hittex.IndexOf(LiquidWalls[i]) >= 0 ) {
					A_PlaySound("world/watersplashsmall",0,1.0,0,3);
					//console.Printf("Liquid Texture: %s",hittex);
					self.destroy();
					return ResolveState(null);
				}
			}
			// hot liquids â€” sizzle sound, no visuals
			for (int i = 0; i < HotWalls.Size(); i++) {
				if (hittex.IndexOf(HotWalls[i]) >= 0 ) {
					A_PlaySound("world/lavasizzlesmall",0,1.0,0,3);
					//console.Printf("Hot Texture: %s",hittex);
					self.destroy();
					return ResolveState(null);
				}
			}
			// wood walls â€” long smoke, no ricochet/sparks, decals are textured like wood
			for (int i = 0; i < WoodWalls.Size(); i++) {
				if (hittex.IndexOf(WoodWalls[i]) >= 0 ) {
					decaltype = "BulletWchip";
					DebrisType = 'wood';
					debris = true;
					smoke = 1;
					rchance = 0;
					sparkchance = 0;
					A_Playsound("bullet/wood",0,1.0,0,3);	
					//console.Printf("Wood Texture: %s",hittex);
					return ResolveState("PuffSpawn");
				}
			}
			// Marble walls â€” same as stone but spawns marble-colored green/grey debris
			for (int i = 0; i < MarbleWalls.Size(); i++) {
				if (hittex.IndexOf(MarbleWalls[i]) >= 0 ) {
					decaltype = "BulletSchip";
					DebrisType = 'marble';
					rchance = 20;
					debris = true;
					smoke = 2;
					A_Playsound("bullet/stone",0,1.0,0,3);	
					//console.Printf("Marble Texture: %s",hittex);
					return ResolveState("PuffSpawn");
				}
			}
			// Metallic walls - high ricochet chance, high spark chance, no smoke, decals are shallow dents
			for (int i = 0; i < MetalWalls.Size(); i++) {
				if (hittex.IndexOf(MetalWalls[i]) >= 0 ) {
					decaltype = "BulletMchip";
					rchance = 40;
					sparkchance = 50;
					debris = false;
					smoke = 0;
					A_Playsound("bullet/metal",0,1.0,0,3);	
					//console.Printf("Metal Texture: %s",hittex);
					return ResolveState("PuffSpawn");
				}
			}
			// Brick walls - low ricochet chance, no sparks, circular smoke, decals are big shallow chips
			for (int i = 0; i < BrickWalls.Size(); i++) {
				if (hittex.IndexOf(BrickWalls[i]) >= 0 ) {
					decaltype = "BulletSchip";
					DebrisType = 'brick';
					rchance = 15;
					debris = true;
					smoke = 2;
					A_Playsound("bullet/stone",0,1.0,0,3);	
					//console.Printf("Brick Texture: %s",hittex);
					return ResolveState("PuffSpawn");
				}
			}	
			// Walls made of meat/gore - no ricochet, no sparks, no smoke, hits with a flesh sound, spawns a little blood
			for (int i = 0; i < GoreWalls.Size(); i++) {
				if (hittex.IndexOf(GoreWalls[i]) >= 0 ) {
					decaltype = "Bulletchip";
					DebrisType = 'bloody';
					debris = true;
					smoke = 0;
					A_Playsound("bullet/body",0,1.0,0,3);	
					//console.Printf("Gore Texture: %s",hittex);
					return ResolveState("PuffSpawn");
				}
			}	
			// Dry skin walls - same as gore walls but no boood
			for (int i = 0; i < SkinWalls.Size(); i++) {
				if (hittex.IndexOf(SkinWalls[i]) >= 0 ) {
					decaltype = "Bulletchip";
					DebrisType = 'skin';
					debris = false;
					smoke = 0;
					A_Playsound("bullet/body",0,1.0,0,3);	
					//console.Printf("Skin Texture: %s",hittex);
					return ResolveState("PuffSpawn");
				}
			}	
			//Generic - suitable for stone, gray walls, etc. Minor ricochet chance, no sparks, generic debris, circular smoke
			if (puffdata.HitType != TRACE_HitNone) {
				decaltype = "Bulletchip";
				DebrisType = 'stone';
				rchance = 25;
				debris = true;
				smoke = 2;
				A_Playsound("bullet/stone",0,1.0,0,3);	
				//console.Printf("Generic Texture: %s",hittex);	
				return ResolveState("PuffSpawn");		
			}
			return ResolveState(null);
		}
		goto PuffSpawn;
	PuffSpawn:
		TNT1 A 0 {
			if (bdoom_debris) {
				double ofz = 0;
				if (puffdata.HitType == TRACE_HitFloor)
					ofz = 1;
				else if (puffdata.HitType == TRACE_HitCeiling)
					ofz = -1;
				if (random[bdsfx](0,100) < rchance) {
					A_SpawnItemEx("RicochetBullet",xvel:50,zvel:frandom[bdsfx](-10,10),angle:random[bdsfx](0,359));
				}
				if (smoke == 1) {
					for (int i = random[bdsfx](6,9); i > 0; i--) {
						actor wpart = Spawn("WallSmoke",Puffdata.Hitlocation + (0,0,ofz));
						if (wpart) {
							wpart.vel = (hitnormal + (frandom[bdsfx](-0.05,0.05),frandom[bdsfx](-0.05,0.05),frandom[bdsfx](-0.05,0.05))) * frandom[bdsfx](0.1,0.5);
							wpart.target = self;
						}
					}
				}
				else if (smoke == 2) {						
					for (int i = random[bdsfx](10,15); i > 0; i--)
						A_SpawnItemEx("RingSmoke", 0,0,0, frandom[bdsfx](-0.7,0.7),frandom[bdsfx](-0.7,0.7),frandom[bdsfx](-0.7,0.7));
				}
				if (debris) {
					for (int i = random[bdsfx](4,7); i > 0; i--) {
						actor wpart = Spawn("Wallpart",Puffdata.Hitlocation + (0,0,ofz));
						if (wpart) {
							wpart.vel = (hitnormal + (frandom[bdsfx](-0.4,0.4),frandom[bdsfx](-0.4,0.4),frandom[bdsfx](-0.4,0.4))) * frandom[bdsfx](2.5,4);
							wpart.target = self;
						}
					}
				}
				if (random[bdsfx](0,100) < sparkchance) {						
					for (int i = random[bdsfx](5,8); i > 0; i--) {
						actor wpart = Spawn("RicochetSpark",Puffdata.Hitlocation + (0,0,ofz));
						if (wpart) {
							wpart.vel = (hitnormal + (frandom[bdsfx](-0.7,0.7),frandom[bdsfx](-0.7,0.7),frandom[bdsfx](-0.7,0.7))) * frandom[bdsfx](1,3);
							wpart.target = self;
						}
					}
				}
			}
			if (decaltype) {
				//spawn an actor with 3D model to emulate floor/ceiling decals
				if (puffdata.HitType == TRACE_HitFloor) {
					let pld = BD_PlaneDecal(Spawn("BD_PlaneDecal",(pos.x,pos.y,floorz)));
					if (pld) {
						pld.decaltype = decaltype;
					}
				}
				else if (puffdata.HitType == TRACE_HitCeiling) {
					let pld = BD_PlaneDecal(Spawn("BD_PlaneDecal",(pos.x,pos.y,ceilingz)));
					if (pld) {
						pld.decaltype = decaltype;
						pld.ceiling = true;
					}
				}
				//or spray the decal we need
				else
					A_SprayDecal(decaltype,8);
			}
			return ResolveState(null);
		}
		BPUF ABCD 1 bright;
		stop;
	}
}

//3d-model "decal" to spawn on the floors and ceilings
Class BD_PlaneDecal : BD_BaseDebris {
	bool ceiling;
	name decaltype;
	Default {
		renderstyle 'Shaded';
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		switch (decaltype) {
			case 'BulletChip'	: sprite = GetSpriteIndex("CHIP");	frame = random[bdsfx](0,4); alpha = 0.85; angle = random[bdsfx](0,360); break;
			case 'BulletMChip'	: sprite = GetSpriteIndex("METL");	frame = random[bdsfx](0,4); alpha = 0.55; angle = random[bdsfx](0,360);break;
			case 'BulletWChip'	: sprite = GetSpriteIndex("WOOD");	frame = random[bdsfx](0,4); alpha = 1.0; break;
			case 'BulletSChip'	: sprite = GetSpriteIndex("BRIK");	frame = random[bdsfx](0,3); alpha = 0.75; angle = random[bdsfx](0,360);break;
		}
		if (ceiling) {
			if (CurSector.CeilingPlane.Normal == (0,0,-1) && CheckLandingSize(2,checkceiling:true)) {
				destroy();
				return;
			}
			AlignToPlane(self,ceiling:true);
		}
		else {
			if (CurSector.FloorPlane.Normal == (0,0,1) && CheckLandingSize(2)) {
				destroy();
				return;
			}
			AlignToPlane(self);
		}
	}
	override void Tick() {
		if (ceiling)
			SetOrigin((pos.x,pos.y,ceilingz),true);
		else
			SetOrigin((pos.x,pos.y,floorz),true);
	}
	states {
	//even though these are not real sprites, they still need to be defined for MODELDEF to attach the model properly
	load:
		CHIP ABCDE 0;
		METL ABCDE 0;
		WOOD ABCDE 0;
		BRIK ABCD 0;
	}
}

/*
	A very small dark piece of debris spawned by hitting a wall.
	Its shape and translation change depending on the "material" of the texture
	that was shot.
*/
Class WallPart : SmallDebris {
	Default {
		SmallDebris.dbrake 0.8;
		Renderstyle 'Translucent';
		alpha 1.0;
		scale 0.13;
		gravity 0.4;
		translation "DebrisStone";
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		wrot = frandom[bdsfx](8,14)*randompick(-1,1);
		scale*=frandom[bdsfx](0.8,1.2);
		bSPRITEFLIP = randompick(0,1);
		if (!target || !(target is "EnBulletPuff"))
			return;
		let puff = EnBulletPuff(target);
		if (puff.DebrisType == 'wood') {
			A_SetTranslation("DebrisWood");
			A_setScale(frandom[bdsfx](0.14,0.18),frandom[bdsfx](0.06,0.09));
		}
		else if (puff.DebrisType == 'marble') {
			if (random[bdsfx](0,1) == 1)
				A_SetTranslation("DebrisMarble1");
			else
				A_SetTranslation("DebrisMarble2");
		}
		else if (puff.DebrisType == 'brick')
			A_SetTranslation("DebrisBrick");
	}
	states {
	Spawn:
		TNT1 A 0 NoDelay {
			if (target && target is "EnBulletPuff") {
				let puff = EnBulletPuff(target);
				if (puff.DebrisType == 'bloody')
				return ResolveState("Bloody");
			}
			return ResolveState(null);
		}
		BPRT A 1 {
			A_FadeOut(0.005);
			scale*=0.98;
			if (pos.z > floorz)
				roll+=wrot;
		}
		wait;
	Bloody:
		TNT1 A 0 {
			A_SetScale(0.1,0.1);
			static const string bsprite[] = {
				"YBL7","YBL8","YBL9"
			};
			sprite = GetSpriteIndex(bsprite[random[bdsfx](0,2)]);
		}
		#### ABCDEFGHIJKLMNOPQRS 1 A_Fadeout(0.08);
		stop;		
	}
}

Class BD_GlassPiece : WallPart {
	Default {
		renderstyle 'Add';
		alpha 0.4;
	}
	states {
	Bloody:
		stop;
	}
}



Class RocketDebris : WallPart {
	Default {
		gravity 0.75;
		scale 0.24;
	}
}

//small spark spawned by chainsaw, knuckle, bullets on metal
Class RicochetSpark : SmallDebris {
	Default {
		SmallDebris.dbrake 0.9;
		renderstyle 'Add';
		alpha 1.0;
		radius 3;
		height 3;
		scale 0.03;
		+BRIGHT
	}
	override Void PostBeginPlay() {
		if (waterlevel > 1) {
			destroy();
			return;
		}
		super.PostbeginPlay();
	}
	states {
	Spawn:
		SPRK A 1 {
			A_FadeOut(0.03);
			scale *= 0.95;
		}
		loop;
	}
}

//fake bullet that ricochets from bulletpuffs
Class RicochetBullet : SmallDebris {
	Default {
		renderstyle 'Add';
		alpha 0.8;
		+BRIGHT
	}
	states {
	Spawn:
		PUFF A 3;
		stop;
	}
}


/*
//////////////// OVERLAY

Class BD_OverlayControl : CustomInventory {
	Default {
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNCLEARABLE
		inventory.maxamount 1;
	}
	
	override void DoEffect() {
		if (!owner || !owner.player)
			return;
		