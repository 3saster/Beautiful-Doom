Class BD_BloodBase : SmallDebris abstract {
	static const name bsprite[] = { "YBL7","YBL8","YBL9" };
	Default {
		BD_BaseDebris.sfxtype 'blood';
		+PUFFGETSOWNER
		gravity 0.7;
		renderstyle 'normal';
		height 1;
	}
	override void BeginPlay() {
		super.BeginPlay();
		if (target) {
			CopyBloodColor(target);
			translation = target.BloodTranslation;
		}
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (!bdoom_blood /*|| !target*/){
			destroy();
			return;
		}
		if (target) {
			CopyBloodColor(target);
			translation = target.BloodTranslation;
			let trg = BDoomMonster(target);
			if (trg) {
				if (trg.burning){
					destroy();
					return;
				}
				trg.meatlist.push(self);
			}
		}
		if (!Voffset)
			Voffset = frandom[bdsfx](0.1,0.3);
	}
	states	{
	LoadSprites:
		YBL7 ABCDEFGHIJKLMNOPQRS 0;
		YBL8 ABCDEFGHIJKLMNOPQRS 0;
		YBL9 ABCDEFGHIJKLMNOPQRS 0;
		XBL7 ABCDEFGHIJKLMNOPQRS 0;
		XBL8 ABCDEFGHIJKLMNOPQRS 0;
		XBL9 ABCDEFGHIJKLMNOPQRS 0;
		stop;
	Fade:	
		#### # 0 A_SetRenderStyle(alpha,Style_Translucent);
		#### # 1 A_FadeOut(0.02);
		wait;
	}
}	

Class BD_Blood : BD_BloodBase {
	double restscale;
	double scalemul;
	Default {
		scale 0.35;
		gravity 0.5;
		alpha 0.8;
		height 8;
		radius 8;
		SmallDebris.hitceiling true;
		SmallDebris.RemoveOnLiquid false;
		renderstyle 'translucent';
	}
	override void PostBeginPlay() {
		Super.PostBeginPlay();
		moving = true;
		A_SetScale(scale.x*frandom[bdsfx](0.7,1.2),scale.y*frandom[bdsfx](0.7,1.2));
		bSPRITEFLIP = randompick(0,1);
		roll = random[bdsfx](0,359);
		sprite = GetSpriteIndex(bsprite[random[bdsfx](0,2)]);
		scalemul = 1.02;
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (waterlevel > 1) {
			A_SetRenderStyle(alpha,STYLE_Translucent);
			A_FadeOut(0.0025);
			vel.xy *= 0.9;
			vel.z *= 0.5;
			bNOGRAVITY = true;
			scale *= scalemul;
			A_SetSize(newheight:height*scalemul);
			scalemul = Clamp(scalemul * 0.999,1.0001,2);
		}
		else {
			bNOGRAVITY = false;
			if (waterlevel > 0)
				gravity = 0.05;
			else
				gravity = default.gravity;
		}
	}
	override void BD_HitWall() {
		A_Stop();
		if (waterlevel > 0)
			return;
		//Console.printf("%s hits wall, angle %i pitch %i",GetClassName(),angle,pitch);
		int dmg = 5;
		if (target)
			dmg = target.GetMaxHealth() - target.health;
		TraceBleedAngle(dmg,angle,0);
		destroy();
	}
	override void BD_HitFloor() {
		super.BD_HitFloor();
		//console.printf("waterlevel %d",waterlevel);
		if (waterlevel > 1)
			return;
		A_Stop();
		A_Scream();
		sprite = GetSpriteIndex("MODL");
		frame = random[bdsfx](0,12);
		angle = random[bdsfx](0,359);
		AlignToPlane(self);
		if (CurSector.FloorPlane.Normal == (0,0,1)) {
			if (CheckLandingSize(24))
				scale*=0.5;
			if (CheckLandingSize(18))
				scale*=0.5;
			if (CheckLandingSize(12))
				scale*=0.5;
			if (CheckLandingSize(6)) {
				destroy();
				return;
			}
		}
		A_SetRenderStyle(1,STYLE_Normal);
	}
	override void BD_Hitceiling() {
		super.BD_Hitceiling();
		if (waterlevel > 1)
			return;
		A_Stop();
		A_Scream();
		sprite = GetSpriteIndex("MODL");
		frame = random[bdsfx](0,12);
		landed = true;
		onceiling = true;
		AlignToPlane(self,ceiling:true);
		if (CurSector.CeilingPlane.Normal == (0,0,-1)) {
			if (CheckLandingSize(24,true))
				scale*=0.5;
			if (CheckLandingSize(18,true))
				scale*=0.5;
			if (CheckLandingSize(12,true))
				scale*=0.5;
			if (CheckLandingSize(6,true)){
				destroy();
				return;
			}
		}
		A_SetRenderStyle(0.8,Style_Translucent);
	}
	states {
	spawn:
		#### AAA 0; //override hardcoded frame-skipping behavior for Blood
		#### ABCDEFGHIJKLMNOPQRS 2;
		wait;
	Death:
		#### # 0 { 
			let bld = Spawn("BD_BloodDropSplash",(pos.x,pos.y,floorz));
			if (bld) {
				bld.translation = translation;
				bld.SetStateLabel("SpawnDo");
				bld.scale = scale*1.5;
			}
			scale *= 0.5;
			if (BDoomActor.CheckAnimated(self))
				return ResolveState("WaterLand");
			return ResolveState(null);
		}
		#### ############ 1 {
			scale *= 1.05;
		}
		#### # -1;
		stop;
	HitCeiling:
		#### # 6 {
			int chance = Clamp (320 - (128 * alpha),64,250);
			A_SpawnitemEx("BD_CeilingBloodDrop",frandom[bdsfx](-3,3),frandom[bdsfx](-3,3),0,flags:SXF_TRANSFERTRANSLATION|SXF_NOPOINTERS,chance);
			A_FadeOut(0.001);
		}
		loop;			
	Raise:
		#### # 0 {
			if (onceiling)
				return ResolveState("Fade");
			sprite = GetSpriteIndex(bsprite[random[bdsfx](0,2)]);
			roll = random[bdsfx](0,359);
			FlyBack();
			return ResolveState(null);
		}
		#### SRQPONMLKJIHGFEDCBA 1 bright {
			A_FadeOut(0.03);
			if (target &&  Distance3D(target) < 32) {
				destroy();
				return ResolveState(null);
			}
			return ResolveState(null);
		}
		stop;
	DeathLiquid:
	WaterLand:
		#### # 0 {
			A_SetRenderStyle(alpha,STYLE_Translucent);
			Voffset = 0.01;
			scale *= 0.4;
		}
		#### # 1 {
			//console.printf("death liquid alpha %f scale %f",alpha,scale.x);
			A_FadeOut(0.05);
			scale*=1.02;
		}
		wait;
	}
}

//a less interactive version that also doesn't leave any pools behind
Class BD_BloodLight : BD_Blood {
	Default {
		SmallDebris.hitceiling false;
	}
	override void BD_HitWall() {
		destroy();		
	}
	override void BD_HitFloor() {
		super.BD_HitFloor();
		if (waterlevel > 1)
			return;
		A_Stop();
		A_Scream();		
		let bld = Spawn("BD_BloodDropSplash",(pos.x,pos.y,floorz));
		if (bld) {
			bld.translation = translation;
			bld.SetStateLabel("SpawnDo");
			bld.scale = scale*1.5;
		}
		destroy();
	}
	states {
	Death:
		stop;
	}
}

Class BD_GibBlood : BD_Blood {
	Default {
		SmallDebris.hitceiling false;
		Scale 0.7;
		height 2;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		Voffset = frandom[bdsfx](0.05,0.1);
	}
	override void BD_HitFloor() {
		super.BD_HitFloor();
		for (int i = random(6,10); i > 0; i--) {
			double bx = pos.x+frandom[bdsfx](-48,48);
			double by = pos.y+frandom[bdsfx](-48,48);
			vector3 bloodpos = (bx,by,GetZAt(bx,by,flags:GZF_ABSOLUTEPOS));
			if (!level.IsPointInLevel(bloodpos))
				continue;
			let bld = Spawn("BD_BloodDropSplash",b loodpos);
			if (bld) {
				if (target)
					bld.target = target;
				bld.translation = translation;
			}
			
		}
		destroy();
	}
	override void Tick() {
		super.Tick();
		if (!isFrozen()) {
			//A_FadeOut(0.01);
			A_SetScale(Clamp(scale.x*1.02,0.1,1));
			gravity = Clamp(gravity*0.5,0.001,1);
			vel.xy *= 0.92;
		}
	}
	states {
	Death:
		stop;
	}	
}

Class BD_BloodDropSplash : SmallDebris {
	Default {
		+NOINTERACTION
	}
	States {
	Spawn:
		TNT1 A 0;
		TNT1 A 1 {
			A_SetTics(random(1,25));
			A_SetScale(frandom(0.2,0.4));
		}	
		TNT1 A 0 {
			if (target && random(1,10) >= 6) {
				A_StartSound("gibs/blooddrop");
				let b = Spawn("BD_BloodPool",(pos.x+frandom(-8,8),pos.y+frandom(-8,8),floorz));
				if (b) {
					b.target == target;
					b.scale *= scale.x;
				}
			}
		}
	SpawnDo:
		CEBL GHIJK 3;
		stop;
	}
}


Class TestBlood : BD_Blood {
	override void PostBeginPlay() {
		super.PostBeginPlay();
		VelFromAngle(10,angle);
	}
}


Class BD_BaseBloodPool : BD_BloodBase abstract {
	protected bool RandomAngle;
	property RandomAngle : RandomAngle;
	Default {
		BD_BaseBloodPool.RandomAngle true;
		gravity 0;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (floorpic == skyflatnum){
			destroy();
			return;
		}
		if (RandomAngle)
			angle = random[bdsfx](0,360);
		if (CurSector.FloorPlane.Normal != (0,0,1))	
			AlignToPlane(self);
		landed = true;
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (BDoomActor.CheckAnimated(self)) {
			A_SetRenderstyle(alpha,STYLE_Translucent);
			A_FadeOut(0.05);
			scale *= 1.01;
		}
	}
}

Class BD_BloodPool : BD_BaseBloodPool {
	Default {
		scale 0.35;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (CurSector.FloorPlane.Normal == (0,0,1)) {
			if (CheckLandingSize(24))
				scale*=0.5;
			if	(CheckLandingSize(18))
				scale*=0.5;
			if	(CheckLandingSize(12))
				scale*=0.5;
			if	(CheckLandingSize(6)){
				destroy();
				return;
			}
		}
		frame = random[bdsfx](0,12); 
	}
	states {
	spawn:
		MODL # -1;
		stop;
	}
}

Class BD_CeilingBloodDrop : BD_BloodBase {
	Default {
		+FORCEYBILLBOARD
		scale 0.1;
		alpha 0.75;
		gravity 0;
		SmallDebris.hitceiling false;
	}
	override void PostBeginPlay() {
		SmallDebris.PostBeginPlay();
		scale*= frandom[bdsfx](0.8,1.1);
		bSPRITEFLIP = randompick(0,1);
		moving = true;
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (waterlevel > 2) {
			A_FadeOut(0.01);
			vel *= 0.9;
			bNOGRAVITY = true;
		}
		else {
			bNOGRAVITY = false;
		}
	}
	states {
	spawn:
		CEBL ABCDDEEEE 2 A_SetTics(random[bdsfx](1,3));
		CEBL F 25 { 
			gravity = frandom[bdsfx](0.28,0.32); 
		}
		stop;
	Death:
		TNT1 A 0 {
			scale.x = frandom[bdsfx](0.22,0.25);
			bSPRITEFLIP = randompick(0,1);
		}
		CEBL GHIJK 3;
		stop;
	}
}


Class AniBloodPool : BD_BaseBloodPool {
	bool instant; //if true, the blood pool will instantly reqch max size â€” for decorative purposes such as Heart Column, where animation is unneeded, but checking for overhang may still important
	protected double pscale;
	Default {
		renderstyle 'Normal';
		scale 0.05;
		radius 16;
	}
	override void PostBeginPlay() {
		Super.PostBeginPlay();
		if (waterlevel > 0) {
			destroy();
			return;
		}
		pscale = 1.017;
		if (instant)
			A_SetScale(0.208);
		if (CurSector.FloorPlane.Normal == (0,0,1)) {
			if (CheckLandingSize(18))
				scale*=0.5;
			if (CheckLandingSize(15))
				scale*=0.5;
			if (CheckLandingSize(9))
				scale*=0.5;
			if (CheckLandingSize(8)) {
				destroy();
				return;
			}
		}
		if (target)
			translation = Target.BloodTranslation;
	}
	override void Tick() {
		super.Tick();
		if (isfrozen() || instant)
			return;
		if (pscale > 1) {
			scale *= pscale;
			pscale = Clamp(pscale*0.9999,1,2);	
			//Console.Printf("scale: %f",scale.x);
		}
	}
	states	{
		Spawn:
			MODL A -1;
			stop;
	}
}

//thinner and faster version for spurts
Class BloodSpray : BD_Blood {
	Default {
		scale 0.14;
		gravity 0.5;
		alpha 0.85;
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		A_FadeOut(0.032);
	}
}

//spawns long "arterial" spurts gradually changing their direction vertically
Class BD_BloodSpurt : BD_BloodBase {
	double bpitch;
	double pitchchange;
	double bspeed;
	Class<Actor> sprayactor;
	Default {
		gravity 0;
	}
	override void PostBeginPlay() {
		if (waterlevel > 0) {
			destroy();
			return;
		}
		super.PostBeginPlay();
		bpitch = frandom[bdsfx](1.0,5.0);
		bspeed = frandom[bdsfx](4.0,6.0);
		pitchchange = 0.5;
	}
	states {
		Spawn:
			TNT1 A 0 NoDelay A_FaceTarget(0,270,0,0);
			TNT1 A 0 A_Jump(256,random[bdsfx](1,5));
			TNT1 AAAAAAAAA 1 { 
				A_SpawnItemEx("BloodSpray",0,0,0,	bspeed+frandom[bdsfx](0.0,1.2),0,bpitch,	random[bdsfx](175,185), SXF_TRANSFERPOINTERS);
				bpitch+=pitchchange;
			}
			stop;
	}
}

Class NeckSpurt : BD_BloodSpurt {
	override void PostBeginPlay() {
		super.PostBeginPlay();
		bpitch = frandom[bdsfx](2.0,5.5);
		bspeed = frandom[bdsfx](1.0,2.5);
		pitchchange = 0.0;
	}
}

Class FrontalSpurt : BD_BloodSpurt {
	override void PostBeginPlay() {
		super.PostBeginPlay();
		bpitch = frandom[bdsfx](0.3,1.2);
		bspeed = frandom[bdsfx](3.0,4.5);
		pitchchange = 0.2;
	}
}


//large quickly disappearing spray creating a "bloody mist" upon xdeath
Class BFountainSpray : SmallDebris {
	double wscale;
	Default {
		BD_BaseDebris.sfxtype 'blood';
		+ROLLCENTER
		renderstyle "Translucent";
		scale 0.32;
		alpha 0.7;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		bSPRITEFLIP = randompick(0,1);
		//roll = frandom[bdsfx](-10,10);
		wscale = 1.2;
	}
	states {
	Spawn:
		MISX ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 {
			scale *= wscale;
			wscale = Clamp(wscale*0.92,1,1.2);
		}
		MISX KLMNOPQRSTUVWXYZ 1 {
			scale.y *= 0.95;
			a_fadeout(0.01);
		}
		wait;
	}
}



//// FOOTPRINTS

Class BD_BloodyPrintControl : Inventory {
	BD_FXAmountControl event;
	private int bloodtrack; //how much blood was "collected by our boots"
	private bool side;
	private bool drip;
	property drip : drip;
	private array <BD_BloodBase> bootsblood;
	Default {
		BD_BloodyPrintControl.drip false;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		inventory.maxamount 1;
	}
	override void Tick() {}
	override void DoEffect() {
		super.DoEffect();		
		if (!bdoom_blood || !owner || !owner.player || level.isFrozen())
			return;
		//debug
		//Console.Printf("blood on boots: %d | vel: %d",bootsblood.Size(),owner.vel.length());
		event = BD_FXAmountControl(EventHandler.find("BD_FXAmountControl"));
		if (!event)
			return;
		//blood isn't collected on boots and prints aren't spawned if we're not on the floor or are barely moving
		if (!(owner.pos.z ~== owner.floorz))
			return;
		if (BDoomActor.CheckAnimated(owner)) {
			bootsblood.Clear();
			return;
		}
		double pspeed = owner.vel.length();
		if (drip && (level.time % 6 == 0))
			bootsblood.delete(0);
		if (bootsblood.Size() < 48 && pspeed > 4) {
			for (int i = 0; i < event.bloodlist.Size(); i++) {
				if (bootsblood.Size() >= 48)
					break;
				let pool = BD_BloodBase(event.bloodlist[i]);
				if (!pool || !(pool.pos.z <= pool.floorz + 1) || bootsblood.Find (pool) != bootsBlood.Size ())
					continue;
				if ((pool is "BD_Blood" || pool is "BD_BaseBloodPool") && !(pool is "BD_BloodyFootPrint")) {
					let diff = owner.Distance2D(pool);
					if (pool.floorz ~== owner.floorz && diff <= owner.radius)
						bootsblood.Push(pool);
				}
			}
		}
		if (bootsblood.Size() > 12 && (level.time % 6 == 0) && pspeed >= 2) {
			drip = true;
			let print = BD_BloodyFootPrint(Spawn("BD_BloodyFootPrint",(owner.pos.x,owner.pos.y,owner.floorz)));
			if (print) {
				print.side = side;
				print.angle = owner.angle;
				if (bootsblood[bootsBlood.Size()-1] != null)
					print.translation = bootsblood[bootsBlood.Size()-1].BloodTranslation;
				side = !side;
			}
		}
		else if (bootsblood.Size() == 0)
			drip = false;
	}
}

Class BD_BloodyFootPrint : BD_BaseBloodPool {
	bool side;
	Default {
		BD_BaseBloodPool.RandomAngle false;
		renderstyle 'Translucent';
		alpha 1.0;
		radius 4;
		scale 1;
	}
	override void Tick() {
		super.Tick();
		if (!isFrozen())
			A_FadeOut(0.001);
	}
	states {
	Spawn:
		0000 A -1 NoDelay {
			if (side)
				frame = 1;				
		}
		stop;
	}
}