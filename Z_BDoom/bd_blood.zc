Class BloodGeneral : DebrisGeneral abstract
{
string bloodfloor;
string bloodceiling;
name bcolor;

static const name bsprite[] = { "YBL7","YBL8","YBL9" };
Default {
	DebrisGeneral.sfxtype "blood";
	+PUFFGETSOWNER
	-NOGRAVITY
	+ROLLSPRITE
	+DONTSPLASH
	gravity 0.7;
	renderstyle "Translucent";
	seesound "none";
	Deathsound "none";
	decal "none";
	height 1;
	}
bool CheckLandingSize (double cradius = 0, bool checkceiling = false) {
	int aangle = 0;
	if (checkceiling)
		return (GetZAt(cradius,0,0,GZF_ABSOLUTEANG|GZF_CEILING,AAPTR_DEFAULT) > ceilingz
			||	GetZAt(cradius,0,45,GZF_ABSOLUTEANG|GZF_CEILING,AAPTR_DEFAULT) > ceilingz
			||	GetZAt(cradius,0,90,GZF_ABSOLUTEANG|GZF_CEILING,AAPTR_DEFAULT) > ceilingz
			||	GetZAt(cradius,0,135,GZF_ABSOLUTEANG|GZF_CEILING,AAPTR_DEFAULT) > ceilingz
			||	GetZAt(cradius,0,180,GZF_ABSOLUTEANG|GZF_CEILING,AAPTR_DEFAULT) > ceilingz
			||	GetZAt(cradius,0,225,GZF_ABSOLUTEANG|GZF_CEILING,AAPTR_DEFAULT) > ceilingz
			||	GetZAt(cradius,0,270,GZF_ABSOLUTEANG|GZF_CEILING,AAPTR_DEFAULT) > ceilingz
			||	GetZAt(cradius,0,315,GZF_ABSOLUTEANG|GZF_CEILING,AAPTR_DEFAULT) > ceilingz );
	else
		return (GetZAt(cradius,0,0,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
			||	GetZAt(cradius,0,45,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
			||	GetZAt(cradius,0,90,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
			||	GetZAt(cradius,0,135,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
			||	GetZAt(cradius,0,180,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
			||	GetZAt(cradius,0,225,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
			||	GetZAt(cradius,0,270,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
			||	GetZAt(cradius,0,315,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz );
	}
override void Tick() {
	Super.Tick();
	//if for some reason the switch into raising animation failed, just fade out the gib
	if (FindState("Raise") && target && (target is "BDoomMonster") && target.InStateSequence(target.curstate,target.FindState("Raise")) && !InStateSequence(curstate,FindState("Raise")))
		A_FadeOut(0.05);
	}
states
	{
	LoadSprites:
		2PLT ABCDEFGHIJKLMNOPQ 0;
		YBL7 ABCDEFGHIJKLMNOPQRS 0;
		YBL8 ABCDEFGHIJKLMNOPQRS 0;
		YBL9 ABCDEFGHIJKLMNOPQRS 0;
		stop;
	Fade:
		#### # 1 A_FadeOut(0.02);
		loop;
	}
}


Class BD_Blood : BloodGeneral replaces Blood
{
double restscale;
Default {
	scale 0.35;
	gravity 0.5;
	renderstyle "Translucent";
	alpha 0.8;
	height 8;
	deathsound "none";
	}
/* I'm only doing the crap below because we don't have direct control over decals, so while I can translate the blood particles created by enemies, I can't translate the decals created by said blood particles (only the decals automatically created behind monsters are translated). Hence the ugly math.
I could just use BloodTranslation directly for all cases, but that makes the sprite have only one color which diminishes the details (if blood if red, for example, it doesn't mean that the whole image is red, it'll have black and white parts as well). Hence I use manual translation for blue and green and then BloodTranslation for any other color (if it's used).
 */
override void PostBeginPlay() {
	if (!bdoom_blood || !target){
		destroy();
		return;
		}
	if (target is "BDoomMonster") {
		let trg = BDoomMonster(target);
		if (trg.burning){
			destroy();
			return;
			}
		}
	if (target.bloodcolor) {
	//obvious green prevalence
		if (target.bloodcolor.G > 4*(target.bloodcolor.R  + target.bloodcolor.B)) {
			bcolor = 'green';
			A_SetTranslation("GreenBlood");
			}
	 //obvious blue prevalence
		else if (target.bloodcolor.B > 4*(target.bloodcolor.R  + target.bloodcolor.G)) {
			bcolor = 'blue';
			A_SetTranslation("BlueBlood");
			}
	 //obvious red prevalence. bloodcolor = 0 means default bloodcolor (68 00 00 or specified in MAPINFO). If changed in MAPINFO, it'll be a mismatch, but whaddaya do
		else if (target.bloodcolor.R > 4*(target.bloodcolor.B  + target.bloodcolor.G) || target.bloodcolor == 0) {
			bcolor = 'red';
			}
	 //if played with another wad that contains very peculiar blood, like yellow or purple, translate sprites along with it. They won't spawn decals themselves.
		else
			Translation = target.BloodTranslation;
		}
	restscale = frandom(0.1,0.18);
	Super.PostBeginPlay();
	}

virtual void BD_BloodDecal()
	{
	if (bcolor == 'blue')
		A_SprayDecal("BloodSplatBlue",32);
	else if (bcolor == 'green')
		A_SprayDecal("BloodSplatGreen",32);
	else if (bcolor == 'red')
		A_SprayDecal("BloodSplatRed",32);
	//no way to transfer shade to decals, so blood of colors other than red/blue/green won't produce decals
	}
states
	{
	spawn:
		TNT1 AAA 0; //override hardcoded frame-skipping behavior for Blood
		TNT1 A 0 {
			A_FaceTarget(0,270,180,0);
			A_SetScale(scale.x*randompick(-1,1)*frandom(0.7,1.2),scale.y*randompick(-1,1)*frandom(0.7,1.2));
			roll = random(0,359);
			self.sprite = GetSpriteIndex(bsprite[random(0,2)]);
			return resolvestate("BloodDo");
			}
	BloodDo:
		#### ABCDEFGHIJKLMNOPQRS 1 {
			if (waterlevel > 0)
				return ResolveState("Water");
			return ResolveState(null);
			}
		stop;
	Death:
		TNT1 A 0 { 
			A_Stop();
			BD_BloodDecal();
			A_Scream();
			/*bloodfloor = TexMan.GetName(floorpic);
			bloodceiling = TexMan.GetName(ceilingpic);*/
			A_SetScale(restscale*randompick(1,-1),restscale*randompick(1,-1));
			if (pos.z >= ceilingz-10)
				return ResolveState("CeilingSplat");		
			
			if (floorpic == skyflatnum || pos.z != floorz){
				destroy();
				return ResolveState(null);
				}
			if (CheckLandingSize(24))
				scale*=0.5;
			if	(CheckLandingSize(18))
				scale*=0.5;
			if	(CheckLandingSize(12))
				scale*=0.5;
			if	(CheckLandingSize(6)){
				destroy();
				return ResolveState(null);
				}
			A_QueueCorpse();
			bFLATSPRITE = true;
			bNOINTERACTION = true;			
			bMOVEWITHSECTOR = true;
			bRELATIVETOFLOOR = true;
			return ResolveState(null);
			}
		2PLT A 0 { self.frame = random(0,16); }

		#### # 1 {
			if (waterlevel > 0){
				destroy();
				return ResolveState(null);
				}
			if (CheckWater())
				return ResolveState("Water");
			if(target && target is "BDoomMonster" && target.InStateSequence(target.curstate,target.FindState("Raise")))
				return ResolveState("Raise");
			return ResolveState(null);
			}
		wait;
	CeilingSplat:
		TNT1 A 0 {
				//console.printf("ceiling");
			if (ceilingpic == skyflatnum) {
				destroy();
				return ResolveState(null);
				}
			if (CheckLandingSize(24,1))
				scale*=0.5;
			if (CheckLandingSize(18,1))
				scale*=0.5;
			if (CheckLandingSize(12,1))
				scale*=0.5;
			if (CheckLandingSize(6,1)) {
				destroy();
				return ResolveState(null);
				}
			A_SpawnItemEx("CeilingSplat",flags:SXF_TRANSFERTRANSLATION|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS);
			return ResolveState(null);
			}
		stop;
	Raise:
		TNT1 A 0 {
			sprite = GetSpriteIndex(bsprite[random(0,2)]);
			roll = random(0,359);
			FlyBack();
			}
		#### SRQPONMLKJIHGFEDCBA 1 {
			A_FadeOut(0.07);
			if (target &&  Distance3D(target) < 16) {
				destroy();
				return ResolveState(null);
				}
			return ResolveState(null);
			}
		stop;
	Water:
		#### # 1 {
			A_FadeOut(0.04);
			scale*=1.03;
			}
		loop;
	}
}

//resting version of blood drop without any animation
Class BD_BloodPool : BD_Blood
{
Default {
	+NOINTERACTION
	}
override void BD_BloodDecal() {}
states
	{
	spawn:
		TNT1 A 1 NoDelay {
			scale.x*= (randompick(-1,1)*frandom(0.7,1.2));
			scale.y*= (randompick(-1,1)*frandom(0.7,1.2));
			SetOrigin((pos.x,pos.y,floorz),0);
			return resolvestate("Death");
			}
		stop;
	}
}


Class CeilingSplat : BloodGeneral
{
Default {
	-MISSILE
	+NOGRAVITY
	+FLATSPRITE
	+NOINTERACTION
	-RELATIVETOFLOOR
	-MOVEWITHSECTOR
	height 1;
	}
states
	{
	Spawn:
		2PLT A 0 NoDelay {
			A_QueueCorpse();
			self.frame = random(0,16);
			}
		#### # 5 {
			SetOrigin((pos.x,pos.y,ceilingz-1),1);
			if(target && target is "BDoomMonster" && target.InStateSequence(target.curstate,target.FindState("Raise")))
				return ResolveState("Fade");
			A_SpawnitemEx("CeilingBloodDrop",frandom(-2.0,2.0),frandom(-2.0,2.0),-1.,0,0,0,0,SXF_TRANSFERTRANSLATION|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERRENDERSTYLE|SXF_NOPOINTERS,250);
			A_FadeTo(0.1,0.001,1);
			return ResolveState(null);
			}
		wait;
	}
}

Class CeilingBloodDrop : BloodGeneral
{
Default {
	+FORCEYBILLBOARD
	+NOINTERACTION
	-FLOORCLIP
	scale 0.1;
	alpha 0.75;
	}
states
	{
	spawn:
		TNT1 A 0 NoDelay A_SetScale(frandom(0.08,0.11)*randompick(-1,1),frandom(0.08,0.11));
		BLOD UVWWXXYYY 2;
		TNT1 A 0 { vel.z = -3.7; }
		BLOD ZZZZZZZZZZZZZZZZZZZZZZZZZ 1 {
			if (waterlevel > 0) {
				destroy();
				return ResolveState(null);
				}
			if (pos.z <= floorz)
				return ResolveState("Death");
			return ResolveState(null);
			}
		stop;
	Death:
		TNT1 A 0 {
			vel.z = 0.0;
			SetOrigin((pos.x,pos.y,floorz+1),0);
			scale.x = frandom(0.22,0.25)*randompick(-1,1);
			}
		BLOD GHIJK 3;
		stop;
	}
}


Class AniBloodPool : BloodGeneral
{
bool instant; //if true, the blood pool will instantly go through all the phases and reach the required size â€” for decorative purposes such as Heart Column, where animation is unneeded, but checking for overhand may still important
double psize;
Default {
	+NOINTERACTION
	+RELATIVETOFLOOR
	+MOVEWITHSECTOR
	-MISSILE
	+FLATSPRITE
	height 1;
	renderstyle "Normal";
	//Alpha 0.9;
	decal "none";
	scale 0.2;
	}
override void PostBeginPlay() {
	if (waterlevel > 0) {
		destroy();
		return;
		}
	double pscale;
	pscale = frandom(0.23,0.35);
	psize = pscale*22;
	A_SetScale(pscale*frandom(0.8,1.1)*randompick(-1,1),pscale*frandom(0.8,1.1)*randompick(-1,1));


	if (target && target.bloodcolor) {
		if (target.bloodcolor.G > 4*(target.bloodcolor.R  + target.bloodcolor.B))
			A_SetTranslation("GreenBlood");
		else if (target.bloodcolor.B > 4*(target.bloodcolor.R  + target.bloodcolor.G))
			A_SetTranslation("BlueBlood");
		else if (target.bloodcolor.R > 4*(target.bloodcolor.B  + target.bloodcolor.G) || target.bloodcolor == 0)
			bcolor = 'red';
		else
			Translation = target.BloodTranslation;
		}
		
	Super.PostBeginPlay();
	}	
override void Tick () {
	super.Tick();
	if (CheckWater())
		A_FadeOut(0.01);
	}
bool InvalidFloor() {
	return (GetZAt(psize,0,0,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
		||	GetZAt(psize,0,45,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
		||	GetZAt(psize,0,90,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
		||	GetZAt(psize,0,135,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
		||	GetZAt(psize,0,180,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
		||	GetZAt(psize,0,225,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
		||	GetZAt(psize,0,270,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz
		||	GetZAt(psize,0,315,GZF_ABSOLUTEANG,AAPTR_DEFAULT) < floorz );
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			if (InvalidFloor()) {
				destroy();
				return ResolveState(null);
				}
			SetOrigin((pos.x,pos.y,floorz+0.5),0);
			A_QueueCorpse();
			return A_Jump(128,"Spawn1");
			}
		0000 ABCDEFGHI 2 {
			if (instant)
				A_SetTics(0);
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=2.0;
			return ResolveState(null);
			}
		0000 JKLMNOPQRSTU 2 {
			if (instant)
				A_SetTics(0);
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=1.2;
			return ResolveState(null);
			}
		0000 VWXYZ 3 {
			if (instant)
				A_SetTics(0);
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=1.0;
			return ResolveState(null);
			}
		0001 ABCD 3 {
			if (instant)
				A_SetTics(0);
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=1.0;
			return ResolveState(null);
			}
		goto rest;
	Spawn1:
		1000 ABCDEFGHI 2 {
			if (instant)
				A_SetTics(0);
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=2.0;
			return ResolveState(null);
			}
		1000 JKLMNOPQRSTU 2 {
			if (instant)
				A_SetTics(0);
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=1.2;
			return ResolveState(null);
			}
		1000 VWXYZ 3 {
			if (instant)
				A_SetTics(0);
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=1.0;
			return ResolveState(null);
			}
		1001 ABCD 3 {
			if (instant)
				A_SetTics(0);
			if (InvalidFloor())
				return ResolveState("Rest");
			if (Checkwater())
				A_FadeOut(0.01);
			psize+=1.0;
			return ResolveState(null);
			}
		goto rest;
	Rest:
		#### # 1 {
			if (waterlevel > 0) {
				destroy();
				return ResolveState(null);
				}
			if (Checkwater())
				A_FadeOut(0.01);
			if(target && target is "BDoomMonster" && target.InStateSequence(target.curstate,target.FindState("Raise")))
				return ResolveState("Fade");
			return ResolveState(null);
			}
		wait;
	}
}



//decorative blood drop for gory decorations
Class DecorBloodDrop : CeilingBloodDrop
{
Default {
	scale 0.15;
	}
states
	{
	spawn:
		TNT1 A 0 NoDelay A_SetScale(scale.x*randompick(-1,1)*frandom(1.0,1.3),scale.y);
		BLOD XYZ 3;
		TNT1 A 0 { vel.z = -3.7; }
		BLOD ZZZZZZZZZZZZZZZZZZZZZZZZZ 1 {
			if (waterlevel > 0) {
				destroy();
				return ResolveState(null);
				}
			if (pos.z <= floorz)
				return ResolveState("Death");
			return ResolveState(null);
			}
		stop;
	}
}

//for projectile bullets
Class BD_BloodSplatter : BD_Blood replaces BloodSplatter {}

//thinner and faster version for spurts
Class BloodSpray : BD_Blood
{
Default {
	+THRUACTORS
	scale 0.12;
	gravity 0.5;
	alpha 0.7;
	}
override void BD_BloodDecal()
	{
	if (bcolor == 'blue')
		A_SprayDecal("BloodSprayBlue",32);
	else if (bcolor == 'green')
		A_SprayDecal("BloodSprayGreen",32);
	else if (bcolor == 'red')
		A_SprayDecal("BloodSprayRed",32);
	}
states
	{
	spawn:
		TNT1 A 0 NoDelay {
			A_SetGravity(frandom(0.4,0.6));
			A_SetScale(scale.x*randompick(-1,1),scale.y*randompick(-1,1));
			roll = random(0,359);
			self.sprite = GetSpriteIndex(bsprite[random(0,2)]);
			}
	BloodDo:
		#### ABCDEFGHIJKLMNOPQRS 1 {
			if (waterlevel > 0)
				return ResolveState("Fade");
			A_FadeOut(0.05);
			return ResolveState(null);
			}
		stop;
	}
}

//long "arterial" spurts
Class BloodSpurt : BloodGeneral replaces AxeBlood
{
double bpitch;
double pitchchange;
double bspeed;
string sprayactor;
Default {
	+NOGRAVITY
	+NOINTERACTION
	radius 1;
	height 1;
	}
override void PostBeginPlay() {
	if (waterlevel > 0) {
		destroy();
		return;
		}
	super.PostBeginPlay();
	bpitch = frandom(1.0,5.0);
	bspeed = frandom(4.0,6.0);
	pitchchange = 0.5;
	sprayactor = "BloodSpray";
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay A_FaceTarget(0,270,0,0);
		TNT1 A 0 A_Jump(256,random(1,5));
		TNT1 AAAAAAAAA 1 { 
			A_SpawnItemEx(sprayactor,0,0,0,	bspeed+frandom(0.0,1.2),0,bpitch,	random(175,185), SXF_TRANSFERPOINTERS);
			bpitch+=pitchchange;
			}
		stop;
	}
}

Class NeckSpurt : BloodSpurt
{
override void PostBeginPlay() {
	if (waterlevel > 0) {
		destroy();
		return;
		}
	super.PostBeginPlay();
	bpitch = frandom(2.0,5.5);
	bspeed = frandom(1.0,2.5);
	sprayactor = "NeckSpray";
	pitchchange = 0.0;
	}
}

Class FrontalSpurt : BloodSpurt
{
override void PostBeginPlay() {
	if (waterlevel > 0) {
		destroy();
		return;
		}
	super.PostBeginPlay();
	bpitch = frandom(0.3,1.2);
	bspeed = frandom(3.0,4.5);
	sprayactor = "NeckSpray";
	pitchchange = 0.0;
	}
}

//shorter and smaller version of bloodspurt
Class NeckSpray : SmallDebris
{
Default {
	smalldebris.dgravity 0.5;
	scale 0.12;
	alpha 0.7;
	}
static const string bsprite[] =	{ "YBL7","YBL8","YBL9" };
states
	{
	spawn:
		TNT1 A 0 NoDelay {
			A_SetScale(scale.x*randompick(-1,1),scale.y*randompick(-1,1));
			roll = random(0,359);
			self.sprite = GetSpriteIndex(bsprite[random(0,2)]);
			}
		#### ABCDEFGHIJKLMNOPQRS 2 {
			A_FadeOut(0.07);
			return ResolveState(null);
			}
		stop;
	}
}


//large quickly disappearing spray creating a "bloody mist" upon xdeath
Class BFountainSpray : BD_Blood
{
Default {
	-MISSILE
	+NOINTERACTION
	scale 0.45;
	renderstyle "Translucent";
	alpha 0.6;
	}
states
	{
	BloodDo:
		#### ABCDEFGHIJKKLLMMNNOOOPPPQQQRRRSSS 1 {
			if (waterlevel > 0) {
				destroy();
				return ResolveState(null);
				}
			vel.z = clamp(vel.z - 0.3,-2.0,10.0);
			a_Setscale(clamp(scale.x * 1.05,0.0,1.0),clamp(scale.y * 1.05,0.0,1.0));
			a_fadeout(0.02);
			return ResolveState(null);
			}
		stop;
	}
}