Class BD_Chaingun : BDoomWeapon //replaces Chaingun
{
double HeatStacks;
double HeatDecay;
bool RifleSights;
bool DryReload;
int tfired;
Default
	{
	Tag "$TAG_CHAINGUN";
	weapon.selectionorder 70;
	Weapon.AmmoType		"Clip";
	Weapon.AmmoUse		1;
	Weapon.AmmoGive		0;
	Weapon.AmmoType2	"Clip";
	Weapon.AmmoUse2		1;
	Weapon.AmmoGive2	20;
	weapon.slotnumber	4;
	}
override string PickupMessage ()
	{
	if(bdoom_weapons == 2) 
		return "You got the Machine Gun!"; 
	else
		return "$GOTCHAINGUN"; 
	}
override string GetObituary (Actor victim, Actor inflictor, Name mod, bool playerattack)
    {
	if(bdoom_weapons == 2) 
		return "%o was penetrated by %k's assault rifle."; 
	else 
		return "$OB_MPCHAINGUN"; 
	}
override void Tick()
	{
	If (Owner)	
		return;
	else
		{
		if(bdoom_weapons == 2)
			pickupsound = "Mweapons/rifle/clipin";
		else
			pickupsound = "pickups/chaingun"; 
		}
	Super.Tick();
	}
override void DoEffect()
	{
	Super.DoEffect();
	if (!owner)
		return;
	if(bdoom_weapons == 2)
		{
		Ammo1 = ammo(Owner.FindInventory("RifleClip") );
		ammouse1 = 1;
		ammouse2 = 1;
		if (RifleSights)
			bNOAUTOFIRE = true;
		else	
			bNOAUTOFIRE = false;
		bAMMO_OPTIONAL = true;
		if (!ammo1)
			Owner.GiveInventory("RifleClip",40);
		}
	else
		{
		Ammo1 = ammo(Owner.FindInventory("Clip"));
		ammouse1 = 1;
		Ammo2 = ammo(Owner.FindInventory("Clip"));
		ammouse2 = 1;
		bNOAUTOFIRE = false;
		bAMMO_OPTIONAL = false;
		}
	if (owner.player.readyweapon != self || bdoom_weapons != 2) { //if not using Modern Assault Rifle
		tfired = 0;							//set spread value to 0
		RifleSights = false;				//unset ADS
		}
	if (owner.player.readyweapon != self || bdoom_weapons != 1)
		HeatStacks = 0;						//reset heatstacks if not reset yet
		
	let s = owner.player.FindPsprite(PSP_Weapon);
	let chg = BD_Chaingun(owner.player.ReadyWeapon);
	if (!s || !chg)
		return;
	let fl = owner.player.FindPsprite(5);
	if (bdoom_weapons == 1 && HeatStacks > 0 )
		owner.player.SetPSprite(5,FindState("FlashHeated"));
	else
		owner.player.SetPSprite(5,null);
	
	//crosshair and bob handling for ADS
	if ((InStateSequence(s.curstate, FindState("ReadySights"))	||	
		InStateSequence(s.curstate, FindState("FireSights"))) 	){
		chg.crosshair = 99; //if ADS used, disable crosshair and set very little bob
		BobRangeX = 0.08;
		BobRangeY = 0.1;
		BobStyle = 5;
		BobSpeed = 2.0;
		}
	else { 
		chg.crosshair = 0; //if ADS isn't used, set crosshair to default
		if (bdoom_weapons == 2) { //and set bob to either default Modern value...
			BobRangeX = 0.2;
			BobRangeY = 0.2;
			BobStyle = 5;
			BobSpeed = 2.0;
			}
		else { //... or the default non-Modern value
			BobRangeX = 1.0;
			BobRangeY = 1.0;
			BobStyle = 0;
			BobSpeed = 1.0;
			}
		}
	}
states
	{
	Spawn:
		MGUN A 1 NoDelay {
			if (bdoom_weapons == 2) {
				self.sprite = GetSpriteIndex("RIFN");
				self.frame = 25;
				A_SetScale(0.75);
				}
			else {
				self.sprite = GetSpriteIndex("MGUN");
				self.frame = 0;
				A_SetScale(1.0);
				}
			}
		loop;
		RIFN Z 1;
	Select:
		TNT1 A 0 { 
			A_StopSound(5);			
			if (bdoom_weapons == 2)
				return ResolveState("Select.Modern");
			If(bdoom_weapons == 1) 
				A_PlaySound("weapons/chaingun/draw");
			return ResolveState(null);
			}
		MGGS ABCDEF 1 A_WeaponReady(WRF_NOFIRE);
		goto ready;
	Deselect:
		TNT1 A 0 { 
			A_StopSound(5); 
			if (bdoom_weapons == 2)
				return ResolveState("Deselect.Modern");
			speed = default.speed;
			A_ZoomFactor(1.0);
			return ResolveState(null);
			}
		MGGG A 1 A_Lower();
		wait;
	Ready:
		MGGG A 1 {
			if (bdoom_weapons == 2)
				return ResolveState("Ready.Modern");
			speed = default.speed;
			A_ZoomFactor(1.0); 
			if (bdoom_weapons == 0)
				A_WeaponReady(WRF_NOSECONDARY);
			else 
				A_WeaponReady();
			return ResolveState(null);
			}
		loop;
	BarrelSmoke:
		TNT1 A 12;
		TNT1 AAAAAAAAAAAAAAA 	random(1,2) {
			let s = player.FindPSprite(PSP_Weapon);
			if (s && (invoker.InStateSequence(s.curstate,invoker.FindState("Ready"))			||
				invoker.InStateSequence(s.curstate,invoker.FindState("Ready.Modern")))	)
				A_Eject("BarrelSmoke",cos(pitch)*8,0,2,	frandom(0.015,-0.015),frandom(0.015,-0.015),0.1);
			}
		stop;
	BarrelSmokeFull:
		TNT1 A 4;
		TNT1 AAAAAAAAAAAAAAA 	random(1,2) {
			let s = player.FindPSprite(PSP_Weapon);
			if (s && (invoker.InStateSequence(s.curstate,invoker.FindState("Ready"))			||
				invoker.InStateSequence(s.curstate,invoker.FindState("Ready.Modern")))	) {
				A_Eject("BarrelSmoke",cos(pitch)*8,0,	2,	frandom(0.015,-0.015),frandom(0.015,-0.015),0.1);
				A_Eject("BarrelSmoke",cos(pitch)*8,1.2,	3,	frandom(0.015,-0.015),frandom(0.015,-0.015),0.1);
				A_Eject("BarrelSmoke",cos(pitch)*8,-1.2,3,	frandom(0.015,-0.015),frandom(0.015,-0.015),0.1);
				A_Eject("BarrelSmoke",cos(pitch)*8,0,	4,	frandom(0.015,-0.015),frandom(0.015,-0.015),0.1);
				}
			}
		stop;
	Fire:
		TNT1 A 0 A_JumpIf(bdoom_weapons==2,"Fire.Modern");
		MGGG A 1 {
			A_WeaponOffset(0.0,35.0,WOF_INTERPOLATE);
			a_gunflash();
			if (bdoom_weapons == 0)
				A_PlaySound("weapons/chngun");
			else 
				A_PlaySound("weapons/chaingun/fire");
			If(Bdoom_tracers)
				A_FireBullets (5.6, 0, 1, 5, "EnBulletPuff",FBF_USEAMMO|FBF_NORANDOMPUFFZ,0,"BulletTracer",0,0) ;
			else
				A_FireBullets (5.6, 0, 1, 5, "EnBulletPuff",FBF_NORANDOMPUFFZ);
			}
		MGGG B 1;
		TNT1 A 0 { 
			if( bdoom_debris)
				A_Eject("ChaingunCasing",20,frandom(7,8),10,frandom(0,2),FRandom(3.5,4.5),frandom(4,5));
			}
		MGGG CD 1;
		TNT1 A 0 A_CheckReload();
		
		MGGG A 1 {
			a_gunflash();
			if (bdoom_weapons == 0)
				A_PlaySound("weapons/chngun");
			else 
				A_PlaySound("weapons/chaingun/fire");
			If(Bdoom_tracers)
				A_FireBullets (5.6, 0, 1, 5, "EnBulletPuff",FBF_USEAMMO|FBF_NORANDOMPUFFZ,0,"BulletTracer",0,0) ;
			else
				A_FireBullets (5.6, 0, 1, 5, "EnBulletPuff",FBF_NORANDOMPUFFZ);
			}
		MGGG B 1;
		TNT1 A 0 { 
			if( bdoom_debris)
				A_Eject("ChaingunCasing",20,frandom(7,8),10,frandom(0,2),FRandom(3.5,4.5),frandom(4,5));
			}
		MGGG CD 1;
		TNT1 A 0 A_refire();
		TNT1 A 0 { 
			if (Bdoom_debris == 1)
				A_Overlay(20,"BarrelSmoke");
			}
		MGGG ABCD 1 {
			A_WeaponReady(WRF_NOSECONDARY);
			A_WeaponOffset(0.0,-0.75,WOF_ADD);
			}
		MGGG ABCDAABBCCDD 1 A_WeaponReady(WRF_NOSECONDARY);
		goto ready;
	Flash:
		MGGF L 1 bright  {
			A_Light1();
			let s = Player.FindPSprite(PSP_FLASH);
			if (GetCVAR("bdoom_muzzle") == true)
				s.sprite = GetSpriteIndex("MGGL");
			s.frame = random(0,5);
			}
		goto lightdone;
		MGGL ABCDEF 0;
		stop;
	FlashHeated:
		MGGH B 1 bright {
			A_OverlayFlags(5,PSPF_Alpha|PSPF_FORCEALPHA,true);
			A_OverlayAlpha(5,invoker.HeatStacks*0.0165);
			}
		stop;
	AltFire:
		TNT1 A 0 {
			if (bdoom_weapons == 2)
				return ResolveState("AltFire.Modern");
			A_playsound("weapons/chaingun/start");
			return ResolveState(null);
			}
		MGGG ABCDABCD 2;
		MGGG ABCDABCD 1;
		TNT1 A 0 A_playsound("weapons/chaingun/spin",5,1.0,true);
		MGGG ACACACACAC 1;
		
		MGGG A 1 { 
			A_WeaponOffset(0.0,35.0,WOF_INTERPOLATE);
			invoker.HeatStacks++; 
			a_gunflash();
			A_PlaySound("weapons/chaingun/fire");
			If(Bdoom_tracers)
				A_FireBullets(8,3, -1, 5, "EnBulletPuff",FBF_USEAMMO|FBF_NORANDOMPUFFZ,0,"BulletTracer",0,0) ;
			else
				A_FireBullets(8,3, -1, 5, "EnBulletPuff",FBF_NORANDOMPUFFZ);
				}
		MGGG C 1 { 
			if(bdoom_debris)
				A_Eject("ChaingunCasing",20,frandom(7,8),10,frandom(0,2),FRandom(3.5,4.5),frandom(4,5));
			}
		TNT1 A 0 A_CheckReload();		
		MGGG A 1 { 
			invoker.HeatStacks++; 
			a_gunflash();
			A_PlaySound("weapons/chaingun/fire");
			If(Bdoom_tracers)
				A_FireBullets(8,3, -1, 5, "EnBulletPuff",FBF_USEAMMO|FBF_NORANDOMPUFFZ,0,"BulletTracer",0,0) ;
			else
				A_FireBullets(8,3, -1, 5, "EnBulletPuff",FBF_NORANDOMPUFFZ);
			}
		MGGG C 1 { 
			if( bdoom_debris)
				A_Eject("ChaingunCasing",20,frandom(7,8),10,frandom(0,2),FRandom(3.5,4.5),frandom(4,5));
			}
	AltHold:
		TNT1 A 0 A_JumpIf(bdoom_weapons==2,"AltFire.Modern");
		TNT1 A 0 A_CheckReload();
		MGGG A 1 { 
			A_WeaponOffset(0.0,35.0,WOF_INTERPOLATE);
			invoker.HeatStacks++; 
			a_gunflash();
			A_PlaySound("weapons/chaingun/fire");
			If(Bdoom_tracers)
				A_FireBullets(8,3, -1, 5, "EnBulletPuff",FBF_USEAMMO|FBF_NORANDOMPUFFZ,0,"BulletTracer",0,0) ;
			else
				A_FireBullets(8,3, -1, 5, "EnBulletPuff",FBF_NORANDOMPUFFZ);
			}	
		MGGG C 1 { 
				if (Bdoom_debris == 1)
					A_Eject("ChaingunCasing",20,frandom(7,8),10,frandom(0,2),FRandom(3.5,4.5),frandom(4,5));
				}
		TNT1 A 0 {
			if (invoker.HeatStacks < 60)
				A_ReFire("AltHold"); 
			}
	AltFireEnd:
		TNT1 A 0 {
			A_playsound("weapons/chaingun/stop",5);
			invoker.HeatDecay = invoker.heatStacks * 0.05;
			}
		MGGG ABCDA 1 {
			invoker.heatStacks -= invoker.Heatdecay;
			A_WeaponOffset(0.0,-0.6,WOF_ADD);
			If(bdoom_debris && invoker.HeatStacks >= 60)
				A_SpawnItemEx("WeaponSmoke",cos(pitch)*25,random(-3,3),sin(-pitch)*25+random(33,37),		0,0,frandom(0.2,0.4),0);
			}
		MGGG BCDABC 2 {
			invoker.heatStacks -= invoker.Heatdecay;
			If(bdoom_debris && invoker.HeatStacks >= 60)
				A_SpawnItemEx("WeaponSmoke",cos(pitch)*25,random(-3,3),sin(-pitch)*25+random(33,37),		0,0,frandom(0.2,0.4),0);
			}
		MGGG DABCD 3 {
			invoker.heatStacks -= invoker.Heatdecay;
			If(bdoom_debris && invoker.HeatStacks >= 60)
				A_SpawnItemEx("WeaponSmoke",cos(pitch)*25,random(-3,3),sin(-pitch)*25+random(33,37),		0,0,frandom(0.2,0.4),0);
			}
		TNT1 A 0 {
			If(bdoom_debris)
				A_Overlay(20,"BarrelSmokeFull");
			}
		TNT1 A 0 {
			A_ClearRefire();
			if (invoker.HeatStacks == 0)
				return ResolveState("Ready");
			return ResolveState(null);
			}
		MGGG ABCD 4 {
			invoker.heatStacks -= invoker.Heatdecay;
			If(bdoom_debris)
				A_SpawnItemEx("WeaponSmoke",cos(pitch)*25,random(-3,3),sin(-pitch)*25+random(33,37),		0,0,frandom(0.2,0.4),0);
			A_WeaponReady(WRF_NOFIRE);
			}
		TNT1 A 0 {
			If(bdoom_debris)
				A_Overlay(20,"BarrelSmokeFull");
			}
		goto ready;

	//MODERN
	Select.Modern:
		TNT1 A 0 {
			A_PlaySound("MWeapons/rifle/select");
			A_Weaponoffset(30.0,67.0);
			}
		RIFN CCCCCBA 1 {
			if (CountInv("RifleClip") < 1) {
				let s = player.FindPSprite(PSP_Weapon);
				if (s)
					s.frame = 3;
				}
			A_WeaponOffset(-4.0,-5.0,WOF_ADD);
			A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
			}
		goto ready;
	Deselect.Modern:
		TNT1 A 0 { 
			if (!invoker.RifleSights)
				return ResolveState("Deselect1.Modern");
			speed = default.speed;
			A_ZoomFactor(1.0);
			return ResolveState(null);
			}
		RIFA DCBA 2;
	Deselect1.Modern:
		RIFN A 1 {			
			if (Countinv("RifleClip") < 1) {
				let po = player.FindPSprite (PSP_Weapon);
				po.frame = 3;
				}
			 A_Lower(12);
			}
		wait;
		RIFN D 0;
		stop;
	Ready.Modern:
		RIFN A 1 {
			let s = player.findPSprite(PSP_Weapon);
			if (s) {
				if (invoker.riflesights) 
					return ResolveState("ReadySights");	
				else if (Countinv("RifleClip") < 1)
					s.frame = 3;
				}
			BD_WeaponReady(true);
			return ResolveState(null);
			}
		goto ready;
	ReadySights:
		RIFS A 1 {
			BD_WeaponReady(1,1,0);
			speed = default.speed * 0.8;
			A_ZoomFactor(1.3);
			}
		goto ready;		
	BarrelSmoke.Modern:
		TNT1 A 8;
		TNT1 AAAAAAAAAAAAAAA 	random(1,2) {
			let s = player.FindPSprite(PSP_Weapon);
			if (s && (invoker.InStateSequence(s.curstate,invoker.FindState("Ready"))			||
				invoker.InStateSequence(s.curstate,invoker.FindState("Ready.Modern")))	)
				A_Eject("BarrelSmoke",cos(pitch)*14,0,3,	frandom(0.015,-0.015),frandom(0.015,-0.015),0.1);
			}
		stop;
	BarrelSmoke.Sights:
		TNT1 A 8;
		TNT1 AAAAAAAAAAAAAAA 	random(1,2) {
			let s = player.FindPSprite(PSP_Weapon);
			if (s && (invoker.InStateSequence(s.curstate,invoker.FindState("ReadySights"))))
				A_Eject("BarrelSmoke",cos(pitch)*7,0,1,	frandom(0.015,-0.015),frandom(0.015,-0.015),0.1);
			}
		stop;
	Fire.Modern:
		RIFN A 1 {
			if (CountInv("RifleClip") < 1)
				return ResolveState("DryReload");
			if (invoker.riflesights)
				return ResolveState("FireSights");
			A_gunflash("Flash.Modern");
			A_PlaySound("Mweapons/rifle/fire");
			A_WeaponOffset(0.0,35.0,WOF_INTERPOLATE);
			A_FireBullets(1.5 + (invoker.tfired * 0.15),1.0 + (invoker.tfired * 0.15),-1,0,"NullPuff",FBF_USEAMMO|FBF_NORANDOMPUFFZ,0,"BD_RifleBullet",0,0);
			invoker.tfired = clamp(invoker.tfired+1,0,9);
			return ResolveState(null);
			}
		RIFN B 1 {
			A_WeaponOffset(frandom(-0.8,0.8),34.0,WOF_INTERPOLATE);
			A_SetPitch(pitch - frandom(0.37,0.42),SPF_INTERPOLATE);
			}
		
		RIFN CD 1 A_WeaponOffset(frandom(-0.4,0.4),33.0,WOF_INTERPOLATE);
		RIFN E 1 {
			A_WeaponOffset(0,32.0,WOF_INTERPOLATE);
			if (CountInv("RifleClip") < 1) {
				let s = Player.FindPsprite(PSP_Weapon);
				if (s)
					s.frame = 3;
				}
			}
		
		TNT1 A 0 {
			If(Bdoom_debris == 1) {
				A_Eject("ChaingunCasing",20,frandom(2,3),frandom(9,10),frandom(0,2),FRandom(5.5,7),frandom(2,2.5));
				A_overlay(20,"BarrelSmoke.Modern");
				}
			}		
		TNT1 A 0 A_ReFire("Fire.Modern");
		RIFN A 2 {
			invoker.tfired = 0;
			if (CountInv("RifleClip") < 1) {
				let s = Player.FindPsprite(PSP_Weapon);
				if (s)
					s.frame = 3;
				}
			}
		goto ready;
	FireSights:
		RIFS A 1 {
			A_WeaponOffset(0.0,34.0,WOF_INTERPOLATE);
			let plr = PlayerPawn(self);
			plr.AttackZOffset = 11;
			A_FireBullets(0.4,0.15,-1,0,"NullPuff",FBF_USEAMMO|FBF_NORANDOMPUFFZ,0,"BD_RifleBullet",0,0);
			A_gunflash("Flash.Modern");
			A_PlaySound("Mweapons/rifle/fire");
			plr.AttackZOffset = 8;
			}
		RIFS C 1 A_SetPitch(pitch - 0.3,SPF_INTERPOLATE);
		TNT1 A 0 { 
			If(Bdoom_debris == 1) {
				A_Eject("ChaingunCasing",20,frandom(4,5),4,frandom(0,2),FRandom(5.5,7),frandom(2,2.5));
				A_overlay(20,"BarrelSmoke.Sights");
				}
			}
		RIFS C 1;
		RIFS B 1 A_WeaponOffset(0.0,34.0,WOF_INTERPOLATE);
		RIFS B 1 A_WeaponOffset(0.0,32.0,WOF_INTERPOLATE);
		RIFS A 1 A_WeaponOffset(0.0,34.0,WOF_INTERPOLATE);
		RIFS A 1 A_WeaponOffset(0.0,32.0,WOF_INTERPOLATE);
		goto ready;
	DryReload:
		RIFN D 12 {
			A_ClearRefire();
			invoker.DryReload = true;
			A_PlaySound("Mweapons/dry",7);
			let po = player.FindPSprite(psp_weapon);
			if (po && invoker.RifleSights) {
				po.sprite = GetSpriteIndex("RIFS");
				po.frame = 0;
				}
			}
		goto reload;
		RIFS A 0;
	Reload:
		TNT1 A 0 { 
			A_ClearRefire();
			if (CountINv("Clip") == 0)
				return ResolveState("Ready");
			if (!invoker.RifleSights)
				Return ResolveState("ReloadDo");
			else
				{
				invoker.RifleSights = false;
				speed = default.speed;
				A_ZoomFactor(1.0);
				}
			return ResolveState(null);
			}
		RIFA DCBA 2;
	ReloadDo:
		RIFR ABCDE 2;
		RIFR F 8 A_PlaySound("Mweapons/rifle/clipout");
		RIFR GH 2;
		RIFR I 5;
		RIFR JKL 2;
		TNT1 A 0 BD_Reload();
		RIFR M 1 A_PlaySound("Mweapons/rifle/clipin");
		RIFR MMM 1 A_WeaponOffset(1,0,WOF_ADD);
		RIFR M 1 A_WeaponOffset(-1,0,WOF_ADD);
		RIFR NHGFEDC 2;
		TNT1 A 0 { 
			if (!invoker.DryReload)
				return ResolveState("ReloadEnd");
			A_PlaySound("Mweapons/rifle/cock");
			invoker.DryReload = false;
			return ResolveState(null);
			}
		RIFN DEAA 2;
		goto ready;
	ReloadEnd:
		RIFR BA 2;
		goto ready;
	AltFire.Modern:
		TNT1 A 0 { 
			A_ClearRefire();
			if (invoker.RifleSights)
				return ResolveState("UnsetSights");
			invoker.RifleSights = true; 
			A_PlaySound("Mweapons/rifle/aim",7);
			speed = default.speed * 0.8;
			A_ZoomFactor(1.3);
			return ResolveState(null);
			}
		RIFA ABCD 2;
		goto ReadySights;
	UnsetSights:
		TNT1 A 0 { 
			invoker.RifleSights = false;
			A_PlaySound("Mweapons/rifle/unaim",7);
			speed = default.speed;
			A_ZoomFactor(1.0);
			}
		RIFA DCBA 2;
		goto Ready;
	Flash.Modern:
		RIFL A 1 bright offset(0,34) {
			A_Light1();
			let fl = Player.FindPSprite(PSP_FLASH);
			if (fl) {					
				if (GetCVAR("bdoom_muzzle") == true) {
					if (invoker.rifleSights)
						fl.frame = random(4,7);
					else
						fl.frame = random(0,3);
					}
				else {
					if (invoker.rifleSights)
						fl.frame = random(12,15);
					else
						fl.frame = random(8,11);
					}
				}
			}
		TNT1 A 1 A_light1();
		goto lightdone;
		RIFL ABCDEFGHIJKLMNOP 0;
		stop;
	}
}

Class RifleClip : ammo
{
Default {
inventory.icon "HMAGZ0";
	inventory.amount 1;
	inventory.maxamount 40;
	ammo.backpackamount 0;
	ammo.backpackmaxamount 40;
	}
}