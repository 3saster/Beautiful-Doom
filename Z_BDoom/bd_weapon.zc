Class BDoomWeapon : Weapon abstract {
	protected int offsetTics; // current camera sway timer
	protected double maxOffsetTics; // starting point for the timer
	protected double offsetAngle; // the target angle for the camera sway
	protected double offsetPitch;
	protected double currentAngleOffset; // how much has the camera already been offset?
	protected double currentPitchOffset;
	property maxOffsetTics : maxOffsetTics;
	property offsetTics : offsetTics;
	protected int NonselTimer; //counts how long the weapon was deselected, used for automatic background reload
	protected int AutoReloadTime; //the value that NonselTimer is compared to
	property AutoReloadTime : AutoReloadTime;
	
	protected bool wasempty;

	Default {  
		BDoomWeapon.AutoReloadTime 60;
		BDoomWeapon.maxOffsetTics 1; //required default values for A_CameraSway. Otherwise it'll crash due to division by zero
		BDoomWeapon.offsetTics -1;
	}

	// Camera sway function by josh771
	action void A_CameraSway(double aoffset, double poffset, int tics) {
		invoker.offsetTics = tics;
		invoker.maxOffsetTics = tics;
		
		invoker.offsetAngle = aoffset;
		invoker.offsetPitch = poffset;

		invoker.currentAngleOffset = 0.0;
		invoker.currentPitchOffset = 0.0;
	}

	override void DoEffect() {
		Super.DoEffect();
		if (!owner || !owner.player)
			return;
		if (!bdoom_replaceweapons) {
			self.SelectionOrder = self.default.SelectionOrder+50000;
			return;
		}
		else
			self.SelectionOrder = self.default.SelectionOrder;
		//Console.Printf("x: %d, y: %d, z:%d", owner.pos.x,owner.pos.y,owner.pos.z);
		if(bdoom_weapons == 2) {
				BobRangeX = 0.2;
				BobRangeY = 0.2;
				BobStyle = 5;
				BobSpeed = 2.0;
				if (owner.player.readyweapon)
					owner.player.WeaponState |= WF_WEAPONBOBBING;
		}
		else {
				BobRangeX = 1.0;
				BobRangeY = 1.0;
				BobStyle = 0;
				BobSpeed = 1.0;
		}
		//CameraSway in action	
		if (offsetTics >= 0) {
			double phase = (offsetTics / maxOffsetTics) * 90.0;
			double newAngleOffset = (cos(phase) * offsetAngle);
			double newPitchOffset = (cos(phase) * offsetPitch);
			double finalAngle = (owner.angle - currentAngleOffset) + newAngleOffset;
			double finalPitch = (owner.pitch - currentPitchOffset) + newPitchOffset;
			currentAngleOffset = newAngleOffset;
			currentPitchOffset = newPitchOffset;
			owner.A_SetAngle(finalAngle, SPF_INTERPOLATE);
			owner.A_SetPitch(finalPitch, SPF_INTERPOLATE);
			offsetTics--;
		}
		
	//QUICK KICK
		//if player presses +user1 (default Q and Mouse4)
		if 	((owner.player.cmd.buttons & BT_USER1) && !(owner.player.oldbuttons & BT_USER1)) {
			let psp = owner.player.FindPSprite(PSP_WEAPON);
			let kicks = owner.player.FindPSprite(-10);
			if(!psp || bdoom_weapons != 2  || kicks) //if dead, or not Modern guns selected, or is already kicking
				return;
			//do this if used from Ready: will not only kick in overlay but will also move the weapon aside
			else if	(InStateSequence(psp.curstate, FindState("Ready.Modern")) )
				owner.player.setPSprite(PSP_Weapon,ResolveState("QKick"));
			//do this if used during Reload: weapon sprite will stay the same, kick will be shown and executed independently in overlay
			else if (InStateSequence(psp.curstate,FindState("Reload.Modern"))	||
					InStateSequence(psp.curstate, FindState("Reload"))			)
				owner.player.setPSprite(-10,FindState("QuickKick"));
		}
	//BACKGROUND RELOAD
		if (bdoom_weapons != 2 || !bdoom_autoreload || !ammo1 || !ammo2 || (ammo1 == ammo2))
			return;
		if (owner.player.readyweapon == self || ammo1.amount == ammo1.maxamount || ammo2.amount < 1) {
			NonselTimer = 0;
			return;
		}
		if (NonselTimer < AutoReloadTime)
			NonselTimer++;
		else {
			while (ammo2.amount > 0 && ammo1.amount < ammo1.maxamount)	{
				owner.TakeInventory(ammo2.GetClass(),1);
				owner.GiveInventory(ammo1.GetClass(),1);
			}
			Console.Printf("%s reloaded",GetTag());
		}
				
			
	}

	action void BD_WeaponReady (bool allowSecondary = false, bool allowReload = true, bool allowKick = true) {
		int flags = 0;
		if (allowReload && invoker.ammo1 && invoker.ammo2 && (invoker.ammo2 != invoker.ammo1) && (invoker.ammo2.amount > 0) && (invoker.ammo1.amount < invoker.ammo1.maxamount))
			flags |= WRF_ALLOWRELOAD;
		if (!allowSecondary)
			flags |= WRF_NOSECONDARY;
		if (allowKick)
			flags |= WRF_ALLOWUSER1;		
		A_WeaponReady (flags);
	}

	action void BD_Overlay(int layer = 0, statelabel statename = null, int flags = 0, double xofs = 0, double yofs = 0, int offsetflags = 0, int style = 0, double alpha = 0) {
		if (layer == 0 || !statename)
			return;
		A_Overlay(layer, statename, 0);
		if (flags != 0)
			A_OverlayFlags(layer, flags, true);
		if (xofs != 0 && yofs != 0)
			A_OverlayOffset(layer, xofs,yofs, offsetflags);
		if (style)
			A_OverlayRenderstyle(layer,style);
		if (alpha != 0)	{
			A_OverlayFlags(layer,PSPF_Alpha|PSPF_FORCEALPHA,true);
			A_OverlayAlpha(layer,alpha);
		}
	}

	action void BD_Reload()	{
		if (invoker.ammo1 && invoker.ammo2) {
			while (invoker.ammo2.amount > 0 && invoker.ammo1.amount < invoker.ammo1.maxamount) {
				TakeInventory(invoker.ammo2.GetClass(),1);
				GiveInventory(invoker.ammo1.GetClass(),1);
			}
		}
	}

	//Casing spawn function with cool math by Marisa Kirisame (see mk_matrix)
	action void A_Eject(class<Actor> itemtype, double xofs = 0, double yofs = 0, double zofs = 0, double xvel = 0, double yvel = 0, double zvel = 0) {
		Vector3 ofs = player.mo.pos+(0,0,player.viewheight-GetFloorTerrain().footclip);
		Vector3 x, y, z;
		[x, y, z] = Matrix4.getaxes(player.mo.pitch,player.mo.angle,player.mo.roll);
		let c = Spawn(itemtype,ofs+x*xofs+y*yofs-z*zofs);
		c.vel = x*xvel+y*yvel+z*zvel;
		c.target = self; //get pointer to spawner — if spawned by monster it'll disappear after bouncing
		c.angle = angle;
	}

	states	{
		QKick:
			#### # 0 A_Overlay(-10,"QuickKick");
			#### ###### 1 A_WeaponOffset(7,4,WOF_ADD);
			#### ############ 1 A_WeaponOffset(-3.5,-2,WOF_ADD);
			#### # 0 A_jump(256,"Ready");
			wait;
		QuickKick:
			TNT1 A 0 {
				A_OverlayOffset(-10,28,32);
				A_OverlayFlags(-10,PSPF_ADDBOB|PSPF_ADDWEAPON,false);
				A_OverlayFlags(-10,PSPF_FLIP|PSPF_MIRROR ,true);
				if (CountInv("Modernberserk_Regen") > 0)
					speed = default.speed * 0.5;
				else
					speed = default.speed * 0.25;
			}
			KICK AB 1;
			TNT1 A 0 { 
				if(CountInv("Modernberserk_Regen") > 0)
					A_PlaySound("Mweapons/fist/heavyswing",0);
				else
					A_PlaySound("Mweapons/fist/swing",0);
				A_CameraSway(0.0,3.0,5);
			}
			KICK CD 1;
			KICK EF 1 {
				if (CountInv("Modernberserk_Regen") > 0)
					A_Recoil(-6);
				else
					A_Recoil(-3);
			}
			KICK G 3 {
				if (CountInv("Modernberserk_Regen") > 0) {
					A_Recoil(-5);
					A_CustomPunch(10.0*frandom(10.0,25.0), TRUE,CPF_NOTURN, "ModernKickPuff_Berserk",83);
				}
				else {
					A_Recoil(-1.5);
					A_CustomPunch(10.0*frandom(3.0,5.5), TRUE,CPF_NOTURN, "QuickKickPuff",83);
				}
			}
			TNT1 A 0 A_CameraSway(0.0,-3.0,8);
			KICK HDC 2;
			TNT1 A 0 {
				speed = default.speed;
			}
			KICK BA 3;
			TNT1 A 7 ;
			stop;
		DryReload:
			#### # 10 A_PlaySound("Mweapons/dry");
			#### # 0 A_Jump(256,"Reload");
			wait;
		LoadSprites:
			MUZ1 ABCDEFGH 0;
			MUZ2 ABCD 0;
			MUZ3 ABCD 0;
			MUZ4 ABCD 0;
			MUZ6 ABCD 0;
			MUZ7 ABCDEF 0;
			MUZ8 ABCDEF 0;
			stop;
			
	}
}

Class QuickKickPuff : ModernKickPuff {
	Default {
		-FORCEPAIN
	}
}


//////////////



Class RealBullet : FastProjectile {
	protected vector3 SpawnPos; //where the bullet was shot from
	double bulletdamage; 		//the actual damage value
	double falloffstrength; 	//how quickly the damage is reduced during travel
	double mindamage; 			//minimum damage value at any distance
	int falloffdistance; 		//distance at which the falloff begins
	int bulletspeed; 			//actual bullet speed (since 'speed' property is used to determine spawn distance only)
	property bulletdamage : bulletdamage;
	property bulletspeed : bulletspeed;
	property falloffstrength : falloffstrength;
	property falloffdistance : falloffdistance;
	property mindamage : mindamage;
	Default {
		RealBullet.bulletDamage 10;
		RealBullet.bulletspeed 200;
		RealBullet.FalloffDistance 1024;
		RealBullet.falloffstrength 0.3;
		RealBullet.mindamage 1;
		+BLOODSPLATTER
		radius 1;
		height 1;
		alpha 0.75;
		speed 64;
		renderstyle "add";
		seesound "null";
		deathsound "null";
		DamageFunction CalculateDamage();
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (target)
			SpawnPos = target.pos;
	}
	//whizz sound snippet by phantombeta
	override void Tick () {
		Super.Tick ();
		if (isFrozen())
			return;
		if (!playeringame [consolePlayer])
			return;		
		let curCamera = players [consolePlayer].camera;
		if (!curCamera) // If the player's "camera" variable is null, set it to their PlayerPawn
			curCamera = players [consolePlayer].mo;
		if (!curCamera) // If the player's PlayerPawn is null too, just stop trying
			return;
		if (CheckIfCloser (curCamera, 192))
			A_PlaySound("weapons/tracerwhizz",1,1.0,0,8);
	}
	double CalculateDamage() {
		int ddamage;
		int FalloffFactor = 0;
		double ddistance = level.Vec3Diff(pos, SpawnPos).length() - falloffdistance;
		//Essentially falloff factor is retroactively applied "every tick", so there are fewer falloff steps for faster projectiles:
		if (ddistance > 0)
			FalloffFactor = int (ddistance / bulletspeed);
		//falloffstrength is by how much it's reduced—this is applied to damage "every tick"
		ddamage = clamp(bulletdamage*(falloffstrength**FalloffFactor),mindamage,100);
		//console.printf("distance: %d Damage: %d",level.Vec3Diff(pos, SpawnPos).length(),ddamage);
		return ddamage;
	}
		
	states {
		Spawn:
			TNT1 A 2 NoDelay {
				vel = vel.unit() * bulletspeed;
			}
			PUFF A 1 bright;
			wait;
		XDeath:
			TNT1 A 0;
			stop;
		Death:
			TNT1 A 1 {
				let puff = Spawn("EnBulletPuff",pos);
				if (puff)
					puff.target = self;
			}
			stop;
	}
}

Class BulletTracer : RealBullet {
	Default {
		RealBullet.bulletspeed 256;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+BLOODLESSIMPACT;
		damage 0;
		radius 4;
		height 4;
	}    
	states {
		Death:
			TNT1 A 1;
			stop;
	}
}

Class BD_PistolBullet : RealBullet {
	Default {
		RealBullet.bulletDamage 15;
		RealBullet.bulletspeed 170;
		RealBullet.FalloffDistance 512;
		RealBullet.falloffstrength 0.9;
	}
}

Class BD_RifleBullet : RealBullet {
	Default {
		RealBullet.bulletDamage 15;
		RealBullet.bulletspeed 230;
		RealBullet.FalloffDistance 640;
		RealBullet.falloffstrength 0.93;
	}
}

Class BD_ShotgunPellet : RealBullet {
	Default {
		RealBullet.bulletDamage 12;
		RealBullet.bulletspeed 140;
		RealBullet.FalloffDistance 400;
		RealBullet.falloffstrength 0.85;
	}
}

// Modern SSG is the only piercing weapon in the mod but it deals damage only once upon contact, not continuously
// Piercing strength depends on enemy health: the "thicker" the enemy is, the harder it is for the bullet to go through them
Class BD_SSGPellet : RealBullet {
	private int ripdepth; 		//how much health it can pierce through
	private actor hitvictim;	//the actor that was hit
	property ripdepth : ripdepth;
	Default {
		BD_SSGPellet.ripdepth 300;
		RealBullet.bulletDamage 12;		
		RealBullet.Bulletspeed 140;
		RealBullet.FalloffDistance 300;
		RealBullet.falloffstrength 0.8;
	}
	override int SpecialMissileHit(actor victim) {
		//deal damage only ONCE even if the pellet rips through
		//first we make sure the vicitm hasn't been hit yet and isn't the shooter:
		if (victim && target && (victim != target) && (victim != hitvictim)) { 
				//reduce ripping ability based on victim's current health (thick monsters are harder to pierce):
				ripdepth -= victim.health; 
				hitvictim = victim;
				double xchance = clamp(level.Vec3Diff(pos, SpawnPos).length() * 0.23,25,99); //chance to gib based on distance
				if (random(0,100) > xchance)
					bEXTREMEDEATH = true;
				bulletdamage = CalculateDamage();
				victim.DamageMobj(self,target,bulletdamage,"normal");
				victim.TraceBleed(bulletdamage,self);
				victim.SpawnBlood(pos,AngleTo(victim),bulletdamage);
			}
		if (ripdepth <= 0)
			return 0;
		return 1;
	}
}


class BD_MuzzleSmoke : Smoke_General {
	Default {
		alpha 0.15;
		scale 0.07;
		speed 1;
	}
	override void PostBeginPlay() {
		vel = vel.unit() * frandom(1,3);
		super.PostBeginPlay();
	}
	override void Tick() {
		super.Tick();
		vel *= 0.8;
	}
	states
		{
		Spawn:
			SMK1 AAABBBCCCDDDEEEFFFGGGHHHIIIJJJKKKLLLMMMNNNOOOPPPQQQRRR 1 {
				vel.z = clamp(vel.z*0.85,0.04,0.1);
				A_FadeOut(0.0003);
				scale *= 1.02;
			}
			stop;
	}
}


Class EnSSGPuff : EnBulletPuff {
	Default {
		+HITTRACER
		+PUFFONACTORS
	}
	states {
		Crash:
			TNT1 A 0;
			goto super::Spawn;
		XDeath:
			TNT1 A 1 {
				if (!tracer || !target)
					return;
				let xd = tracer.FindState("XDeath");
				if (!xd || (xd && InStateSequence(tracer.curstate,xd)))
					return;
				if (!tracer.FindInventory("SSGDamageCounter"))
					tracer.GiveInventory("SSGDamageCounter",1);
				let dmg = SSGDamageCounter(tracer.FindInventory("SSGDamageCounter"));
				if (dmg) {
					dmg.totaldamage += 5*frandom(1,3);
					//Console.Printf("accumulated damage: %d | monster health: %d/%d",dmg.totaldamage,tracer.health,tracer.default.health);
					if (dmg.totaldamage > tracer.default.health)
						bEXTREMEDEATH = true;
				}
			}
			stop;
	}
}
	
Class SSGDamageCounter : Inventory {
	int totaldamage;
	Default {
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		inventory.maxamount 1;
	}
	override void DoEffect() {
		if (!owner || isFrozen())
			return;
		super.DoEffect();
		if (owner.health <= 0 || GetAge() > 1) {
			destroy();
			return;
		}
	}
}

//***************
// EMPTY CASINGS
//***************



Class Casing_General : BD_BaseDebris {
	double brot;
	Default {
		-FLOORCLIP
		-NOGRAVITY
		+THRUACTORS
		+ROLLCENTER
		+USEBOUNCESTATE
		renderstyle "normal";
		bouncetype "doom";
		seesound "none";
		mass 1;
		Radius 1;
		Height 1;
		bouncefactor 0.5;
		Scale 0.15;
	}
	Override Void PostBeginPlay() {
		if(!target) {
			destroy();
			return;
		}
		super.PostBeginPlay();
		brot = frandom(18,24);
		roll = frandom(100,105);
	}
	states
		{
		Spawn:
			CAS1 A 0 NoDelay {
				if (self is "PistolCasing")
					sprite = GetSpriteIndex("CAS1");
				else if (self is "ShotgunCasing")
					sprite = GetSpriteIndex("CAS2");
				else if (self is "ChaingunCasing")
					sprite = GetSpriteIndex("CAS3");
				return ResolveState(null);
			}
		Fly:
			#### AABBCCBBAABBCCBB 1 {
				roll += brot;
				if (waterlevel > 0)
					return ResolveState("waterland");
				return ResolveState(null);	
			}
			goto death;
		Bounce.Floor:
			#### # 0 {			
				if (Checkwater()) {
					destroy();
					return ResolveState(null);
				}			
				return ResolveState(null);
			}
			goto fly;
		Death:
			#### # 0 {
				if (CheckWater() || (target && target.bISMONSTER)) {
					destroy();
					return ResolveState(null);
				}
				ClearBounce();
				SetOrigin((pos.x,pos.y,floorz),0);
				roll = random(-8,8);
				scale.x*= randompick(-1,1);
				bNOINTERACTION = true;
				bMOVEWITHSECTOR = true;
				bRELATIVETOFLOOR = true;
				return ResolveState(null);
			}
			#### # -1;
			stop;
		loadsprites:
			CAS1 ABC 0;	CAS2 ABC 0;	CAS3 ABC 0;
			stop;
		WaterLand:
			#### # 1 {
				if (abs(brot) > 1)
					brot *= 0.93;
				if (pos.z > floorz) {
					roll+=brot;
					vel.z = -0.5;
					vel.x *= 0.92;
					vel.y *= 0.92;
				}
				else {
					vel.z = 0;
					if (vel.length() ~== 0) {
						SetOrigin((pos.x,pos.y,floorz),false);
						return ResolveState("WaterLandEnd");
					}
				}
				return ResolveState(null);
			}
			loop;
		WaterLandEnd:
			#### # -1;
			stop;
	}
}


Class PistolCasing : Casing_General {
	Default {
		Scale 0.11;
		bouncesound "weapons/casing";
	}
}

Class ShotgunCasing : Casing_General { 
	Default {
		Scale 0.2;
		bouncesound "weapons/shotgunshells";
	}
}

Class ChaingunCasing : Casing_General { 
	Default {
		Scale 0.15;
		bouncesound "chaingun/casing";
	}
}


// Unused code for the attempt to make actor-based muzzle flashes. My Math Fu is not strong enough to make them always perfectly stick to the camera and gun position.

/*
Class BD_MuzzleFlashParticle : Actor {
	Default {
		+NOINTERACTION
		+FORCEXYBILLBOARD
		+BRIGHT
		+ROLLSPRITE
		+ROLLCENTER
		renderstyle "Add";
		alpha 0.4;
		scale 0.03;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		roll = random(0,359);
	}
	states {
		Spawn:
			BOM1 # 1 A_FadeOut(0.1);
			wait;
	}
}

Class BD_MuzzleSpark : BD_MuzzleFlashParticle {
	Default {
		alpha 0.9;
		scale 0.03;
		speed 1;
	}
	override void PostBeginPlay() {
		vel = vel.unit() * 12;
		super.PostBeginPlay();
	}
	states {
		Spawn:
			SPRK A 1 {
				A_FadeOut(0.5);
				//scale*=0.5;
				vel*=0.8;
			}
			wait;
	}
}

Class BD_MuzzleFlare : BD_BaseFlare {
	Default {
		alpha 0.5;
		scale 0.07;
	}
	override void Tick() {
		//if (master)
			//SetOrigin(master.pos,true);
		super.Tick();
	}
	states {
		Spawn:
			LENY A 1 A_FadeOut(0.14);
			wait;
	}
}
		
Class BD_MuzzleFlash : BD_MuzzleFlashParticle {
	int mcount;
	Default {
		//+MISSILE
		//speed 32;
		scale 0.035;
		alpha 0.8;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		scale*=frandom(0.9,1.1);
		vel = vel.Unit () * 1;
		if (target && (target is "PlayerPawn")) {
			let plr = PlayerPawn(target);
			vel += plr.vel;
			angle = plr.angle;
			pitch = plr.pitch;
			//Console.Printf("player pitch: %d, flash pitch: %d", plr.pitch, pitch);
			double zdiff = plr.player.viewz - plr.pos.z - plr.player.viewheight;
			SetZ(pos.z+zdiff);
		}
		for (int i = random(5,11); i > 0; i--) {
			//A_SpawnItemEx("BD_MuzzleSpark",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(16,19),0,frandom(-5,5),angle:random(-40,40));
			A_Spawnprojectile("BD_MuzzleSpark",frandom(-2,2),frandom(-2,2),frandom(-40,40),CMF_AIMDIRECTION,pitch+frandom(-40,40));
		}
		for (int i = 7; i > 0; i--) {
			A_Spawnprojectile("BD_MuzzleSmoke",frandom(-0.5,0.5),frandom(-0.5,0.5),0,CMF_AIMDIRECTION,pitch);
		}
		let flare = BD_MuzzleFlare(Spawn("BD_MuzzleFlare",pos));
		if (flare) {
			flare.vel = vel;
			flare.master = self;
			flare.scale = scale*2;
		}
	}
	states {
		Spawn:
			BOM1 I 1 NoDelay { frame = random(5,9); }
			BOM1 # 1 {
				A_FadeOut(0.27);
				scale*=1.1;
			}
			wait;
	}
}
*/