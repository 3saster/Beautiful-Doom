Class BDoomWeapon : Weapon 
{
bool iskicking; //currently kicking
int offsetTics; // current camera sway timer
double maxOffsetTics; // starting point for the timer
double offsetAngle; // the target angle for the camera sway
double offsetPitch;
double currentAngleOffset; // how much has the camera already been offset?
double currentPitchOffset;
property maxOffsetTics : maxOffsetTics;
property offsetTics : offsetTics;

Default {  //required default values for A_CameraSway. Otherwise it'll crash due to division by zero
	BDoomWeapon.maxOffsetTics 1;
	BDoomWeapon.offsetTics -1;
	}

// Camera sway function by josh771
action void A_CameraSway(double aoffset, double poffset, int tics)
{
    invoker.offsetTics = tics;
    invoker.maxOffsetTics = tics;
    
    invoker.offsetAngle = aoffset;
    invoker.offsetPitch = poffset;

    invoker.currentAngleOffset = 0.0;
    invoker.currentPitchOffset = 0.0;
}

override void DoEffect()
	{
	Super.DoEffect();
	if (owner) {
		if(bdoom_weapons == 2) {
				BobRangeX = 0.2;
				BobRangeY = 0.2;
				BobStyle = 5;
				BobSpeed = 2.0;
			}
		else {
				BobRangeX = 1.0;
				BobRangeY = 1.0;
				BobStyle = 0;
				BobSpeed = 1.0;
			}
		//CameraSway in action	
		if (offsetTics >= 0) {
			double phase = (offsetTics / maxOffsetTics) * 90.0;
			double newAngleOffset = (cos(phase) * offsetAngle);
			double newPitchOffset = (cos(phase) * offsetPitch);
			double finalAngle = (owner.angle - currentAngleOffset) + newAngleOffset;
			double finalPitch = (owner.pitch - currentPitchOffset) + newPitchOffset;
			currentAngleOffset = newAngleOffset;
			currentPitchOffset = newPitchOffset;
			owner.A_SetAngle(finalAngle, SPF_INTERPOLATE);
			owner.A_SetPitch(finalPitch, SPF_INTERPOLATE);
			offsetTics--;
			}
		
//QUICK KICK
		//if player presses +user1 (default Q and Mouse4)
		if 	(owner.player.cmd.buttons & BT_USER1) {
			let psp = owner.player.FindPSprite(PSP_WEAPON);
			let kicks = owner.player.FindPSprite(-10);
			if(!psp)
				{ 
				//console.printf("no active weapons (player probably dead)"); 
				return;
				}
			else if (bdoom_weapons != 2)
				{ 
				//console.printf("not using modern weapons"); 
				return;
				}
			else if (kicks)	//do nothing if the kicking animation is in progress
				{ 
				//console.printf("already kicking"); 
				return;
				}
			//do this if used from Ready: will not only kick in overlay but will also move the weapon aside
			else if	(InStateSequence(psp.curstate, FindState("Ready.Modern")) ) {
				owner.player.setPSprite(PSP_Weapon,ResolveState("QKick"));
				}
			//do this if used during Reload: weapon sprite will stay the same, kick will be shown and executed independently in overlay
			else if (InStateSequence(psp.curstate,FindState("Reload.Modern"))	||
					InStateSequence(psp.curstate, FindState("Reload.Modern1"))	||
					InStateSequence(psp.curstate, FindState("Reload.ModernEnd"))||
					InStateSequence(psp.curstate, FindState("Reload"))			||
					InStateSequence(psp.curstate, FindState("Reload1"))			||
					InStateSequence(psp.curstate, FindState("ReloadEnd"))		||
					InStateSequence(psp.curstate, FindState("ReloadDo")) 		){
				owner.player.setPSprite(-10,FindState("QuickKick"));
				}
			}
		}
	}


action void BD_WeaponReady (bool allowSecondary = false, bool allowReload = true, bool allowKick = true) {
  	int flags = 0;

    if (allowReload && invoker.ammo1 && invoker.ammo2 && invoker.ammo2 != invoker.ammo1 && invoker.ammo2.amount > 0 && invoker.ammo1.amount < invoker.ammo1.maxamount)
        flags |= WRF_ALLOWRELOAD;
    if (!allowSecondary)
        flags |= WRF_NOSECONDARY;
    if (allowKick)
        flags |= WRF_ALLOWUSER1;
    
    A_WeaponReady (flags);
}

action void BD_Overlay(int layer = 0, statelabel statename = null, int flags = 0, double xofs = 0, double yofs = 0, int offsetflags = 0, int style = 0, double alpha = 0) {
	if (layer == 0 || !statename)
		return;
	A_Overlay(layer, statename, 0);
	if (flags != 0)
		A_OverlayFlags(layer, flags, true);
	if (xofs != 0 && yofs != 0)
		A_OverlayOffset(layer, xofs,yofs, offsetflags);
	if (style)
		A_OverlayRenderstyle(layer,style);
	if (alpha != 0)
		{
		A_OverlayFlags(layer,PSPF_Alpha,true);
		A_OverlayAlpha(layer,alpha);
		}
	}

action void BD_Reload()
	{
	if (invoker.ammo1 && invoker.ammo2)
		{
		while (invoker.ammo2.amount > 0 && invoker.ammo1.amount < invoker.ammo1.maxamount)
			{
			TakeInventory(invoker.ammo2.GetClass(),1);
			GiveInventory(invoker.ammo1.GetClass(),1);
			}
		}
	}

//Casing spawn function with cool math by Marisa Kirisame (see mk_matrix)
action void A_Eject(class<Actor> itemtype, double xofs = 0, double yofs = 0, double zofs = 0, double xvel = 0, double yvel = 0, double zvel = 0)
	{
		Vector3 ofs = player.mo.pos+(0,0,player.viewheight-GetFloorTerrain().footclip);
		Vector3 x, y, z;
		[x, y, z] = Matrix4.getaxes(player.mo.pitch,player.mo.angle,player.mo.roll);
		let c = Spawn(itemtype,ofs+x*xofs+y*yofs-z*zofs);
		c.vel = x*xvel+y*yvel+z*zvel;
		c.target = self; //get pointer to spawner â€” if spawned by monster it'll disappear after bouncing
		c.angle = angle;
	}
states
	{
	QKick:
		#### # 0 A_Overlay(-10,"QuickKick");
		#### ###### 1 A_WeaponOffset(7,4,WOF_ADD);
		#### ############ 1 A_WeaponOffset(-3.5,-2,WOF_ADD);
		#### # 0 A_jump(256,"Ready");
		wait;
	QuickKick:
		TNT1 A 0 {
			//invoker.iskicking = true;
			A_OverlayOffset(-10,28,32);
			A_OverlayFlags(-10,PSPF_ADDBOB|PSPF_ADDWEAPON,false);
			A_OverlayFlags(-10,PSPF_FLIP|PSPF_MIRROR ,true);
			if (CountInv("Modernberserk_Regen") > 0)
				speed = default.speed * 0.5;
			else
				speed = default.speed * 0.25;
			}
		KICK AB 1;
		TNT1 A 0 { 
			if(CountInv("Modernberserk_Regen") > 0)
				A_PlaySound("Mweapons/fist/heavyswing",0);
			else
				A_PlaySound("Mweapons/fist/swing",0);
			A_CameraSway(0.0,3.0,5);
			}
		KICK CD 1;
		KICK EF 1 {
			if (CountInv("Modernberserk_Regen") > 0)
				A_Recoil(-6);
			else
				A_Recoil(-3);
			}
		KICK G 3 {
			if (CountInv("Modernberserk_Regen") > 0) {
				A_Recoil(-5);
				A_CustomPunch(10.0*frandom(10.0,25.0), TRUE,CPF_NOTURN, "ModernKickPuff_Berserk",83);
				}
			else {
				A_Recoil(-1.5);
				A_CustomPunch(10.0*frandom(3.0,5.5), TRUE,CPF_NOTURN, "QuickKickPuff",83);
				}
			}
		TNT1 A 0 A_CameraSway(0.0,-3.0,8);
		KICK HDC 2;
		TNT1 A 0 {
			speed = default.speed;
			}
		KICK BA 3;
		TNT1 A 7 ;
		stop;
	DryReload:
		#### # 10 A_PlaySound("Mweapons/dry");
		#### # 0 A_Jump(256,"Reload");
		wait;
	}
}

Class QuickKickPuff : ModernKickPuff {
Default {
	-FORCEPAIN
	}
}


//////////////

Class BulletTracer : FastProjectile
{
Default {
	-ACTIVATEIMPACT;
	-ACTIVATEPCROSS;
	+NOTELEPORT;
	+BLOODLESSIMPACT;
	+THRUGHOST;
	alpha 0.75;
	renderstyle "add";
	damage 0;
	speed 150;
	radius 4;
	height 4;
	seesound "null";
	deathsound "null";
	}    
//override snippet by phantombeta
override void Tick () {
        Super.Tick ();

        if (!playeringame [consolePlayer])
            return;
        
        let curCamera = players [consolePlayer].camera;
        if (!curCamera) // If the player's "camera" variable is null, set it to their PlayerPawn
            curCamera = players [consolePlayer].mo;
        if (!curCamera) // If the player's PlayerPawn is null too, just stop trying
            return;

        if (CheckIfCloser (curCamera, 192))
            A_PlaySound("weapons/tracerwhizz",1,1.0,0,8);
    }
states
	{
	Spawn:
		PUFF A 1 bright {
			if (bdoom_tracers == 0) {
				self.destroy();
				return ResolveState(null);
				}
			return ResolveState(null);
			}
		loop;
	Xdeath:
		TNT1 A 1;
		stop;
	Death:
		TNT1 A 1 {
			if (frandom(0.0,1.0) > 0.8)
				A_SpawnProjectile("RicochetBullet",0,0,random(0,360),2,random(-40,40));
			}
		stop;
	}
}

Class RealBullet : BulletTracer
{
double bulletdamage; 	//the actual damage value
double falloffstrength; //how quickly the damage is reduced during travel
double mindamage; 		//minimum damage value at any distance
int falloffdistance; 	//distance at which the falloff begins
int bulletspeed; 		//speed; currently not used
property bulletspeed : bulletspeed;
property falloffstrength : falloffstrength;
property falloffdistance : falloffdistance;
property mindamage : mindamage;
Default {
	//RealBullet.bulletspeed 200;
	RealBullet.FalloffDistance 1024;
	RealBullet.falloffstrength 0.3;
	RealBullet.mindamage 1;
	+ACTIVATEIMPACT
	+ACTIVATEPCROSS
	+NOTELEPORT
	-BLOODLESSIMPACT
	+BLOODSPLATTER
	+THRUGHOST
	decal "none";
	speed 170;
	radius 1;
	height 1;
	DamageFunction bulletdamage;
	}
override void PostBeginPlay()
	{
	super.PostBeginPlay();
	//vel = vel.Unit () * bulletspeed;
	BulletDamage = 3 * frandom(4,8);
	}
override void Tick() {
	super.Tick();
	if (target && distance3d(target) > falloffdistance)
		bulletdamage = clamp(bulletdamage*falloffstrength,mindamage,100);
	//console.printf("Damage %f",bulletdamage);
	}
states
	{
	Death:
		TNT1 A 1 A_SpawnItemEx("EnBulletPuff",0,0,0,0,0,0,0,SXF_SETTARGET|SXF_ORIGINATOR);
		stop;
	}
}

Class BD_PistolBullet : RealBullet
{
Default {
	//RealBullet.bulletspeed 170;
	speed 170;
	RealBullet.FalloffDistance 512;
	RealBullet.falloffstrength 0.9;
	}
override void PostBeginPlay()
	{
	super.PostBeginPlay();
	BulletDamage = 15; //3 * frandom(4,8);
	}
}

Class BD_RifleBullet : RealBullet
{
Default {
	//RealBullet.bulletspeed 230;
	speed 230;
	RealBullet.FalloffDistance 640;
	RealBullet.falloffstrength 0.93;
	}
override void PostBeginPlay()
	{
	super.PostBeginPlay();
	BulletDamage = 15; //3 * frandom(6.5,8.0);
	}
}

Class BD_ShotgunPellet : RealBullet
{
Default {
	//RealBullet.bulletspeed 140;
	speed 140;
	RealBullet.FalloffDistance 400;
	RealBullet.falloffstrength 0.85;
	RealBullet.mindamage 0.4;
	}
override void PostBeginPlay()
	{
	super.PostBeginPlay();
	BulletDamage = 12; //3 * frandom(3,5);
	}
}

// Modern SSG is the only piercing weapon in the mod but it deals damage only once upon contact, not continuously
// Piercing strength depends on enemy health: the "thicker" the enemy is, the harder it is for the bullet to go through them
Class BD_SSGPellet : RealBullet
{
private int ripdepth; 		//how much health it can pierce through
private actor hitvictim;	//the actor that was hit
Default {
	//RealBullet.bulletspeed 140;
	damage 0;
	speed 140;
	RealBullet.FalloffDistance 300;
	RealBullet.falloffstrength 0.8;
	RealBullet.mindamage 0.5;
	+RIPPER
	//+NOBOSSRIP
	}
override void Tick() {
	super.Tick();
	if (ripdepth <= 0)
		self.destroy();
	}
override int SpecialMissileHit(actor victim) {
	if (victim && !victim.player) {
		if (target) {
			int xchance = clamp(distance3D(target) * 0.15,10,90); //chance to gib based on distance, min 10%, max 90%
			//console.printf("%d percent",100-xchance);
			if (random(0,100) > xchance)
				bEXTREMEDEATH = true;
			}
		ripdepth = ripdepth - victim.health; //reduce ripping ability before anything else
		if (victim != hitvictim) { //deal damage only ONCE even if the pellet rips through
			hitvictim = victim;
			victim.DamageMobj(self,target,bulletdamage,"normal");
			//console.PrintF("Ripdepth %d, Health %d",ripdepth,victim.health);
			}
		}
	if (ripdepth <= 0)
		return -1;
	else
		return 1;
	//bulletdamage*= 0.5;
	}
override void PostBeginPlay()
	{
	super.PostBeginPlay();
	BulletDamage = 12;
	ripdepth = 200;
	}
}


//***************
// EMPTY CASINGS
//***************



Class Casing_General : DebrisGeneral
{
Default {
	-FLOORCLIP
	-THRUACTORS
	-NOGRAVITY
	+THRUACTORS
	+ROLLCENTER
	+USEBOUNCESTATE
	renderstyle "normal";
	bouncetype "doom";
	seesound "none";
	mass 1;
	Radius 1;
	Height 1;
	bouncefactor 0.5;
	Scale 0.15;
	}
states
	{
	Spawn:
		CAS1 A 0 NoDelay {
			if (self is "PistolCasing")
				self.sprite = GetSpriteIndex("CAS1");
			else if (self is "ShotgunCasing")
				self.sprite = GetSpriteIndex("CAS2");
			else if (self is "ChaingunCasing")
				self.sprite = GetSpriteIndex("CAS3");
			roll = random(88,92);
			}
	Fly:
		#### AABBCCBBAABBCCBB 1 {
			if(!target) {
				self.destroy();
				return ResolveState(null);
				}
			roll+=22;
			if (waterlevel > 0)
				return ResolveState("Death");
			return ResolveState(null);	
			}
		goto death;
	Bounce.Floor:
		#### # 0 {			
			if (Checkwater()) {
				destroy();
				return ResolveState(null);
				}			
			return ResolveState(null);
			}
		goto fly;
	Death:
		#### # 0 {
			if (CheckWater() || (target && target.bISMONSTER)) {
				self.destroy();
				return ResolveState(null);
				}
			A_QueueCorpse();
			ClearBounce();
			return ResolveState(null);
			}
		#### # 1 {
			if (pos.z <= floorz+1) {
				SetOrigin((pos.x,pos.y,floorz),0);
				roll = (randompick(0,180) + random(-8,8));
				bNOINTERACTION = true;
				bMOVEWITHSECTOR = true;
				bRELATIVETOFLOOR = true;
				return ResolveState("Rest");
				}
			return ResolveState(null);
			}
		wait;
	Rest:
		#### # -1;
		stop;
	loadsprites:
		CAS1 ABC 0;	CAS2 ABC 0;	CAS3 ABC 0;
		stop;
	}
}


Class PistolCasing : Casing_General
{
Default {
	Scale 0.11;
	bouncesound "weapons/casing";
	}
}

Class ShotgunCasing : Casing_General
{ 
Default {
	Scale 0.2;
	bouncesound "weapons/shotgunshells";
	}
}

Class ChaingunCasing : Casing_General
{ 
Default {
	Scale 0.15;
	bouncesound "chaingun/casing";
	}
}
