//**********
// BFG-9001
//**********


class BD_BFG9000 : BDoomWeapon //replaces BFG9000
{
int wcharge; //charge of the Modern BFG
int railcounter; //used for Heavy Laser alt attack
string PrevSpecies;
Default {
	Height 20;
	weapon.ammotype2 	"Cell";
	weapon.ammouse2 	1;
	weapon.ammogive2 	0;
	Weapon.AmmoType 	"Cell";
	Weapon.AmmoUse 		40;
	Weapon.AmmoGive 	40;
	+WEAPON.NOAUTOFIRE;
	Inventory.PickupMessage "$GOTBFG9000";
	Tag "$TAG_BFG9000";	
	Weapon.Selectionorder 280;
	inventory.pickupsound "pickups/bfg";
	ProjectileKickback 100;
	weapon.kickback 30;
	decal "ArachnotronPlasmaSplat";
	weapon.slotnumber 7;
	}
override void DoEffect()
	{
	If (Owner)
		{
		if(bdoom_weapons == 2)
			{
				AmmoUse1 = 10;
				AmmoUse2 = 0;
				bALT_AMMO_OPTIONAL = true;
			}
		else
			{
				AmmoUse1 = 40;
				AmmoUse2 = 1;
				bALT_AMMO_OPTIONAL = false;
			}
		//console.printf("Player Species: %s",owner.species);
		}
	Super.DoEffect();
	}
states
	{
	Spawn:
		BFUG A 1 {
			if (bdoom_weapons == 2)
				scale.x = -1;
			else
				scale.x = 1;
			}
		loop;
	Select:
		TNT1 A 0 {
			If(bdoom_weapons > 0)
				A_PlaySound("weapons/bfg/draw");
			If(bdoom_weapons==2)
				return ResolveState("Select.Modern");
			return ResolveState(null);
			}
		BBGN A 1 A_Raise();
		wait;
	Deselect:
		TNT1 A 0 {
			If(bdoom_weapons==2)
				return ResolveState("Deselect.Modern");
			A_ClearRefire();
			invoker.wcharge = 0;
			invoker.railcounter = 0;
			A_StopSound(5);
			//A_StopSound(6);
			A_StopSound(7);
			return ResolveState(null);
			}
		BBGN A 1 A_Lower();
		wait;
	Ready:
		BBGN A 1 {
			If(bdoom_weapons==2)
				return ResolveState("Ready.Modern");
			string curspecies = species;
			if (invoker.prevspecies && curspecies.IndexOf("BDoomPlayerSpecies") >= 0) //give back original species, if any (and if current is BDoomPlayerSpecies%d)
				species = invoker.prevspecies;
			A_StopSound(5);
			//A_StopSound(6);
			A_StopSound(7);
			A_ClearOverlays(3,3);
			invoker.wcharge = 0;
			if (bdoom_weapons == 1)
				A_WeaponReady();
			else
				A_WeaponReady(WRF_NOSECONDARY);
			return ResolveState(null);
			}
		loop;
	Fire: //before fire = 30 tics, fire = 10 tics, refire = 20 tics
		TNT1 A 0 {
			If(bdoom_weapons==2)
				return ResolveState("Fire.Modern");
			if (bdoom_weapons == 0)
				A_playsound("weapons/bfgf");
			else
				A_PlaySound("weapons/bfg/start",5);
			return ResolveState(null);
			}
		BBGN ABCDE 3;
		BBGF AABBCCDDDDEEEEE 1 bright;
		BBGF F 5 bright {
			A_FireProjectile("BD_BFGBall",0,1);
			if(bdoom_shakes == 1)
				Radius_Quake(1,20,0,2,0);
			if (bdoom_weapons == 1)
				A_PlaySound("weapons/bfg/fire",5);
			}
		BBGF EEBBA 1;
		TNT1 A 0 A_ReFire();
		TNT1 A 0 {
			If(bdoom_weapons==1)
				A_Playsound("weapons/bfg/cool");
			}
		BBGN EEDDCCBB 2 {
			if (bdoom_debris)
				A_SpawnItemEx("WeaponSmoke",cos(pitch)*25,random(-5,5),sin(-pitch)*25+random(33,37), 0,0,1,0);
			}
		BBGN AA 2;
		goto ready;


	AltFire:
		BBGN A 5 {
			A_StopSound(5);
			A_PlaySound("weapons/bfg/railcharge",5,1,0);
			}
		BBGN BCDE 5;
		TNT1 A 0 A_PlaySound("weapons/bfg/railfire",5,1,0);
	RailFire:
		TNT1 A 0 A_JumpIf(invoker.railcounter >= 100,"AltEnd");
		BBGN E 1 bright {
			A_RailAttack(10*random(1,6),0,1,"","green",RGF_SILENT|RGF_NORANDOMPUFFZ,1,"BFGRailPuff",0,0,300,0,5.0,0,"BFGRailBall_Hold",-4); //this is memory-light
			A_GunFlash();
			if (invoker.railcounter >= 30 && bdoom_shakes == 1)
				Radius_Quake(1,2,0,1,0);
			invoker.railcounter++;
			}
		BBGN E 1 bright A_WeaponOffset(random(-1,1),random(32,34),WOF_INTERPOLATE);
		TNT1 A 0 A_ReFire("RailFire");
	AltEnd:
		TNT1 A 0 {
			A_WeaponOffset(0,32);
			A_RailAttack(0,0,0,"","green",RGF_SILENT|RGF_NORANDOMPUFFZ,2,"BFGRailPuff",0,0,300,0,3.0,5.0,"BFGRailBall",-4); //this memory-heavy ray is for nicer after-shot effect similar to plasma railgun
			A_StopSound(5);
			A_Playsound("weapons/bfg/railcool");
			}
		TNT1 A 0 A_JumpIf(invoker.railcounter >= 100,"AltEndLong");
		BBGN EEEDDDCCCBBB 2 {
			if (bdoom_debris)
				A_SpawnItemEx("WeaponSmoke",cos(pitch)*25,random(-5,5),sin(-pitch)*25+random(33,37),	0,0,1,0);
			}
		BBGN A 5 { invoker.railcounter = 0; }
		goto ready;	
	AltEndLong: //Played only if you held the button until the end
		BBGN EEEEEDDDDDCCCCCBBBBB 2 {
			if (bdoom_debris)
				A_SpawnItemEx("WeaponSmoke",cos(pitch)*25,random(-5,5),sin(-pitch)*25+random(33,37),	0,0,1,0);
			}
		BBGN A 5 { invoker.railcounter = 0; }
		goto ready;	
	AltFlash:
		TNT1 A 1 A_light1();
		TNT1 A 1 A_light2();
		TNT1 A 1 A_light1();
		TNT1 A 1 A_light2();
		goto lightdone;
		
// MODERN
	Select.Modern:
		TNT1 A 0 A_WeaponOffset(-36.0,64.0);
		BBGN AAAAAAAA 1 {
			A_WeaponOffset(4.5,-4.0,WOF_ADD|WOF_INTERPOLATE);
			A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
			}
		goto ready;
	Deselect.Modern:
		TNT1 A 0 {
			string curspecies = species;
			if (invoker.prevspecies && curspecies.IndexOf("BDoomPlayerSpecies") >= 0) //give back original species, if any (and if current is BDoomPlayerSpecies%d)
				species = invoker.prevspecies;
			A_ClearRefire();
			invoker.wcharge = 0;
			A_StopSound(5);
			//A_StopSound(6);
			A_StopSound(7);
			}
		BBGN A 1 A_Lower();
		wait;
	Ready.Modern:
		BBGN A 1 {
			string curspecies = species;
			if (curspecies.IndexOf("BDoomPlayerSpecies") < 0) {
					invoker.prevspecies = species; //record previous species, if any (and if not already BDoomPlayerSpecies%d)
					species = String.Format("BDoomPlayerSpecies%d",self.PlayerNumber()); //assign unique species based on player number
					}
			
			A_WeaponReady(WRF_NOSECONDARY);
			//A_PlaySound("Mweapons/bfg/ready",6,0.45,1);
			A_ClearRefire();
			invoker.wcharge = 0;
			invoker.railcounter = 0;
			let po = player.findPsprite(3);
			if (!po)
				A_OverLay(3,"ReadyLights");
			}
		goto ready;
	ReadyLights:
		BMGY ABCDEFEDCB 2 bright;
		loop;
	ChargeLights:
		BMGZ A 1 bright {
			let po = player.findPsprite(3);
			po.frame = clamp(invoker.wcharge,0,7);
			return ResolveState(null);
			}
		loop;
		//load:
		BMGZ ABCDEFGH 1;
	OverChargeLights:
		BMGZ JIHJIHJIH 2 bright;
		loop;
		
	Fire.Modern:
		BBGN A 10 {
			A_StopSound(5);
			//A_StopSound(6);
			A_StopSound(7);
			invoker.wcharge = 0;
			A_Overlay(3,"ChargeLights");
			A_PLaySound("Mweapons/bfg/charge",6);
			}
	Hold.Modern:
		BBGN A 14 {
			A_TakeInventory("Cell",10);
			if (invoker.wcharge > 8) {
				A_Overlay(3,"OverChargeLights");
				A_PLaySound("Mweapons/bfg/charge2",7);
				A_PLaySound("Mweapons/bfg/warning",8);
				return ResolveState("OverCharge");
				}
			invoker.wcharge++;
			If (CountInv("Cell") < 10)
				return ResolveState("FireBFG");
			return ResolveState(null);
			}
		TNT1 A 0 A_ReFire("Hold.Modern");
		goto FireBFG;
	OverCharge:	
		BBGN A 22 {
			if (invoker.wcharge >= 12)
				return ResolveState("FireSelf");
			invoker.wcharge++;
			return ResolveState(null);
			}
		TNT1 A 0 A_ReFire("OverCharge");
		goto FireBFG;
	FireBFG:
		TNT1 A 0 A_ClearOverlays(3,3);
		BBGF AB 2 bright;
		TNT1 A 0 {
			A_StopSound(7);
			if (invoker.wcharge >= 7)
				return ResolveState("MFire4");
			if (invoker.wcharge >= 5)
				return ResolveState("MFire3");
			if (invoker.wcharge >= 3)
				return ResolveState("MFire2");
			return ResolveState(null);
			}
	MFire1:
		BBGF C 3 bright {
			A_FireProjectile("ModernBFGBall",0,0);
			Radius_Quake(1,12,0,2,0);
			A_PlaySound("Mweapons/bfg/fire",6);
			//A_SetPitch(pitch - (0.8 * invoker.wcharge),SPF_INTERPOLATE);
			}
		BBGF BA 3 bright;
		BBGN EEDDCCBB 1 A_SpawnItemEx("WeaponSmoke",cos(pitch)*25,random(-5,5),sin(-pitch)*25+random(33,37),		0,0,1,0,0,128);
		BBGN A 2;
		goto ready;
	MFire2:
		BBGF C 2 bright;
		BBGF D 3 bright {
			Radius_Quake(1,14,0,2,0);
			A_PlaySound("Mweapons/bfg/fire",6);
			A_FireProjectile("ModernBFGBall",0,0);
			//A_SetPitch(pitch - (0.8 * invoker.wcharge),SPF_INTERPOLATE);
			}
		BBGF CBA 3 bright;
		BBGN EEEDDDCCCBBB 1 A_SpawnItemEx("WeaponSmoke",cos(pitch)*25,random(-5,5),sin(-pitch)*25+random(33,37),		0,0,1,0,0,112);
		BBGN A 4;
		goto ready;
	MFire3:
		BBGF CD 2 bright;
		BBGF E 3 bright {
			A_FireProjectile("ModernBFGBall",0,0);
			Radius_Quake(1,14,0,2,0);
			A_PlaySound("Mweapons/bfg/fire",6);
			//A_SetPitch(pitch - (0.8 * invoker.wcharge),SPF_INTERPOLATE);
			}
		BBGF DCBA 3 bright;
		BBGN EEEDDDCCCBBB 1 A_SpawnItemEx("WeaponSmoke",cos(pitch)*25,random(-5,5),sin(-pitch)*25+random(33,37),		0,0,1,0,0,100);
		BBGN A 6;
		goto ready;
	MFire4:
		BBGF CDE 2 bright;
		BBGF F 3 bright {
			A_FireProjectile("ModernBFGBall",0,0);
			Radius_Quake(1,14,0,2,0);
			A_PlaySound("Mweapons/bfg/fire",6);
			//A_SetPitch(pitch - (0.8 * invoker.wcharge),SPF_INTERPOLATE);
			}
		BBGF DDCBA 3 bright;
		BBGN EEEEDDDDCCCCBBBB 1 A_SpawnItemEx("WeaponSmoke",cos(pitch)*25,random(-5,5),sin(-pitch)*25+random(33,37),		0,0,1,0,0,92);
		BBGN A 8;
		goto ready;	
	FireSelf:
		TNT1 A 0 A_ClearOverlays(3,3);
		BBGF ABCDE 1 bright;
		BBGF F 3 bright {
			A_StopSound(7);
			//A_StopSound(6);
			A_FireProjectile("ModernBFGBall",0,0);
			Radius_Quake(1,14,0,2,0);
			A_PlaySound("Mweapons/bfg/fire",6);
			A_SetPitch(pitch - (0.8 * invoker.wcharge),SPF_INTERPOLATE);
			}
		BBGF DDCBA 2 bright;
		BBGN EEEEEEDDDDDDCCCCCCBBBBBB 1 A_SpawnItemEx("WeaponSmoke",cos(pitch)*25,random(-5,5),sin(-pitch)*25+random(33,37),		0,0,1,0,0,80);
		BBGN AAAAAAAAAAAAAAAAAAAAAAAA 1 A_SpawnItemEx("WeaponSmoke",cos(pitch)*25,random(-5,5),sin(-pitch)*25+random(33,37),		0,0,1,0,0,80);
		goto ready;
	}
}


Class BD_BFGBall : BFGBall //replaces BFGBall
{
Class<Actor> trailactor;
Default {	
	damagetype "BFGSplash";
	+BLOODLESSIMPACT
	+FORCEXYBILLBOARD
	renderstyle "ADD";
	alpha 0.7;
	decal "BFGLightning";
	seesound "none";
	DeathSound "none";
	scale 0.4;
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	trailactor = "BFGTrail";
	A_PlaySound("weapons/bfg/fly",6,1.0,TRUE,1);
	}
override void Tick () {
	Vector3 oldPos = self.pos;
	Super.Tick();
	if (!bdoom_debris || level.isFrozen())
		return;
	Vector3 path = level.vec3Diff( self.pos, oldPos );
	double distance = path.length() / 3; //this determines how far apart the particles are
	Vector3 direction = path / distance;
	int steps = int( distance );
	
	for( int i = 0; i < steps; i++ )  {
		actor mo = Spawn(trailactor, oldPos );
		//mo.vel = (frandom(-0.5,0.5),frandom(-0.5,0.5),frandom(-0.5,0.5));
		mo.target = self;
		mo.angle = angle;
		oldPos = level.vec3Offset( oldPos, direction );
		}
		
	if (pos.z <= floorz+80 && floorpic != skyflatnum && random(0,32) > 28) {
		let lt = BFGLightningSpawner(Spawn("BFGLightningSpawner",pos));
		if (!lt) return;
		lt.master = self;
		}
	if (pos.z >= ceilingz-128 && ceilingpic != skyflatnum && random(0,32) > 28) {
		let lt = BFGLightningSpawner(Spawn("BFGLightningSpawner",pos));
		if (!lt) return;
		lt.master = self;
		lt.upward = true;
		}
	}
States
	{
	Spawn:
		TNT1 A 0 NoDelay {
			if(bdoom_debris) {
				let f = BD_ProjFlare(Spawn("BD_ProjFlare",pos));
				f.fcolor = 'green';
				f.vel = vel;
				f.master = self;
				f.scale = scale;
				}
			}
	Spawn1:
		BFGB ABCDEFGH 1 bright {
			//if (bdoom_debris)
				//A_CustomRailGun(0,0,"","FFFFFF",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,0,4,"NullPuff",random(0,360),random(0,360),64,20,0,4,"BFGBallRay");
			}
		loop;
	Death.Sky:
		TNT1 A 1 A_RemoveChildren(1,RMVF_EVERYTHING);
		stop;
	Death:
		TNT1 A 0 {
			A_RemoveChildren(1,RMVF_EVERYTHING);
			//A_StopSound(6);
			A_SetScale(1.0,1.0);
			If(bdoom_shakes  == 0)
				Radius_Quake(4,34,0,4,0);
			If(bdoom_weapons==1)
				A_PlaySound("weapons/bfg/explosion",6);
			else
				A_PlaySound("weapons/bfgx",6);
			}
		BFGX ABCD 4 bright;
		BFGX E 4 bright A_BFGSpray("BD_BFGExtra");
		BFGX FGHIJK 4 bright;
		stop;
	}
}

//flare-like trail behind the orb
Class BFGTrail : Flare_General
{
default {
	alpha 0.2;
	scale 0.16;
	}
states
	{	
	Spawn:
		LENG A 1 bright {
			A_FadeOut(0.04);
			scale*=0.95;
			}
		loop;
	}
}

Class BFGLightningSpawner : Actor
{
bool upward;
double broll;
Default {
	+NOINTERACTION
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	broll = frandom(3,6);
	angle = random(0,360);
	pitch = frandom(78,89);
	if (upward) {
		broll*=-1;
		pitch*=-1;
		}
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			if (master) {
				SetOrigin(master.pos,false);
				vel = master.vel;
				}
			}
		TNT1 AAAAAAAAAA 2 {
			pitch -= broll;
			if (bdoom_debris && master)
				A_CustomRailGun(0,0,"","FFFFFF",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,0,4,"NullPuff",0,0,160,20,0,4,"BFGBallRay");
			}
		stop;
		
	}
}

//particles of the decorative lightning of the orb
Class BFGBallRay : PlasmaRailBall
{
Default {
	alpha 0.5;
	translation "GreenPlasma";
	}
states
	{
	Spawn:
		TNT1 A 0 Nodelay {
			//if (bdoom_debris)
				//A_SpawnItemEx("BFGBallRayFlare",flags:SXF_TRANSFERPOINTERS);
//did you know that the actor that fires the railgun is also the target of the railgun particles? phantombeta knew
//transfer velocity so that the lightning is always next to the bfg orb and not lagging behind
			if (target)
				vel = target.vel;
			}
		PEXP ABCDEFGHIJKLM 1 bright A_FadeOut(0.08);
		stop;
	}
}

//flares around decorative lightning particles
Class BFGBallRayFlare : Flare_General
{
Default {
	renderstyle "Add";
	alpha 0.1;
	scale 0.07;
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			if (target)
				vel = target.vel;
			}
		LENG A 1 bright A_FadeOut(0.01);
		loop;
	}
}

//the class that spawns on the targets hit by BFG ball tracers
Class BD_BFGExtra : BFGExtra //replaces BFGExtra
{
Default {
	translation "GreenPlasma";
	damagetype "BFGSplash";
	scale 0.3;
	renderstyle "Add";
	alpha 0.6;
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			If(bdoom_debris) {
				for (int i = 24; i > 0; i--)
					A_SpawnItemEx("BFGExtraParticle",frandom(-10,10),frandom(-10,10),frandom(-2,10),frandom(-0.5,0.5),frandom(-0.5,0.5),frandom(0,0.5),failchance:64);
				}
			}
		PEXP AABBCCDDEEFFGGHHIIJJKKLLMM 1 bright A_FadeOut(0.005);
		stop;
	}
}

Class BFGExtraParticle : Flare_General
{
Default {
	scale 0.07;
	}
states
	{
	Spawn:
		SPRK B 1 {
			A_FadeOut(0.004);
			scale*=0.96;
			}
		wait;
	}
}

//small particles spawned by BFG hits
Class BFGPlasmaPiece : BluePlasmaPiece
{
Default {
	translation "GreenPlasma";
	alpha 1.0;
	scale 0.1;
	smalldebris.dgravity 0.0;
	}
}

//large plasma shreds spawned by heavy laser
Class BFGPlasmaShred : BluePlasmaShred
{
Default {
	translation "GreenPlasma";
	}
}

// particles for heavy laser (alt attack)
Class BFGRailBall : Flare_General
{
Default {
	renderstyle "Add";
	alpha 0.6;
	scale 0.17;
	translation "GreenPlasma";
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	if (target && distance3D(target) < 56)
		self.destroy();
	}
states
	{
	Spawn:
		TNT1 A 0 NoDelay {
			if(bdoom_debris)
				A_SpawnItemEx("BFGRailFlare",0,0,0,0,0,0,0);
			}
		PEXP ABCDEFGHIJKLM 1 bright A_FadeOut(0.1);
		stop;
	}
}

//flares for heavy laser particles
Class BFGRailFlare : Flare_General
{
Default {
	alpha 0.05;
	scale 0.2;
	}
states
	{
	Spawn:
		LENG A 1 bright A_FadeOut(0.0025);
		loop;
	}
}

//bigger particles used on the last heavy laser rail when the user stops shooting (too obnoxious to use all the time)
Class BFGRailBall_Hold : BFGRailBall
{
states
	{
	Spawn:
		TNT1 A 0 noDelay {
			if(bdoom_debris)
				A_SpawnItemEx("BFGRailFlare_Hold");
			}
		TNT1 A 0 A_Jump(256,1,2,3,4,5);
		PEXP ABCDEFGHIJKLM 1 bright A_FadeOut(0.2);
		stop;
	}
}

//flares for bigger heavy laser particles
Class BFGRailFlare_Hold : BFGRailFlare
{
states
	{
	Spawn:
		LENG A 1 bright A_FadeOut(0.01);
		loop;
	}
}

//heavy laser puff
Class BFGRailPuff : BDoomPuff
{
Default {
	+BLOODLESSIMPACT
	+ALWAYSPUFF
	+NOGRAVITY
	damagetype "BFGSplash";
	}
states
	{
	Spawn:
		TNT1 A 1 NoDelay {
			if (bdoom_debris) {
				for (int i = 12; i > 0; i--)
					A_SpawnItemEx("BFGPlasmaPiece",0,0,0,frandom(-2.5,2.5),frandom(-2.5,2.5),frandom(-2.5,2.5),random(0,360));
				for (int i = 8; i > 0; i--)
					A_SpawnItemEx("BFGPlasmaShred",0,0,0,randompick(-5,5),randompick(-5,5),randompick(-5,5),random(0,360));
				}
			}
		stop;
	}
}


Class ModernBFGBall : BD_BFGBall
{
//wcharge just transfers the charge value from the weapon. 1-8 is normal shot, 9-12 is overcharge (12 leads to self-destruct)
double wcharge;
/*wpower determines the power and range of rails; it's  the same as wcharge but clamped to 8 
 (because overcharging isn't meant to increase power, it just lets you hold off the shot)*/
double wpower;
Default {
	+ROLLSPRITE
	+DONTTHRUST
	speed 15;
	renderstyle "Add";
	scale 0.15;
	alpha 0.9;
	decal "none"; //"BFGLightning";
	damage 0;
	radius 14;
	height 8;
	}
Override void PostBeginPlay() {
	super.PostBeginPlay();
	if (target) {
		species = target.species;
		//console.printf("%s",species);
		let BFG = BD_BFG9000 (target.player.readyweapon);
		if (BFG) {
			wcharge = BFG.wcharge;
			wpower = clamp(BFG.wcharge,1,8);
			A_SetScale (0.06 + wcharge * 0.03);
			}
		}
	trailactor = "MBFGTrail";
	}
States
	{
	Spawn:
		TNT1 A 0 NoDelay {
			if (wcharge >= 12)
				return ResolveState("SelfDestruct");
			A_PlaySound("weapons/bfg/fly",6,1.0,TRUE);
			if(bdoom_debris) {
				let f = BD_ProjFlare(Spawn("BD_ProjFlare",pos));
				f.fcolor = 'green';
				f.vel = vel;
				f.master = self;
				f.scale = scale;
				}
			return ResolveState(null);
			}
	SpawnDo:
		COIR ABCDEFGHIJKLMNOPQRSTUV 2 bright;
		loop;
	Death.Sky:
		TNT1 A 1 A_RemoveChildren(1,RMVF_EVERYTHING);
		stop;
	Death:
		TNT1 A 0 {
			A_RemoveChildren(1,RMVF_EVERYTHING);
			if (wcharge >= 12)
				return ResolveState("SelfDestruct");
			//A_StopSound(6);
			A_PlaySound("weapons/bfg/explosion",6);
			A_SprayDecal("BFGLightning",radius+8);
			A_Explode(60*wpower,64+28*wpower,XF_NOSPLASH,alert:true,fulldamagedistance:64+20*wpower,damagetype:"BFGSplash");
			return ResolveState(null);
			}
			
		COIX AAAAAAAAAA 1 bright {
			//visuals
			roll+=10;
			if (bdoom_debris) {
				A_CustomRailGun(0,0,"","FFFFFF",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,maxdiff:15,pufftype:"NullPuff",random(0,360),random(0,360),range:random(48,80),sparsity:1.0,spawnclass:"MBFGRailParticle");			
				A_CustomRailGun(0,0,"","FFFFFF",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,maxdiff:15,pufftype:"NullPuff",random(0,360),random(0,360),range:random(48,80),sparsity:1.0,spawnclass:"MBFGRailParticle");
				}
			else {
				A_CustomRailGun(0,0,"","CCFFCC",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,maxdiff:15,pufftype:"NullPuff",random(0,360),random(0,360),range:random(48,80),duration:random(100,150),sparsity:0.15,driftspeed:0.3);
				A_CustomRailGun(0,0,"","CCFFCC",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,maxdiff:15,pufftype:"NullPuff",random(0,360),random(0,360),range:random(48,80),duration:random(100,150),sparsity:0.15,driftspeed:0.3);
				}
			
			//iterator
			double closestDist = double.infinity;
			double rdistance = 144*wpower; //effective distance depends on charge
			actor targetActor = null; // This HAS to be initialized here, as local variables aren't implicitly initialized.
			BlockThingsIterator itr = BlockThingsIterator.Create(self,rdistance);
			while (itr.next()) {
				let next = itr.thing;
				//skip the shooter
				if (next == target)
					continue; 
				//must only affect hostile monsters or players
				if (!next.bShootable || (!next.bIsMonster && !(next is "PlayerPawn")) || !target.IsHostile (next) || target.bKILLED)
					continue;
				
				//just to be safe, check if it's still within the effective range
				double dist = self.distance3d(next);				
				if (dist > rdistance)
					continue;
				
				master = next; //get the pointer to the found monster (because CheckLOF can't use pointers directly)
				A_Face(next,0,0,flags: FAF_MIDDLE);
				if (!CheckLOF (flags: CLOFF_NoAim | CLOFF_SKIPOBSTACLES , ptr_target: AAPTR_Master))
					continue;
				if (dist < closestDist) {
					closestDist = dist;
					targetActor = next;
					}
				}
				master = null;
				
				if (targetActor != null) {
					A_Face(targetActor,0,0,flags: FAF_MIDDLE);
									
					A_CustomRailGun(30 + 22*wpower,0,"","40FF40",RGF_NOPIERCING|RGF_FULLBRIGHT|RGF_CENTERZ|RGF_SILENT ,maxdiff:10,pufftype:"MBFGRailPuff",range:rdistance,duration:random(100,150),sparsity:0.15,driftspeed:0.3);
					
					//A_CustomRailGun(30 + 22*wpower,0,"","FFFFFF",RGF_NOPIERCING|RGF_FULLBRIGHT|RGF_CENTERZ|RGF_SILENT,aim:0,maxdiff:15,"MBFGRailPuff",range:rdistance,duration:512,sparsity:6.5,spawnclass:"MBFGRailParticle");
				}
			}
		COIX ABCDEFGHIJKLM 1 bright;
		stop;				

	SelfDestruct:
		TNT1 A 0 {
			A_Stop();
			A_StopSound(6);
			A_SetScale(1.0,1.0);
			A_PlaySound("Mweapons/bfg/overcharge",6);
			A_Explode(10*wpower,250,flags:XF_HURTSOURCE|XF_NOSPLASH,alert:true,fulldamagedistance:250,damagetype:"BFGSplash");
			}
		COIX ABCDEFGHIJKLM 2 bright A_CustomRailGun(0,0,"","FFFFFF",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,0,15,"NullPuff",random(0,360),random(0,360),random(22,56),56,3.0,0,"MBFGRailParticle");
		stop;
	}
}

Class MBFGTrail : Flare_General
{
Default {
	alpha 0.6;
	+ROLLSPRITE
	}
override void PostBeginPlay() {
	super.PostBeginPlay();
	if (!target)
		return;
	scale = target.scale*0.9;
	roll = target.roll;
	SetOrigin((pos.x+frandom(-2.5,2.5),pos.y+frandom(-2.5,2.5),pos.z+frandom(-2.5,2.5)),false);
	}
states
	{	
	Spawn:
		COIR ABCDEFGHIJKLMNOPQRSTUV 1 bright {
			A_FadeOut(0.05);
			scale*=0.95;
			}
		stop;
	}
}

Class MBFGRailPuff : BFGRailPuff
{
Default {
	+ALLOWTHRUFLAGS
	+MTHRUSPECIES //this will make the rails pass through the player who shot the projectile
	+PUFFGETSOWNER
	+NODECAL
	}
}

Class MBFGRailParticle : Flare_General
{
Default {
	scale 0.07;
	}
override Void PostBeginPlay() {
	super.PostBeginPlay();
	vel = (frandom(-0.1,0.1),frandom(-0.1,0.1),frandom(-0.1,0.1));
	}
states
	{
	Spawn:
		SPRK B 1 {
			A_FadeOut(0.002);
			scale*=0.98;
			}
		wait;
	}
}
	

/*
Class RBFGRailParticle : Flare_General
{
Default {
	alpha 0.6;
	scale 0.03;
	translation "GreenPlasma";
	}
override void PostBeginPlay () {
	super.PostBeginPlay();
	if (bdoom_debris)
		A_SpawnItemEx("BFGBallRayFlare",flags:SXF_TRANSFERPOINTERS);
	}
states
	{
	Spawn:
		PEXP ABCDEFGHIJKL 5 bright;
		stop;
	}
}
