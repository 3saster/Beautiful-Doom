class WeaponOverrideHandler : EventHandler {
	ui bool ShowWeapHelp;
    override void consoleProcess(ConsoleEvent e) {
		if (e.name != "BD_ShowWeapHelp")
			return;
		if (bdoom_weapons != 0)
			ShowWeapHelp = !ShowWeapHelp;
		else
			ShowWeapHelp = false;
    }
    override void renderOverlay(RenderEvent e) {
        if (ShowWeapHelp) {
			let textureName = "";
			PlayerInfo player	= players[consoleplayer];
			PlayerPawn mo		= player.mo;
			if (!player || !mo)
				return;
            let weap = player.readyWeapon.GetClassName();
			if (bdoom_weapons == 1) {
				switch (weap) {
					case 'BD_Fist' 			: TextureName = "graphics/popups/e_fist.png"; 		break;
					case 'BD_Chainsaw' 		: TextureName = "graphics/popups/e_chainsaw.png"; 	break;
					case 'BD_Pistol' 			: 
						if (mo.CountInv('BD_Pistol') > 1)
							TextureName = "graphics/popups/e_2pist.png"; 	
						else 
							TextureName = "graphics/popups/e_pistol.png"; 	
						break;
					case 'BD_Shotgun'			: TextureName = "graphics/popups/e_shot.png"; 		break;
					case 'BD_SuperShotgun' 	: TextureName = "graphics/popups/e_SSG.png"; 		break;
					case 'BD_Chaingun' 		: TextureName = "graphics/popups/e_Cgun.png"; 		break;
					case 'BD_RocketLauncher'	: TextureName = "graphics/popups/e_Rock.png";		break;
					case 'BD_PlasmaRifle' 	: TextureName = "graphics/popups/e_Plasma.png";	break;
					case 'BD_BFG9000' 			: TextureName = "graphics/popups/e_BFG.png"; 		break;
				}
			}
			else if (bdoom_weapons == 2) {
				switch (weap) {
					case 'BD_Fist' 			: TextureName = "graphics/popups/m_fist.png"; 		break;
					case 'BD_Chainsaw' 		: TextureName = "graphics/popups/m_chainsaw.png"; 	break;
					case 'BD_Pistol' 			: TextureName = "graphics/popups/m_pistol.png"; 	break;
					case 'BD_Shotgun'			: TextureName = "graphics/popups/m_shot.png"; 		break;
					case 'BD_SuperShotgun' 	: TextureName = "graphics/popups/m_SSG.png"; 		break;
					case 'BD_Chaingun' 		: TextureName = "graphics/popups/m_AR.png"; 		break;
					case 'BD_RocketLauncher'	: TextureName = "graphics/popups/m_Rock.png";		break;
					case 'BD_PlasmaRifle' 	: TextureName = "graphics/popups/m_Plasma.png";	break;
					case 'BD_BFG9000' 			: TextureName = "graphics/popups/m_BFG.png"; 		break;
				}
			}
			//StatusBar.BeginHUD (1.0, true, 1920, 1080);
			vector2 hscale = StatusBar.GetHUDScale();
			hscale = ( int(hscale.x), int(hscale.y)*1.2 ); // Force even scalar.
			double rwidth  = (Screen.getWidth() / double(1920)) / hscale.x;
			double rheight = (Screen.getHeight() / double(1080)) / hscale.y;
			vector2 rscale = (rwidth, rheight);
			vector2 rpos = ( 1*rwidth, 200*rheight );
			StatusBar.DrawImage (textureName, rpos,scale:rscale);
        }
    }
	// These items have no new visuals and only new pickup sounds, so, I insert them via an event handler, without replacing the actual actors
	override void WorldThingSpawned(WorldEvent e) {
		if (e.thing && e.thing.player && !e.thing.FindInventory("BD_OverlayControl"))
			e.thing.GiveInventory("BD_OverlayControl",1);
		if (!bdoom_replaceitems)
			return;
		if (!(e.thing is "Inventory"))
			return;
		let inv = Inventory(e.thing);
		if (!inv)
			return;
		switch (inv.GetClassName()) {
			case 'Clip' 		: inv.pickupsound = "ammo/clip";			break;
			case 'ClipBox' 	: inv.pickupsound = "ammo/clipbox";		break;
			case 'Shell' 		: inv.pickupsound = "ammo/shells";			break;
			case 'ShellBox' 	: inv.pickupsound = "ammo/shells";			break;
			case 'RocketAmmo' 	: inv.pickupsound = "ammo/rockets";		break;
			case 'RocketBox' 	: inv.pickupsound = "ammo/rockets";		break;
			case 'Cell' 		: inv.pickupsound = "ammo/cells";			break;
			case 'CellPack' 	: inv.pickupsound = "ammo/cells";			break;
			case 'BackPack' 	: inv.pickupsound = "pickups/backpack";	break;
			case 'RadSuit' 	: inv.pickupsound = "pickups/radsuit";	break;
		}
	}

	// Replaces weapons on the map if the appropriate CVAR is true.
	override void CheckReplacement(ReplaceEvent e) {
		if (!bdoom_replaceweapons)
			return;
		switch (e.Replacee.GetClassName()) {
			case 'Fist' 			: e.Replacement = 'BD_Fist'; 				break;
			case 'Berserk' 		: e.Replacement = 'BD_Berserk'; 			break;
			case 'Chainsaw' 		: e.Replacement = 'BD_Chainsaw'; 			break;
			case 'Pistol' 			: e.Replacement = 'BD_Pistol'; 			break;
			case 'Shotgun'			: e.Replacement = 'BD_Shotgun'; 			break;
			case 'SuperShotgun' 	: e.Replacement = 'BD_SuperShotgun';		break;
			case 'Chaingun' 		: e.Replacement = 'BD_Chaingun'; 			break;
			case 'RocketLauncher'	: e.Replacement = 'BD_RocketLauncher'; 	break;
			case 'PlasmaRifle' 	: e.Replacement = 'BD_PlasmaRifle'; 		break;
			case 'BFG9000' 		: e.Replacement = 'BD_BFG9000'; 			break;
		}
		e.IsFinal = true;
	}
		
	/* This override detects if the player received a vanilla weapon directly (e.g. via ACS script)
	and replaces them with one from the mod. It also replaces the starting weapon.
	Initial version provided by Zombie
	*/
	override void WorldTick() {		
		for (int pn = 0; pn < MAXPLAYERS; pn++) {
			if (!playerInGame[pn])
				continue;
			PlayerInfo player	= players[pn];
			PlayerPawn mo		= player.mo;
			if (!player || !mo)
				continue;
			if (!player.readyweapon)
				continue;
			let oldweap = player.pendingweapon.GetClassName();
			let oldweapr = player.readyweapon.GetClassName();
			if (bdoom_replaceweapons) { 
				switch (oldweap) {
					case 'Fist' 			:    player.pendingweapon = GetWeapon(mo, "BD_Fist"			); mo.TakeInventory(oldweap,1); break;
					case 'Chainsaw' 		:    player.pendingweapon = GetWeapon(mo, "BD_Chainsaw"		); mo.TakeInventory(oldweap,1); break;
					case 'Pistol' 			:    player.pendingweapon = GetWeapon(mo, "BD_Pistol"			); mo.TakeInventory(oldweap,1); break;
					case 'Shotgun'			:    player.pendingweapon = GetWeapon(mo, "BD_Shotgun"			); mo.TakeInventory(oldweap,1); break;
					case 'SuperShotgun' 	:    player.pendingweapon = GetWeapon(mo, "BD_SuperShotgun"	); mo.TakeInventory(oldweap,1); break;
					case 'Chaingun' 		:    player.pendingweapon = GetWeapon(mo, "BD_Chaingun"		); mo.TakeInventory(oldweap,1); break;
					case 'RocketLauncher'	:    player.pendingweapon = GetWeapon(mo, "BD_RocketLauncher"	); mo.TakeInventory(oldweap,1); break;
					case 'PlasmaRifle' 	:    player.pendingweapon = GetWeapon(mo, "BD_PlasmaRifle"	); mo.TakeInventory(oldweap,1); break;
					case 'BFG9000' 		:    player.pendingweapon = GetWeapon(mo, "BD_BFG9000"			); mo.TakeInventory(oldweap,1); break;
				}				
				
				switch (oldweapr) {
					case 'Fist' 			:    player.pendingweapon = GetWeapon(mo, "BD_Fist"			); mo.TakeInventory(oldweapr,1); break;
					case 'Chainsaw' 		:    player.pendingweapon = GetWeapon(mo, "BD_Chainsaw"		); mo.TakeInventory(oldweapr,1); break;
					case 'Pistol' 			:    player.pendingweapon = GetWeapon(mo, "BD_Pistol"			); mo.TakeInventory(oldweapr,1); break;
					case 'Shotgun'			:    player.pendingweapon = GetWeapon(mo, "BD_Shotgun"			); mo.TakeInventory(oldweapr,1); break;
					case 'SuperShotgun' 	:    player.pendingweapon = GetWeapon(mo, "BD_SuperShotgun"	); mo.TakeInventory(oldweapr,1); break;
					case 'Chaingun' 		:    player.pendingweapon = GetWeapon(mo, "BD_Chaingun"		); mo.TakeInventory(oldweapr,1); break;
					case 'RocketLauncher'	:    player.pendingweapon = GetWeapon(mo, "BD_RocketLauncher"	); mo.TakeInventory(oldweapr,1); break;
					case 'PlasmaRifle' 	:    player.pendingweapon = GetWeapon(mo, "BD_PlasmaRifle"	); mo.TakeInventory(oldweapr,1); break;
					case 'BFG9000' 		:    player.pendingweapon = GetWeapon(mo, "BD_BFG9000"			); mo.TakeInventory(oldweapr,1); break;
				}				
			}
			else {		
				//mo.speed = mo.default.speed; 	//to ensure the player is no longer affected by speed-altering effects of kicking or modern rifle ADS
			/*
			NOTE: You're NOT supposed to be able to toggle bdoom_replaceweapons whenever you want. You have to restart your game.
			So, the fact that, if you had it enabled and then disabled it, and you ended up having no weapons, is intentional. Doing it any other way
			would cause more issues.
			The part below has only one purpose: if you disable Beautiful Doom Weapons, the block below makes sure they never appear in your inventory.
			You won't receive them with "give all" or "give weapons". Without this section, you wouldn't be able to avoid using Beautifull Doom guns at all.
			*/
				if (mo.FindInventory('BD_Fist'))
					mo.TakeInventory('BD_Fist',1);
				if (mo.FindInventory('BD_Chainsaw'))
					mo.TakeInventory('BD_Chainsaw',1);
				if (mo.FindInventory('BD_Pistol'))
					mo.TakeInventory('BD_Pistol',1);
				if (mo.FindInventory('BD_Shotgun'))
					mo.TakeInventory('BD_Shotgun',1);
				if (mo.FindInventory('BD_SuperShotgun'))
					mo.TakeInventory('BD_SuperShotgun',1);
				if (mo.FindInventory('BD_Chaingun'))
					mo.TakeInventory('BD_Chaingun',1);
				if (mo.FindInventory('BD_RocketLauncher'))
					mo.TakeInventory('BD_RocketLauncher',1);
				if (mo.FindInventory('BD_PlasmaRifle'))
					mo.TakeInventory('BD_PlasmaRifle',1);
				if (mo.FindInventory('BD_BFG9000'))
					mo.TakeInventory('BD_BFG9000',1);
			}
		}
	}
	// Courtesy of Zombie
	private Weapon GetWeapon(PlayerPawn mo, Class<Weapon> type) {
		let weap = Weapon(mo.FindInventory(type));
		if (weap)
			return weap;
		else
			return Weapon(mo.GiveInventoryType(type));
	}
}

/* Simply replaces actors with modded ones if the appropriate CVAR is true.
Helps to keep the mod compatible with other actor-replacing mods. 
Separate CVARs for each monsters are also supported. */

class BD_ActorOverrideHandler : EventHandler {
	/*	This function is designed for old wads that replace decorations by directly replacing sprites, not using actors or classes.
		The function is used to check sprite names in the archives loaded in the game: if it finds that the same sprite lump appears
		more than once, we conclude that one of the archives replaces said sprite directly, and probably for a good reason.
		If that's the case, we'll let the original actor spawn instead of the Beautiful Doom version. This is important for mapsets
		such as Deus Vult 2, which use a lot of custom decorations with vanilla sprite names.
		All of this only happens if bdoom_safereplacement CVAR is true (default); otherwise replacement is forced.
	*/
	bool CheckVanillaReplacement (string lumpname) {
		if (!bdoom_safereplacement)
			return false;
		int firstLump = Wads.FindLump(lumpname,0,1);
		int nextLump =  Wads.FindLump(lumpname,firstLump +1,1);
		if(nextLump != -1)
			return true;
		else
			return false;
	}
	static const name BD_SP_DUDE1[] = { "textures/BD_DUDE1a.png", "textures/BD_DUDE1b.png" };
	static const name BD_SP_DUDE2[] = { "textures/BD_DUDE2a.png", "textures/BD_DUDE2b.png" };
	static const name BD_SP_DUDE4[] = { "textures/BD_DUDE4a.png", "textures/BD_DUDE4b.png", "textures/BD_DUDE4c.png" };
	static const name BD_SP_DUDE5[] = { "textures/BD_DUDE5a.png", "textures/BD_DUDE5b.png", "textures/BD_DUDE5c.png", "textures/BD_DUDE5d.png" };
	static const name BD_SP_DUDE7[] = { "textures/BD_DUDE7a.png", "textures/BD_DUDE7b.png", "textures/BD_DUDE7c.png" };
	static const name BD_SP_DUDE8[] = { "textures/BD_DUDE8a.png", "textures/BD_DUDE8b.png", "textures/BD_DUDE8c.png" };
	override void WorldLoaded(WorldEvent e) {
		if (!bdoom_replaceobjects)
			return;
		level.ReplaceTextures("SP_DUDE1", BD_SP_DUDE1[random(0,1)],0);
		level.ReplaceTextures("SP_DUDE2", BD_SP_DUDE2[random(0,1)],0);
		level.ReplaceTextures("SP_DUDE4", BD_SP_DUDE4[random(0,2)],0);
		level.ReplaceTextures("SP_DUDE5", BD_SP_DUDE5[random(0,3)],0);
		level.ReplaceTextures("SP_DUDE7", BD_SP_DUDE7[random(0,2)],0);
		level.ReplaceTextures("SP_DUDE8", BD_SP_DUDE8[random(0,2)],0);
	}
	override void CheckReplacement(ReplaceEvent e) {
		if (bdoom_blood ) {	
			switch (e.Replacee.GetClassName()) {
				case 'Blood' : 				e.Replacement = 'BD_Blood'; 	break;
				case 'BloodSplatter' : 		e.Replacement = 'BD_Blood'; 	break;
			}
		}
		if (bdoom_replacemonsters) {	
			switch (e.Replacee.GetClassName()) {
				case 'Zombieman' 			: if (bdoom_Zombieman) 			e.Replacement = 'BD_Zombieman'; 			break;
				case 'ShotgunGuy' 			: if (bdoom_ShotgunGuy) 			e.Replacement = 'BD_ShotgunGuy'; 			break;
				case 'ChaingunGuy' 		: if (bdoom_ChaingunGuy) 			e.Replacement = 'BD_ChaingunGuy'; 		break;
				case 'WolfensteinSS'		: if (bdoom_WolfensteinSS) 		e.Replacement = 'BD_WolfensteinSS'; 		break;
				case 'DoomImp' 			: if (bdoom_DoomImp) 				e.Replacement = 'BD_DoomImp'; 				break;
				case 'Demon' 				: if (bdoom_Demon) 				e.Replacement = 'BD_Demon'; 				break;
				case 'Spectre' 			: if (bdoom_Spectre) 				e.Replacement = 'BD_Spectre'; 				break;
				case 'Cacodemon' 			: if (bdoom_Cacodemon) 			e.Replacement = 'BD_Cacodemon'; 			break;
				case 'PainElemental'		: if (bdoom_PainElemental) 		e.Replacement = 'BD_PainElemental'; 		break;
				case 'LostSoul'			: if (bdoom_LostSoul) 				e.Replacement = 'BD_LostSoul'; 			break;
				case 'Revenant' 			: if (bdoom_Revenant) 				e.Replacement = 'BD_Revenant'; 			break;
				case 'Arachnotron' 		: if (bdoom_Arachnotron) 			e.Replacement = 'BD_Arachnotron'; 		break;
				case 'Fatso' 				: if (bdoom_Fatso) 				e.Replacement = 'BD_Fatso'; 				break;
				case 'HellKnight' 			: if (bdoom_HellKnight) 			e.Replacement = 'BD_HellKnight'; 			break;
				case 'BaronOfHell' 		: if (bdoom_BaronOfHell) 			e.Replacement = 'BD_BaronOfHell'; 		break;
				case 'ArchVile' 			: if (bdoom_ArchVile) 				e.Replacement = 'BD_ArchVile'; 			break;
				case 'Cyberdemon' 			: if (bdoom_Cyberdemon) 			e.Replacement = 'BD_Cyberdemon'; 			break;
				case 'SpiderMastermind' 	: if (bdoom_SpiderMastermind) 	e.Replacement = 'BD_SpiderMastermind';	break;
				case 'BossBrain' 			: if (bdoom_IconOfSin) 			e.Replacement = 'BD_BossBrain';			break;
				case 'SpawnShot' 			: if (bdoom_IconOfSin) 			e.Replacement = 'BD_SpawnShot';			break;
			//decorative corpses:
				case 'DeadZombieman' 		: if (bdoom_Zombieman) 			e.Replacement = 'BD_DeadZombieman'; 		break;
				case 'DeadShotgunGuy' 		: if (bdoom_ShotgunGuy) 			e.Replacement = 'BD_DeadShotgunGuy'; 		break;
				case 'DeadDoomImp' 		: if (bdoom_DoomImp) 				e.Replacement = 'BD_DeadDoomImp'; 		break;
				case 'DeadDemon' 			: if (bdoom_Demon) 				e.Replacement = 'BD_DeadDemon'; 			break;
				case 'DeadCacodemon' 		: if (bdoom_Cacodemon) 			e.Replacement = 'BD_DeadCacodemon'; 		break;
				case 'DeadLostSoul'		: if (bdoom_LostSoul) 				e.Replacement = 'BD_DeadLostSoul'; 		break;
			}
		}
		if (bdoom_replaceitems) {
			switch (e.Replacee.GetClassName()) {
				case 'Blursphere' 				: e.Replacement = 'BD_Blursphere'; 				break;
				case 'Soulsphere' 				: e.Replacement = 'BD_Soulsphere'; 				break;
				case 'Megasphere' 				: e.Replacement = 'BD_Megasphere'; 				break;
				case 'InvulnerabilitySphere' 	: e.Replacement = 'BD_InvulnerabilitySphere'; 	break;
				case 'Allmap' 					: e.Replacement = 'BD_Allmap'; 					break;
				case 'Infrared' 				: e.Replacement = 'BD_Infrared'; 					break;
				case 'HealthBonus' 			: e.Replacement = 'BD_HealthBonus'; 				break;
				case 'ArmorBonus' 				: e.Replacement = 'BD_ArmorBonus'; 				break;
				case 'Stimpack' 				: e.Replacement = 'BD_Stimpack'; 					break;
				case 'Medikit' 				: e.Replacement = 'BD_Medikit'; 					break;
				case 'GreenArmor' 				: e.Replacement = 'BD_GreenArmor'; 				break;
				case 'BlueArmor' 				: e.Replacement = 'BD_BlueArmor'; 				break;
				case 'RedCard' 				: e.Replacement = 'BD_RedCard'; 					break;
				case 'BlueCard' 				: e.Replacement = 'BD_BlueCard'; 					break;
				case 'YellowCard' 				: e.Replacement = 'BD_YellowCard'; 				break;
				case 'RedSkull' 				: e.Replacement = 'BD_RedSkull'; 					break;
				case 'BlueSkull' 				: e.Replacement = 'BD_BlueSkull'; 				break;
				case 'YellowSkull' 			: e.Replacement = 'BD_YellowSkull'; 				break;
			}
		}
		if (bdoom_replaceobjects) {
			switch (e.Replacee.GetClassName()) {
					//VICTIMS
				Case 'HangTLookingDown' 	: if (!CheckVanillaReplacement("HDB3A0"))	e.Replacement = 'BD_HangingTorso'; 		break;
				Case 'HangTLookingUp' 		: if (!CheckVanillaReplacement("HDB5A0"))	e.Replacement = 'BD_HangingTorso'; 		break;
				Case 'HangTNoBrain' 		: if (!CheckVanillaReplacement("HDB6A0"))	e.Replacement = 'BD_HangingTorso'; 		break;
				Case 'HangTSkull' 			: if (!CheckVanillaReplacement("HDB4A0"))	e.Replacement = 'BD_HangingTorso'; 		break;
				Case 'HangBNoBrain' 		: if (!CheckVanillaReplacement("HDB2A0"))	e.Replacement = 'BD_HangingBody'; 		break;
				Case 'HangNoGuts' 			: if (!CheckVanillaReplacement("HDB1A0"))	e.Replacement = 'BD_HangingBody'; 		break;
				Case 'BloodyTwitch'		: if (!CheckVanillaReplacement("GOR1A0"))	e.Replacement = 'BD_BloodyTwitch'; 		break;
				Case 'NonSolidTwitch'		: if (!CheckVanillaReplacement("GOR1A0"))	e.Replacement = 'BD_NonsolidTwitch'; 		break;				
				Case 'Meat2'				: if (!CheckVanillaReplacement("GOR2A0"))	e.Replacement = 'BD_Meat2'; 				break;
				Case 'Meat3'				: if (!CheckVanillaReplacement("GOR3A0"))	e.Replacement = 'BD_Meat3'; 				break;
				Case 'Meat4'				: if (!CheckVanillaReplacement("GOR4A0"))	e.Replacement = 'BD_Meat4'; 				break;
				Case 'Meat5'				: if (!CheckVanillaReplacement("GOR5A0"))	e.Replacement = 'BD_Meat5'; 				break;				
				Case 'NonsolidMeat2'		: if (!CheckVanillaReplacement("GOR2A0"))	e.Replacement = 'BD_NonsolidMeat2'; 		break;
				Case 'NonsolidMeat3'		: if (!CheckVanillaReplacement("GOR3A0"))	e.Replacement = 'BD_NonsolidMeat3'; 		break;
				Case 'NonsolidMeat4'		: if (!CheckVanillaReplacement("GOR4A0"))	e.Replacement = 'BD_NonsolidMeat4';		break;
				Case 'NonsolidMeat5'		: if (!CheckVanillaReplacement("GOR5A0"))	e.Replacement = 'BD_NonsolidMeat5';		break;
				Case 'DeadStick'			: if (!CheckVanillaReplacement("POL1A0"))	e.Replacement = 'BD_DeadStick';			break;
				Case 'LiveStick'			: if (!CheckVanillaReplacement("POL6A0"))	e.Replacement = 'BD_LiveStick';			break;
				Case 'HeadOnAStick'		: if (!CheckVanillaReplacement("POL4A0"))	e.Replacement = 'BD_HeadOnAStick';		break;
				Case 'HeadsOnAStick'		: if (!CheckVanillaReplacement("POL2A0"))	e.Replacement = 'BD_HeadsOnAStick';		break;
				Case 'ColonGibs'			: if (!CheckVanillaReplacement("POB1A0") && bdoom_gibs)	e.Replacement = 'BD_ColonGibs';		break;
				Case 'SmallBloodPool'		: if (!CheckVanillaReplacement("POB2A0") && bdoom_blood)	e.Replacement = 'BD_SmallBloodPool';	break;
					//MISC
				case 'TeleportFog' 		: if (!CheckVanillaReplacement("HDB5A0"))	e.Replacement = 'BD_TeleportFog';			break;
				case 'ExplosiveBarrel' 	: if (!CheckVanillaReplacement("HDB5A0"))	e.Replacement = 'BD_ExplosiveBarrel';		break;
				case 'EvilEye' 			: if (!CheckVanillaReplacement("CEYEA0"))	e.Replacement = 'BD_EvilEye';				break;
				case 'FloatingSkull' 		: if (!CheckVanillaReplacement("FSKUA0"))	e.Replacement = 'BD_FloatingSkull';		break;
				case 'HeartColumn' 		: if (!CheckVanillaReplacement("COL5A0"))	e.Replacement = 'BD_HeartColumn';			break;
				case 'BigTree' 			: if (!CheckVanillaReplacement("TRE2A0"))	e.Replacement = 'BD_BigTree';				break;
				case 'TorchTree' 			: if (!CheckVanillaReplacement("TRE1A0"))	e.Replacement = 'BD_TorchTree';			break;
					//LIGHTS
				case 'GreenTorch' 			: if (!CheckVanillaReplacement("TGRNA0"))	e.Replacement = 'TallTorch_Green';		break;
				case 'RedTorch' 			: if (!CheckVanillaReplacement("TREDA0"))	e.Replacement = 'TallTorch_Red';			break;
				case 'BlueTorch' 			: if (!CheckVanillaReplacement("TBLUA0"))	e.Replacement = 'TallTorch_Blue';			break;
				case 'ShortGreenTorch'		: if (!CheckVanillaReplacement("SMGTA0"))	e.Replacement = 'ShortTorch_Green';		break;
				case 'ShortRedTorch' 		: if (!CheckVanillaReplacement("SMRTA0"))	e.Replacement = 'ShortTorch_Red';			break;
				case 'ShortBlueTorch' 		: if (!CheckVanillaReplacement("SMBTA0"))	e.Replacement = 'ShortTorch_Blue';		break;
				case 'Candlestick' 		: if (!CheckVanillaReplacement("CANDA0"))	e.Replacement = 'BD_Candlestick';			break;
				case 'Candelabra' 			: if (!CheckVanillaReplacement("CBRAA0"))	e.Replacement = 'BD_Candelabra';			break;
				case 'BurningBarrel' 		: if (!CheckVanillaReplacement("FCANA0"))	e.Replacement = 'BD_BurningBarrel';		break;
				case 'Techlamp' 			: if (!CheckVanillaReplacement("TLMPA0"))	e.Replacement = 'BD_Techlamp';				break;
				case 'Techlamp2' 			: if (!CheckVanillaReplacement("TLP2A0"))	e.Replacement = 'BD_Techlamp2';			break;
				case 'Column' 				: if (!CheckVanillaReplacement("COLUA0"))	e.Replacement = 'BD_Column';				break;
			}
		}
		e.IsFinal = true;
	}
	//  This override tells the game which of the original monsters the modded monster replaces. Necessary for "hardcoded" effects such as Map07 or E1M8
	override void Checkreplacee(ReplacedEvent e) {
		if (!bdoom_replacemonsters)
			return;
		switch (e.Replacement.GetClassName()) {
			case 'BD_Zombieman' 			: if (bdoom_Zombieman) 			e.Replacee = 'Zombieman'; 			break;
			case 'BD_ShotgunGuy' 			: if (bdoom_ShotgunGuy) 			e.Replacee = 'ShotgunGuy'; 		break;
			case 'BD_ChaingunGuy' 			: if (bdoom_ChaingunGuy) 			e.Replacee = 'ChaingunGuy'; 		break;
			case 'BD_WolfensteinSS'		: if (bdoom_WolfensteinSS) 		e.Replacee = 'WolfensteinSS'; 	break;
			case 'BD_DoomImp' 				: if (bdoom_DoomImp) 				e.Replacee = 'DoomImp'; 			break;
			case 'BD_Demon' 				: if (bdoom_Demon) 				e.Replacee = 'Demon'; 				break;
			case 'BD_Spectre' 				: if (bdoom_Spectre) 				e.Replacee = 'Spectre'; 			break;
			case 'BD_Cacodemon' 			: if (bdoom_Cacodemon) 			e.Replacee = 'Cacodemon'; 			break;
			case 'BD_PainElemental'		: if (bdoom_PainElemental) 		e.Replacee = 'PainElemental'; 	break;
			case 'BD_LostSoul'				: if (bdoom_LostSoul) 				e.Replacee = 'LostSoul'; 			break;
			case 'BD_Revenant' 			: if (bdoom_Revenant) 				e.Replacee = 'Revenant'; 			break;
			case 'BD_Arachnotron' 			: if (bdoom_Arachnotron) 			e.Replacee = 'Arachnotron'; 		break;
			case 'BD_Fatso' 				: if (bdoom_Fatso) 				e.Replacee = 'Fatso'; 				break;
			case 'BD_HellKnight' 			: if (bdoom_HellKnight) 			e.Replacee = 'HellKnight'; 		break;
			case 'BD_BaronOfHell' 			: if (bdoom_BaronOfHell) 			e.Replacee = 'BaronOfHell'; 		break;
			case 'BD_ArchVile' 			: if (bdoom_ArchVile) 				e.Replacee = 'ArchVile'; 			break;
			case 'BD_Cyberdemon' 			: if (bdoom_Cyberdemon) 			e.Replacee = 'Cyberdemon'; 		break;
			case 'BD_SpiderMastermind'	: if (bdoom_SpiderMastermind) 	e.Replacee = 'SpiderMastermind';	break;
			case 'BD_BossBrain' 			: if (bdoom_IconOfSin) 			e.Replacee = 'BossBrain';			break;
			case 'BD_SpawnShot' 			: if (bdoom_IconOfSin) 			e.Replacee = 'SpawnShot';			break;
		}
	}
}

// controls the amount of special effect actors, such as gibs, debris, flames
Class FXAmountControl : EventHandler {
	private bool DebrisCleaning;
	Array <BD_BaseDebris> alldebris;
	Array <BD_BaseDebris> bloodlist;
	Array <BD_BaseDebris> giblist;
	Array <BD_BaseDebris> debrislist;
	Array <BD_BaseDebris> flamelist;
	
	override void NetworkProcess(ConsoleEvent e) {
		if (e.name != "BD_ClearDebris" || !e.isManual)
			return;
		if (e.player != net_arbitrator) {
			if (e.player == consoleplayer)
				Console.Printf("Only the host can activate debris cleanup");
			return;
		}
		if (!DebrisCleaning) {
			Console.Printf("Clearing debris");
			DebrisCleaning = true;
		}
	}
	
	//clear the arrays upon map start
	override void WorldLoaded(WorldEvent e) {
		alldebris.Clear();
		bloodlist.Clear();
		giblist.Clear();
		flamelist.Clear();
		debrislist.Clear();
	}

	//add a thing into a corresponding array when it gets spawned
	override void WorldThingSpawned(WorldEvent e) {
		if (e.thing && e.thing.player) {
			if (!e.thing.FindInventory("BD_BloodyPrintControl"))
				e.thing.GiveInventory("BD_BloodyPrintControl",1);
		}			
		if (e.thing && e.thing is "BD_BaseDebris") {
			let a = BD_BaseDebris(e.thing);
			if (a) {
				//console.printf("%s",a.sfxtype);
				if (a.sfxtype == 'blood') {
					alldebris.push(a);
					bloodlist.push(a);
				}
				else if (a.sfxtype == 'gibs') {
					alldebris.push(a);
					giblist.push(a);
				}
				//we're not gonna push flames into alldebris array because it's pointless: everything that spawns flames does so continuously. Better simply disable them.
				else if (a.sfxtype == 'flames')
					flamelist.push(a);					
				else if (a.sfxtype == 'debris') {
					alldebris.push(a);
					debrislist.push(a);
				}
			}
		}
	}

	//remove the thing from the array when it's removed
	override void WorldThingDestroyed(WorldEvent e) {
		if (e.Thing is "BD_BaseDebris") {
			let a = BD_BaseDebris(e.thing);
			if (a) {
				alldebris.delete	(alldebris.Find(a));
				if (a.sfxtype == 'blood')
					bloodlist.delete	(bloodlist.Find(a));					
				else if (a.sfxtype == 'gibs')
					giblist.delete		(giblist.Find(a));					
				else if (a.sfxtype == 'flames')
					flamelist.delete	(flamelist.Find(a));					
				else if (a.sfxtype == 'debris')
					debrislist.delete	(debrislist.Find(a));		
			}
		}	
	}

	//continuously check if the number of FX actors is bigger than the array. if true, delete the oldest actors
	override void WorldTick() {
		if (DebrisCleaning) {
			while (alldebris.Size() > 0)
				alldebris[0].destroy();
			alldebris.Clear();
			DebrisCleaning = false;
			return;				
		}
		//console.printf("blood array size: %d | gib array size: %d",bloodlist.Size(),giblist.Size());
		while (bloodlist.Size() > bdoom_bloodnum)
			bloodlist[0].destroy();			
		while (giblist.Size() > bdoom_gibnum)
			giblist[0].destroy();			
		while (flamelist.Size() > bdoom_flamesnum) 
			flamelist[0].destroy();			
		while (debrislist.Size() > bdoom_debrisnum) 
			debrislist[0].destroy();
	}
}

//attaches footstep actors to players
class FootstepsInit : EventHandler {
    override void PlayerEntered(PlayerEvent e) {
        let steps = BD_Footsteps(Actor.Spawn("BD_Footsteps"));
		if (steps) {
			steps.Init(players[e.playerNumber].mo);
			steps.fplayer = players[e.playerNumber];
		}
	}
}


///////////////
/*	Handler by 3saster that searches ANIMDEFS and ANIMATED lumps to see
	if a given texture name is defined in any of those as an animated texture.
	Used for 3D blood pools sprayed on the floor/ceiling: they quickly disappear
	if they land on an animated texture (including liquids).
*/

Class BD_Animated_Handler : StaticEventHandler
{
	// These must be stored as numbers, in order to get the textures
	// from ANIMATED in between the start and end
	// Oddly, we can convert a TextureID to int, but not the other way
	Array<int> animNums;
	
	bool isAnimated(textureID tex)
	{
		return ( animNums.Find(int(tex)) != animNums.Size() );
	}

	override void OnRegister()
	{
		// ANIMATED
		int currLump = Wads.FindLump("ANIMATED",0,1);
		while( currLump != -1 )
		{
			addANIMATED(currLump);
			currLump = Wads.FindLump("ANIMATED",currLump+1,1);
		}
		
		// ANIMDEFS
		currLump = Wads.FindLump("ANIMDEFS",0,1);
		while( currLump != -1 )
		{
			addANIMDEFS(currLump);
			currLump = Wads.FindLump("ANIMDEFS",currLump+1,1);
		}
	}
	
	void addANIMATED(int lump)
	{
		string data = Wads.ReadLump(lump);
		// Read each record
		for(int pos = 0; data.ByteAt(pos) != 255; pos += 23 )
		{
			string start = data.Mid(pos+10,9);
			string end   = data.Mid(pos+1 ,9);
			
			int texStart = int(TexMan.CheckForTexture(start, TexMan.Type_Any));
			int texEnd   = int(TexMan.CheckForTexture(end,   TexMan.Type_Any));
				
			// If animated texture exists and is not in array, add it
			if( texStart > 0 && texEnd > 0 && texStart != texEnd )
				for(int i = texStart; i <= texEnd; i++)
				{
					if( animNums.Find(i) == animNums.Size() )
						animNums.Push(i);
				}
		}
	}
	
	void addANIMDEFS(int lump)
	{
		string data = Wads.ReadLump(lump);
		// Delete comments
		while(data.IndexOf("//") != -1)
		{
			int start = data.IndexOf("//");
			int end   = data.IndexOf("\n",start)+1;
			data.Remove(start,end-start);
		}
		while(data.IndexOf("/*") != -1)
		{
			int start = data.IndexOf("/*");
			int end   = data.IndexOf("*/",start)+2;
			data.Remove(start,end-start);
		}
		// Remove non-space whitespace
		for(int i = 0; i <= 31; i++)
			data.Replace(string.format("%c",i)," ");
		data.Replace(string.format("%c",127)," ");
		// Remove superflous spaces
		string cleandata = data;
		cleandata.Replace("  "," ");
		while(data != cleandata)
		{
			data = cleandata;
			cleandata.Replace("  "," ");
		}
		
		// Tokenize
		Array<String> tokens;
		data.Split(tokens, " ");
		
		// Search for token after texture/flat
		int i = 0;
		while(i < tokens.Size())
		{
			// texture.flat appears as next token; skip that
			if(tokens[i] ~== "warp" || tokens[i] ~== "warp2")
				i += 2;
			// Found an animated texture; read "pic" stuff until another token is found
			else if(tokens[i] ~== "texture" || tokens[i] ~== "flat")
			{
				while( !(tokens[i] ~== "pic") && i < tokens.Size())
					i++;
				while( tokens[i] ~== "pic" && i < tokens.Size() )
				{
					int texture = int(TexMan.CheckForTexture(tokens[i+1], TexMan.Type_Any));
					if( texture > 0 && animNums.Find(texture) == animNums.Size() )
						animNums.Push(texture);
					i += 4;
				}
			}
			else
				i++;
		}
	}
	
}