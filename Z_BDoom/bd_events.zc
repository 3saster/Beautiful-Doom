class WeaponOverrideHandler : EventHandler
{
// Replaces weapons on the map if the appropriate CVAR is true.
override void CheckReplacement(ReplaceEvent e) {
	if (!bdoom_replaceweapons)
		return;
	switch (e.Replacee.GetClassName()) {
		case 'Fist' 			: e.Replacement = "BD_Fist"; 			break;
		case 'Berserk' 			: e.Replacement = "BD_Berserk"; 		break;
		case 'Chainsaw' 		: e.Replacement = "BD_Chainsaw"; 		break;
		case 'Pistol' 			: e.Replacement = "BD_Pistol"; 			break;
		case 'Shotgun'			: e.Replacement = "BD_Shotgun"; 		break;
		case 'SuperShotgun' 	: e.Replacement = "BD_SuperShotgun";	break;
		case 'Chaingun' 		: e.Replacement = "BD_Chaingun"; 		break;
		case 'RocketLauncher'	: e.Replacement = "BD_RocketLauncher"; 	break;
		case 'PlasmaRifle' 		: e.Replacement = "BD_PlasmaRifle"; 	break;
		case 'BFG9000' 			: e.Replacement = "BD_BFG9000"; 		break;
		
		case 'Clip' 			: e.Replacement = "BD_Clip"; 			break;
		case 'ClipBox' 			: e.Replacement = "BD_ClipBox"; 		break;
		case 'Shell' 			: e.Replacement = "BD_Shell"; 			break;
		case 'ShellBox' 		: e.Replacement = "BD_ShellBox"; 	break;
		case 'RocketAmmo' 		: e.Replacement = "BD_RocketAmmo"; 	break;
		case 'RocketBox' 		: e.Replacement = "BD_RocketBox"; 	break;
		case 'Cell' 			: e.Replacement = "BD_Cell"; 			break;
		case 'CellPack' 		: e.Replacement = "BD_CellPack"; 	break;
		}
	e.IsFinal = true;
	}
	
/* This override detect if the player received a vanilla weapon directly (e.g. via ACS script)
and replaces them with modded ones. It also replaces starting weapon.

The initial version provided by Zombie
*/
override void WorldTick() {		
	for (int pn = 0; pn < MAXPLAYERS; pn++) {
		if (!playerInGame[pn])
			continue;

		PlayerInfo player	= players[pn];
		PlayerPawn mo		= player.mo;
		
		let oldweap = player.pendingWeapon.GetClassName(); //get the weapon that is being selected
		let oldweapr = player.readyweapon.GetClassName(); //get the currently selected weapons
		if (bdoom_replaceweapons) { //check if the replace weapons CVAR is true
			switch (oldweap) { //if game attempts to SELECT a vanilla weapon, take it away and select a modded weapon (and give it, if it's missing)
				case 'Fist' 			: player.pendingWeapon = GetWeapon(mo, "BD_Fist"); 			mo.TakeInventory(oldweap,1); break;
				case 'Chainsaw' 		: player.pendingWeapon = GetWeapon(mo, "BD_Chainsaw"); 		mo.TakeInventory(oldweap,1); break;
				case 'Pistol' 			: player.pendingWeapon = GetWeapon(mo, "BD_Pistol"); 		mo.TakeInventory(oldweap,1); break;
				case 'Shotgun'			: player.pendingWeapon = GetWeapon(mo, "BD_Shotgun"); 		mo.TakeInventory(oldweap,1); break;
				case 'SuperShotgun' 	: player.pendingWeapon = GetWeapon(mo, "BD_SuperShotgun"); 	mo.TakeInventory(oldweap,1); break;
				case 'Chaingun' 		: player.pendingWeapon = GetWeapon(mo, "BD_Chaingun"); 		mo.TakeInventory(oldweap,1); break;
				case 'RocketLauncher' 	: player.pendingWeapon = GetWeapon(mo, "BD_RocketLauncher");mo.TakeInventory(oldweap,1); break;
				case 'PlasmaRifle' 		: player.pendingWeapon = GetWeapon(mo, "BD_PlasmaRifle"); 	mo.TakeInventory(oldweap,1); break;
				case 'BFG9000' 			: player.pendingWeapon = GetWeapon(mo, "BD_BFG9000"); 		mo.TakeInventory(oldweap,1); break;
				}
			switch (oldweapr) { //if (a vanilla weapon is READY (such as Pistol at vanilla map start), we also take it away and select the modded counterpart
				case 'Fist' 			: player.pendingWeapon = GetWeapon(mo, "BD_Fist"); 			mo.TakeInventory(oldweapr,1); break;
				case 'Chainsaw' 		: player.pendingWeapon = GetWeapon(mo, "BD_Chainsaw"); 		mo.TakeInventory(oldweapr,1); break;
				case 'Pistol' 			: player.pendingWeapon = GetWeapon(mo, "BD_Pistol"); 		mo.TakeInventory(oldweapr,1); break;
				case 'Shotgun'			: player.pendingWeapon = GetWeapon(mo, "BD_Shotgun"); 		mo.TakeInventory(oldweapr,1); break;
				case 'SuperShotgun' 	: player.pendingWeapon = GetWeapon(mo, "BD_SuperShotgun"); 	mo.TakeInventory(oldweapr,1); break;
				case 'Chaingun' 		: player.pendingWeapon = GetWeapon(mo, "BD_Chaingun"); 		mo.TakeInventory(oldweapr,1); break;
				case 'RocketLauncher' 	: player.pendingWeapon = GetWeapon(mo, "BD_RocketLauncher");mo.TakeInventory(oldweapr,1); break;
				case 'PlasmaRifle' 		: player.pendingWeapon = GetWeapon(mo, "BD_PlasmaRifle"); 	mo.TakeInventory(oldweapr,1); break;
				case 'BFG9000' 			: player.pendingWeapon = GetWeapon(mo, "BD_BFG9000"); 		mo.TakeInventory(oldweapr,1); break;
				}
			}
		else { //the reverse effect for when the player sets replace weapons CVAR to false (not very necessary, since officially a level start is required to take effect anyway)
			switch (oldweap) {
				case 'BD_Fist' 			: player.pendingWeapon = GetWeapon(mo, "Fist"); 			mo.TakeInventory(oldweap,1); break;
				case 'BD_Chainsaw' 		: player.pendingWeapon = GetWeapon(mo, "Chainsaw"); 		mo.TakeInventory(oldweap,1); break;
				case 'BD_Pistol' 		: player.pendingWeapon = GetWeapon(mo, "Pistol"); 			mo.TakeInventory(oldweap,1); break;
				case 'BD_Shotgun'		: player.pendingWeapon = GetWeapon(mo, "Shotgun"); 			mo.TakeInventory(oldweap,1); break;
				case 'BD_SuperShotgun' 	: player.pendingWeapon = GetWeapon(mo, "SuperShotgun"); 	mo.TakeInventory(oldweap,1); break;
				case 'BD_Chaingun' 		: player.pendingWeapon = GetWeapon(mo, "Chaingun"); 		mo.TakeInventory(oldweap,1); break;
				case 'BD_RocketLauncher': player.pendingWeapon = GetWeapon(mo, "RocketLauncher");	mo.TakeInventory(oldweap,1); break;
				case 'BD_PlasmaRifle' 	: player.pendingWeapon = GetWeapon(mo, "PlasmaRifle"); 		mo.TakeInventory(oldweap,1); break;
				case 'BD_BFG9000' 		: player.pendingWeapon = GetWeapon(mo, "BFG9000"); 			mo.TakeInventory(oldweap,1); break;
				}
			switch (oldweapr) {
				case 'BD_Fist' 			: player.pendingWeapon = GetWeapon(mo, "Fist"); 			mo.TakeInventory(oldweapr,1); break;
				case 'BD_Chainsaw' 		: player.pendingWeapon = GetWeapon(mo, "Chainsaw"); 		mo.TakeInventory(oldweapr,1); break;
				case 'BD_Pistol' 		: player.pendingWeapon = GetWeapon(mo, "Pistol"); 			mo.TakeInventory(oldweapr,1); break;
				case 'BD_Shotgun'		: player.pendingWeapon = GetWeapon(mo, "Shotgun"); 			mo.TakeInventory(oldweapr,1); break;
				case 'BD_SuperShotgun' 	: player.pendingWeapon = GetWeapon(mo, "SuperShotgun"); 	mo.TakeInventory(oldweapr,1); break;
				case 'BD_Chaingun' 		: player.pendingWeapon = GetWeapon(mo, "Chaingun"); 		mo.TakeInventory(oldweapr,1); break;
				case 'BD_RocketLauncher': player.pendingWeapon = GetWeapon(mo, "RocketLauncher");	mo.TakeInventory(oldweapr,1); break;
				case 'BD_PlasmaRifle' 	: player.pendingWeapon = GetWeapon(mo, "PlasmaRifle"); 		mo.TakeInventory(oldweapr,1); break;
				case 'BD_BFG9000' 		: player.pendingWeapon = GetWeapon(mo, "BFG9000"); 			mo.TakeInventory(oldweapr,1); break;
				}				
			mo.speed = mo.default.speed; 	
			}
		}
	}
// Courtesy of Zombie
private Weapon GetWeapon(PlayerPawn mo, Class<Weapon> type)
	{
		let weap = Weapon(mo.FindInventory(type));
		return weap ? weap : Weapon(mo.GiveInventoryType(type));
	}
}

/* Simply replaces monsters with modded ones if the appropriate CVAR is true.
Helps to keep the mod compatible with monster mods. 
Separate CVARs for each monsters are also supported. */

class MonsterOverrideHandler : EventHandler
{
override void CheckReplacement(ReplaceEvent e) {
	if (bdoom_blood) {
		if (e.Replacee.GetClassName() == "Blood")
			e.Replacement = "BD_Blood";
		}
	if (!bdoom_replacemonsters)
		return;
	switch (e.Replacee.GetClassName()) {
		case 'Zombieman' 			: if (bdoom_Zombieman) 			e.Replacement = "BD_Zombieman"; 		break;
		case 'ShotgunGuy' 			: if (bdoom_ShotgunGuy) 		e.Replacement = "BD_ShotgunGuy"; 		break;
		case 'ChaingunGuy' 			: if (bdoom_ChaingunGuy) 		e.Replacement = "BD_ChaingunGuy"; 		break;
		case 'WolfensteinSS'		: if (bdoom_WolfensteinSS) 		e.Replacement = "BD_WolfensteinSS"; 	break;
		case 'DoomImp' 				: if (bdoom_DoomImp) 			e.Replacement = "BD_DoomImp"; 			break;
		case 'Demon' 				: if (bdoom_Demon) 				e.Replacement = "BD_Demon"; 			break;
		case 'Spectre' 				: if (bdoom_Spectre) 			e.Replacement = "BD_Spectre"; 			break;
		case 'Cacodemon' 			: if (bdoom_Cacodemon) 			e.Replacement = "BD_Cacodemon"; 		break;
		case 'PainElemental'		: if (bdoom_PainElemental) 		e.Replacement = "BD_PainElemental"; 	break;
		case 'LostSoul'				: if (bdoom_LostSoul) 			e.Replacement = "BD_LostSoul"; 			break;
		case 'Revenant' 			: if (bdoom_Revenant) 			e.Replacement = "BD_Revenant"; 			break;
		case 'Arachnotron' 			: if (bdoom_Arachnotron) 		e.Replacement = "BD_Arachnotron"; 		break;
		case 'Fatso' 				: if (bdoom_Fatso) 				e.Replacement = "BD_Fatso"; 			break;
		case 'HellKnight' 			: if (bdoom_HellKnight) 		e.Replacement = "BD_HellKnight"; 		break;
		case 'BaronOfHell' 			: if (bdoom_BaronOfHell) 		e.Replacement = "BD_BaronOfHell"; 		break;
		case 'ArchVile' 			: if (bdoom_ArchVile) 			e.Replacement = "BD_ArchVile"; 			break;
		case 'Cyberdemon' 			: if (bdoom_Cyberdemon) 		e.Replacement = "BD_Cyberdemon"; 		break;
		case 'SpiderMastermind' 	: if (bdoom_SpiderMastermind) 	e.Replacement = "BD_SpiderMastermind";	break;
		}
	e.IsFinal = true;
	}
override void Checkreplacee(ReplacedEvent e) {
	if (!bdoom_replacemonsters)
		return;
	switch (e.Replacement.GetClassName()) {
		case 'BD_Zombieman' 		: if (bdoom_Zombieman) 			e.Replacee = "Zombieman"; 		break;
		case 'BD_ShotgunGuy' 		: if (bdoom_ShotgunGuy) 		e.Replacee = "ShotgunGuy"; 		break;
		case 'BD_ChaingunGuy' 		: if (bdoom_ChaingunGuy) 		e.Replacee = "ChaingunGuy"; 		break;
		case 'BD_WolfensteinSS'		: if (bdoom_WolfensteinSS) 		e.Replacee = "WolfensteinSS"; 	break;
		case 'BD_DoomImp' 			: if (bdoom_DoomImp) 			e.Replacee = "DoomImp"; 			break;
		case 'BD_Demon' 			: if (bdoom_Demon) 				e.Replacee = "Demon"; 			break;
		case 'BD_Spectre' 			: if (bdoom_Spectre) 			e.Replacee = "Spectre"; 			break;
		case 'BD_Cacodemon' 		: if (bdoom_Cacodemon) 			e.Replacee = "Cacodemon"; 		break;
		case 'BD_PainElemental'		: if (bdoom_PainElemental) 		e.Replacee = "PainElemental"; 	break;
		case 'BD_LostSoul'			: if (bdoom_LostSoul) 			e.Replacee = "LostSoul"; 			break;
		case 'BD_Revenant' 			: if (bdoom_Revenant) 			e.Replacee = "Revenant"; 			break;
		case 'BD_Arachnotron' 		: if (bdoom_Arachnotron) 		e.Replacee = "Arachnotron"; 		break;
		case 'BD_Fatso' 			: if (bdoom_Fatso) 				e.Replacee = "Fatso"; 			break;
		case 'BD_HellKnight' 		: if (bdoom_HellKnight) 		e.Replacee = "HellKnight"; 		break;
		case 'BD_BaronOfHell' 		: if (bdoom_BaronOfHell) 		e.Replacee = "BaronOfHell"; 		break;
		case 'BD_ArchVile' 			: if (bdoom_ArchVile) 			e.Replacee = "ArchVile"; 			break;
		case 'BD_Cyberdemon' 		: if (bdoom_Cyberdemon) 		e.Replacee = "Cyberdemon"; 		break;
		case 'BD_SpiderMastermind' 	: if (bdoom_SpiderMastermind) 	e.Replacee = "SpiderMastermind";	break;
		}
	}
}

class ItemOverrideHandler : EventHandler
{
override void CheckReplacement(ReplaceEvent e) {
	if (!bdoom_replaceitems)
		return;
	switch (e.Replacee.GetClassName()) {
		case 'Blursphere' 				: e.Replacement = "BD_Blursphere"; 				break;
		case 'Soulsphere' 				: e.Replacement = "BD_Soulsphere"; 				break;
		case 'Megasphere' 				: e.Replacement = "BD_Megasphere"; 				break;
		case 'InvulnerabilitySphere' 	: e.Replacement = "BD_InvulnerabilitySphere"; 	break;
		case 'Allmap' 					: e.Replacement = "BD_Allmap"; 					break;
		case 'Infrared' 				: e.Replacement = "BD_Infrared"; 				break;
		case 'HealthBonus' 				: e.Replacement = "BD_HealthBonus"; 			break;
		case 'ArmorBonus' 				: e.Replacement = "BD_ArmorBonus"; 				break;
		case 'Stimpack' 				: e.Replacement = "BD_Stimpack"; 				break;
		case 'Medikit' 					: e.Replacement = "BD_Medikit"; 				break;
		case 'GreenArmor' 				: e.Replacement = "BD_GreenArmor"; 				break;
		case 'BlueArmor' 				: e.Replacement = "BD_BlueArmor"; 				break;
		case 'Backpack' 				: e.Replacement = "BD_Backpack"; 				break;
		case 'Radsuit' 					: e.Replacement = "BD_Radsuit"; 				break;
		case 'RedCard' 					: e.Replacement = "BD_RedCard"; 				break;
		case 'BlueCard' 				: e.Replacement = "BD_BlueCard"; 				break;
		case 'YellowCard' 				: e.Replacement = "BD_YellowCard"; 				break;
		case 'RedSkull' 				: e.Replacement = "BD_RedSkull"; 				break;
		case 'BlueSkull' 				: e.Replacement = "BD_BlueSkull"; 				break;
		case 'YellowSkull' 				: e.Replacement = "BD_YellowSkull"; 			break;
		}
	e.IsFinal = true;
	}
}

Class FXAmountControl : EventHandler
{
Array <DebrisGeneral> bloodlist;
Array <DebrisGeneral> giblist;
Array <DebrisGeneral> debrislist;
Array <DebrisGeneral> flamelist;

override void WorldLoaded(WorldEvent e) {
	bloodlist.Clear();
	giblist.Clear();
	flamelist.Clear();
	debrislist.Clear();
	}

override void WorldThingSpawned(WorldEvent e) {
	if (e.Thing is "DebrisGeneral") {
		let a = DebrisGeneral(e.thing);
		if (a) {
			if 		(a.sfxtype == 'blood')
				bloodlist.push(a);
				
			else if (a.sfxtype == 'gibs')
				giblist.push(a);
				
			else if (a.sfxtype == 'flames')
				flamelist.push(a);
				
			else if (a.sfxtype == 'debris')
				debrislist.push(a);

			}
		}
	}

override void WorldThingDestroyed(WorldEvent e) {
	if (e.Thing is "DebrisGeneral") {
		let a = DebrisGeneral(e.thing);
		if (a) {
			if 		(a.sfxtype == 'blood')
				bloodlist.delete	(bloodlist.Find(a));
				
			else if (a.sfxtype == 'gibs')
				giblist.delete		(giblist.Find(a));
				
			else if (a.sfxtype == 'flames')
				flamelist.delete	(flamelist.Find(a));
				
			else if (a.sfxtype == 'debris')
				debrislist.delete	(debrislist.Find(a));		
			}
		}	
	}

override void WorldTick() {
	//console.printf("blood array size: %d | gib array size: %d",bloodlist.Size(),giblist.Size());
	while (bloodlist.Size() > bdoom_bloodnum)
		bloodlist[0].destroy();
		
	while (giblist.Size() > bdoom_gibnum)
		giblist[0].destroy();
		
	while (flamelist.Size() > bdoom_flamesnum) 
		flamelist[0].destroy();
		
	while (debrislist.Size() > bdoom_debrisnum) 
		debrislist[0].destroy();
	}
}


class FootstepsInit : EventHandler {
    override void PlayerEntered(PlayerEvent e) {
        let steps = BD_Footsteps(Actor.Spawn("BD_Footsteps"));
		if (steps) {
			steps.Init(players[e.playerNumber].mo);
			steps.fplayer = players[e.playerNumber];
			}
    }
}