class WeaponOverrideHandler : EventHandler {
	// These items have no new visuals and only new pickup sounds, so, I insert them via an event handler, without replacing the actual actors
	override void WorldThingSpawned(WorldEvent e) {
		if (!bdoom_replaceitems)
			return;
		if (!(e.thing is "Inventory"))
			return;
		let inv = Inventory(e.thing);
		if (!inv)
			return;
		switch (inv.GetClassName()) {
			case 'Clip' 		: inv.pickupsound = "ammo/clip";		break;
			case 'ClipBox' 		: inv.pickupsound = "ammo/clipbox";		break;
			case 'Shell' 		: inv.pickupsound = "ammo/shells";		break;
			case 'ShellBox' 	: inv.pickupsound = "ammo/shells";		break;
			case 'RocketAmmo' 	: inv.pickupsound = "ammo/rockets";		break;
			case 'RocketBox' 	: inv.pickupsound = "ammo/rockets";		break;
			case 'Cell' 		: inv.pickupsound = "ammo/cells";		break;
			case 'CellPack' 	: inv.pickupsound = "ammo/cells";		break;
			case 'BackPack' 	: inv.pickupsound = "pickups/backpack";	break;
			case 'RadSuit' 		: inv.pickupsound = "pickups/radsuit";	break;
		}
	}

	// Replaces weapons on the map if the appropriate CVAR is true.
	override void CheckReplacement(ReplaceEvent e) {
		if (!bdoom_replaceweapons)
			return;
		switch (e.Replacee.GetClassName()) {
			case 'Fist' 			: e.Replacement = "BD_Fist"; 			break;
			case 'Berserk' 			: e.Replacement = "BD_Berserk"; 		break;
			case 'Chainsaw' 		: e.Replacement = "BD_Chainsaw"; 		break;
			case 'Pistol' 			: e.Replacement = "BD_Pistol"; 			break;
			case 'Shotgun'			: e.Replacement = "BD_Shotgun"; 		break;
			case 'SuperShotgun' 	: e.Replacement = "BD_SuperShotgun";	break;
			case 'Chaingun' 		: e.Replacement = "BD_Chaingun"; 		break;
			case 'RocketLauncher'	: e.Replacement = "BD_RocketLauncher"; 	break;
			case 'PlasmaRifle' 		: e.Replacement = "BD_PlasmaRifle"; 	break;
			case 'BFG9000' 			: e.Replacement = "BD_BFG9000"; 		break;
		}
		e.IsFinal = true;
	}
		
	/* This override detects if the player received a vanilla weapon directly (e.g. via ACS script)
	and replaces them with one from the mod. It also replaces the starting weapon.
	Initial version provided by Zombie
	*/
	override void WorldTick() {		
		for (int pn = 0; pn < MAXPLAYERS; pn++) {
			if (!playerInGame[pn])
				continue;

			PlayerInfo player	= players[pn];
			PlayerPawn mo		= player.mo;
			if (!player || !mo)
				return;
			if (!player.pendingWeapon || !player.readyweapon)
				return;
			let oldweap = player.pendingWeapon.GetClassName(); //get the weapon that is being selected
			let oldweapr = player.readyweapon.GetClassName(); //get the currently selected weapons
			if (bdoom_replaceweapons) { //check if the replace weapons CVAR is true
				switch (oldweap) { //if game attempts to SELECT a vanilla weapon, take it away and select a modded weapon (and give it, if it's missing)
					case 'Fist' 			: player.pendingWeapon = GetWeapon(mo, "BD_Fist"); 			mo.TakeInventory(oldweap,1); break;
					case 'Chainsaw' 		: player.pendingWeapon = GetWeapon(mo, "BD_Chainsaw"); 		mo.TakeInventory(oldweap,1); break;
					case 'Pistol' 			: player.pendingWeapon = GetWeapon(mo, "BD_Pistol"); 		mo.TakeInventory(oldweap,1); break;
					case 'Shotgun'			: player.pendingWeapon = GetWeapon(mo, "BD_Shotgun"); 		mo.TakeInventory(oldweap,1); break;
					case 'SuperShotgun' 	: player.pendingWeapon = GetWeapon(mo, "BD_SuperShotgun"); 	mo.TakeInventory(oldweap,1); break;
					case 'Chaingun' 		: player.pendingWeapon = GetWeapon(mo, "BD_Chaingun"); 		mo.TakeInventory(oldweap,1); break;
					case 'RocketLauncher' 	: player.pendingWeapon = GetWeapon(mo, "BD_RocketLauncher");mo.TakeInventory(oldweap,1); break;
					case 'PlasmaRifle' 		: player.pendingWeapon = GetWeapon(mo, "BD_PlasmaRifle"); 	mo.TakeInventory(oldweap,1); break;
					case 'BFG9000' 			: player.pendingWeapon = GetWeapon(mo, "BD_BFG9000"); 		mo.TakeInventory(oldweap,1); break;
				}
				switch (oldweapr) { //if (a vanilla weapon is READY (such as Pistol at vanilla map start), we also take it away and select the modded counterpart
					case 'Fist' 			: player.pendingWeapon = GetWeapon(mo, "BD_Fist"); 			mo.TakeInventory(oldweapr,1); break;
					case 'Chainsaw' 		: player.pendingWeapon = GetWeapon(mo, "BD_Chainsaw"); 		mo.TakeInventory(oldweapr,1); break;
					case 'Pistol' 			: player.pendingWeapon = GetWeapon(mo, "BD_Pistol"); 		mo.TakeInventory(oldweapr,1); break;
					case 'Shotgun'			: player.pendingWeapon = GetWeapon(mo, "BD_Shotgun"); 		mo.TakeInventory(oldweapr,1); break;
					case 'SuperShotgun' 	: player.pendingWeapon = GetWeapon(mo, "BD_SuperShotgun"); 	mo.TakeInventory(oldweapr,1); break;
					case 'Chaingun' 		: player.pendingWeapon = GetWeapon(mo, "BD_Chaingun"); 		mo.TakeInventory(oldweapr,1); break;
					case 'RocketLauncher' 	: player.pendingWeapon = GetWeapon(mo, "BD_RocketLauncher");mo.TakeInventory(oldweapr,1); break;
					case 'PlasmaRifle' 		: player.pendingWeapon = GetWeapon(mo, "BD_PlasmaRifle"); 	mo.TakeInventory(oldweapr,1); break;
					case 'BFG9000' 			: player.pendingWeapon = GetWeapon(mo, "BD_BFG9000"); 		mo.TakeInventory(oldweapr,1); break;
				}
			}
			else { //the reverse effect for when the player sets replace weapons CVAR to false (not very necessary, since officially a level start is required to take effect anyway)
				switch (oldweap) {
					case 'BD_Fist' 			: player.pendingWeapon = GetWeapon(mo, "Fist"); 			mo.TakeInventory(oldweap,1); break;
					case 'BD_Chainsaw' 		: player.pendingWeapon = GetWeapon(mo, "Chainsaw"); 		mo.TakeInventory(oldweap,1); break;
					case 'BD_Pistol' 		: player.pendingWeapon = GetWeapon(mo, "Pistol"); 			mo.TakeInventory(oldweap,1); break;
					case 'BD_Shotgun'		: player.pendingWeapon = GetWeapon(mo, "Shotgun"); 			mo.TakeInventory(oldweap,1); break;
					case 'BD_SuperShotgun' 	: player.pendingWeapon = GetWeapon(mo, "SuperShotgun"); 	mo.TakeInventory(oldweap,1); break;
					case 'BD_Chaingun' 		: player.pendingWeapon = GetWeapon(mo, "Chaingun"); 		mo.TakeInventory(oldweap,1); break;
					case 'BD_RocketLauncher': player.pendingWeapon = GetWeapon(mo, "RocketLauncher");	mo.TakeInventory(oldweap,1); break;
					case 'BD_PlasmaRifle' 	: player.pendingWeapon = GetWeapon(mo, "PlasmaRifle"); 		mo.TakeInventory(oldweap,1); break;
					case 'BD_BFG9000' 		: player.pendingWeapon = GetWeapon(mo, "BFG9000"); 			mo.TakeInventory(oldweap,1); break;
				}
				switch (oldweapr) {
					case 'BD_Fist' 			: player.pendingWeapon = GetWeapon(mo, "Fist"); 			mo.TakeInventory(oldweapr,1); break;
					case 'BD_Chainsaw' 		: player.pendingWeapon = GetWeapon(mo, "Chainsaw"); 		mo.TakeInventory(oldweapr,1); break;
					case 'BD_Pistol' 		: player.pendingWeapon = GetWeapon(mo, "Pistol"); 			mo.TakeInventory(oldweapr,1); break;
					case 'BD_Shotgun'		: player.pendingWeapon = GetWeapon(mo, "Shotgun"); 			mo.TakeInventory(oldweapr,1); break;
					case 'BD_SuperShotgun' 	: player.pendingWeapon = GetWeapon(mo, "SuperShotgun"); 	mo.TakeInventory(oldweapr,1); break;
					case 'BD_Chaingun' 		: player.pendingWeapon = GetWeapon(mo, "Chaingun"); 		mo.TakeInventory(oldweapr,1); break;
					case 'BD_RocketLauncher': player.pendingWeapon = GetWeapon(mo, "RocketLauncher");	mo.TakeInventory(oldweapr,1); break;
					case 'BD_PlasmaRifle' 	: player.pendingWeapon = GetWeapon(mo, "PlasmaRifle"); 		mo.TakeInventory(oldweapr,1); break;
					case 'BD_BFG9000' 		: player.pendingWeapon = GetWeapon(mo, "BFG9000"); 			mo.TakeInventory(oldweapr,1); break;
				}				
				mo.speed = mo.default.speed; 	//to ensure the player is no longer affected by speed-altering effects of kicking or modern rifle ADS
			}
		}
	}
	// Courtesy of Zombie
	private Weapon GetWeapon(PlayerPawn mo, Class<Weapon> type) {
		let weap = Weapon(mo.FindInventory(type));
		return weap ? weap : Weapon(mo.GiveInventoryType(type));
	}
}

/* Simply replaces actors with modded ones if the appropriate CVAR is true.
Helps to keep the mod compatible with other actor-replacing mods. 
Separate CVARs for each monsters are also supported. */

class BD_ActorOverrideHandler : EventHandler {
	override void CheckReplacement(ReplaceEvent e) {
		if (bdoom_blood) {
			if (e.Replacee.GetClassName() == "Blood")
				e.Replacement = "BD_Blood";
		}
		if (bdoom_replacemonsters) {	
			switch (e.Replacee.GetClassName()) {
				case 'Zombieman' 			: if (bdoom_Zombieman) 			e.Replacement = "BD_Zombieman"; 		break;
				case 'ShotgunGuy' 			: if (bdoom_ShotgunGuy) 		e.Replacement = "BD_ShotgunGuy"; 		break;
				case 'ChaingunGuy' 			: if (bdoom_ChaingunGuy) 		e.Replacement = "BD_ChaingunGuy"; 		break;
				case 'WolfensteinSS'		: if (bdoom_WolfensteinSS) 		e.Replacement = "BD_WolfensteinSS"; 	break;
				case 'DoomImp' 				: if (bdoom_DoomImp) 			e.Replacement = "BD_DoomImp"; 			break;
				case 'Demon' 				: if (bdoom_Demon) 				e.Replacement = "BD_Demon"; 			break;
				case 'Spectre' 				: if (bdoom_Spectre) 			e.Replacement = "BD_Spectre"; 			break;
				case 'Cacodemon' 			: if (bdoom_Cacodemon) 			e.Replacement = "BD_Cacodemon"; 		break;
				case 'PainElemental'		: if (bdoom_PainElemental) 		e.Replacement = "BD_PainElemental"; 	break;
				case 'LostSoul'				: if (bdoom_LostSoul) 			e.Replacement = "BD_LostSoul"; 			break;
				case 'Revenant' 			: if (bdoom_Revenant) 			e.Replacement = "BD_Revenant"; 			break;
				case 'Arachnotron' 			: if (bdoom_Arachnotron) 		e.Replacement = "BD_Arachnotron"; 		break;
				case 'Fatso' 				: if (bdoom_Fatso) 				e.Replacement = "BD_Fatso"; 			break;
				case 'HellKnight' 			: if (bdoom_HellKnight) 		e.Replacement = "BD_HellKnight"; 		break;
				case 'BaronOfHell' 			: if (bdoom_BaronOfHell) 		e.Replacement = "BD_BaronOfHell"; 		break;
				case 'ArchVile' 			: if (bdoom_ArchVile) 			e.Replacement = "BD_ArchVile"; 			break;
				case 'Cyberdemon' 			: if (bdoom_Cyberdemon) 		e.Replacement = "BD_Cyberdemon"; 		break;
				case 'SpiderMastermind' 	: if (bdoom_SpiderMastermind) 	e.Replacement = "BD_SpiderMastermind";	break;
				case 'BossBrain' 			: if (bdoom_IconOfSin) 			e.Replacement = "BD_BossBrain";			break;
				case 'SpawnShot' 			: if (bdoom_IconOfSin) 			e.Replacement = "BD_SpawnShot";			break;
			//decorative corpses:
				case 'DeadZombieman' 		: if (bdoom_Zombieman) 			e.Replacement = "BD_DeadZombieman"; 		break;
				case 'DeadShotgunGuy' 		: if (bdoom_ShotgunGuy) 		e.Replacement = "BD_DeadShotgunGuy"; 		break;
				case 'DeadDoomImp' 			: if (bdoom_DoomImp) 			e.Replacement = "BD_DeadDoomImp"; 			break;
				case 'DeadDemon' 			: if (bdoom_Demon) 				e.Replacement = "BD_DeadDemon"; 			break;
				case 'DeadCacodemon' 		: if (bdoom_Cacodemon) 			e.Replacement = "BD_DeadCacodemon"; 		break;
				case 'DeadLostSoul'			: if (bdoom_LostSoul) 			e.Replacement = "BD_DeadLostSoul"; 			break;
			}
		}
		if (bdoom_replaceitems) {
			switch (e.Replacee.GetClassName()) {
				case 'Blursphere' 				: e.Replacement = "BD_Blursphere"; 				break;
				case 'Soulsphere' 				: e.Replacement = "BD_Soulsphere"; 				break;
				case 'Megasphere' 				: e.Replacement = "BD_Megasphere"; 				break;
				case 'InvulnerabilitySphere' 	: e.Replacement = "BD_InvulnerabilitySphere"; 	break;
				case 'Allmap' 					: e.Replacement = "BD_Allmap"; 					break;
				case 'Infrared' 				: e.Replacement = "BD_Infrared"; 				break;
				case 'HealthBonus' 				: e.Replacement = "BD_HealthBonus"; 			break;
				case 'ArmorBonus' 				: e.Replacement = "BD_ArmorBonus"; 				break;
				case 'Stimpack' 				: e.Replacement = "BD_Stimpack"; 				break;
				case 'Medikit' 					: e.Replacement = "BD_Medikit"; 				break;
				case 'GreenArmor' 				: e.Replacement = "BD_GreenArmor"; 				break;
				case 'BlueArmor' 				: e.Replacement = "BD_BlueArmor"; 				break;
				case 'RedCard' 					: e.Replacement = "BD_RedCard"; 				break;
				case 'BlueCard' 				: e.Replacement = "BD_BlueCard"; 				break;
				case 'YellowCard' 				: e.Replacement = "BD_YellowCard"; 				break;
				case 'RedSkull' 				: e.Replacement = "BD_RedSkull"; 				break;
				case 'BlueSkull' 				: e.Replacement = "BD_BlueSkull"; 				break;
				case 'YellowSkull' 				: e.Replacement = "BD_YellowSkull"; 			break;
			}
		}
		if (bdoom_replaceobjects) {
			switch (e.Replacee.GetClassName()) {
					//VICTIMS
				Case 'HangTLookingDown' 	: e.Replacement = "BD_HangingTorso"; 	break;
				Case 'HangTLookingUp' 		: e.Replacement = "BD_HangingTorso"; 	break;
				Case 'HangTNoBrain' 		: e.Replacement = "BD_HangingTorso"; 	break;
				Case 'HangTSkull' 			: e.Replacement = "BD_HangingTorso"; 	break;
				Case 'HangBNoBrain' 		: e.Replacement = "BD_HangingBody"; 	break;
				Case 'HangNoGuts' 			: e.Replacement = "BD_HangingBody"; 	break;
				Case 'BloodyTwitch'			: e.Replacement = "BD_BloodyTwitch"; 	break;
				Case 'NonSolidTwitch'		: e.Replacement = "BD_NonsolidTwitch"; 	break;				
					//MISC
				case 'TeleportFog' 		: e.replacement = "BD_TeleportFog";		break;
				case 'ExplosiveBarrel' 	: e.replacement = "BD_ExplosiveBarrel";	break;
				case 'EvilEye' 			: e.replacement = "BD_EvilEye";			break;
				case 'FloatingSkull' 	: e.replacement = "BD_FloatingSkull";	break;
				case 'HeartColumn' 		: e.replacement = "BD_HeartColumn";		break;
				case 'BigTree' 			: e.replacement = "BD_BigTree";			break;
				case 'TorchTree' 		: e.replacement = "BD_TorchTree";		break;
					//LIGHTS
				case 'GreenTorch' 		: e.replacement = "TallTorch_Green";	break;
				case 'RedTorch' 		: e.replacement = "TallTorch_Red";		break;
				case 'BlueTorch' 		: e.replacement = "TallTorch_Blue";		break;
				case 'ShortGreenTorch' 	: e.replacement = "ShortTorch_Green";	break;
				case 'ShortRedTorch' 	: e.replacement = "ShortTorch_Red";		break;
				case 'ShortBlueTorch' 	: e.replacement = "ShortTorch_Blue";	break;
				case 'Candlestick' 		: e.replacement = "BD_Candlestick";		break;
				case 'Candelabra' 		: e.replacement = "BD_Candelabra";		break;
				case 'BurningBarrel' 	: e.replacement = "BD_BurningBarrel";	break;
				case 'Techlamp' 		: e.replacement = "BD_Techlamp";		break;
				case 'Techlamp2' 		: e.replacement = "BD_Techlamp2";		break;
				case 'Column' 			: e.replacement = "BD_Column";			break;
			}
		}
		e.IsFinal = true;
	}
	//  This override tells the game which of the original monsters the modded monster replaces. Necessary for "hardcoded" effects such as Map07 or E1M8
	override void Checkreplacee(ReplacedEvent e) {
		if (!bdoom_replacemonsters)
			return;
		switch (e.Replacement.GetClassName()) {
			case 'BD_Zombieman' 		: if (bdoom_Zombieman) 			e.Replacee = "Zombieman"; 		break;
			case 'BD_ShotgunGuy' 		: if (bdoom_ShotgunGuy) 		e.Replacee = "ShotgunGuy"; 		break;
			case 'BD_ChaingunGuy' 		: if (bdoom_ChaingunGuy) 		e.Replacee = "ChaingunGuy"; 	break;
			case 'BD_WolfensteinSS'		: if (bdoom_WolfensteinSS) 		e.Replacee = "WolfensteinSS"; 	break;
			case 'BD_DoomImp' 			: if (bdoom_DoomImp) 			e.Replacee = "DoomImp"; 		break;
			case 'BD_Demon' 			: if (bdoom_Demon) 				e.Replacee = "Demon"; 			break;
			case 'BD_Spectre' 			: if (bdoom_Spectre) 			e.Replacee = "Spectre"; 		break;
			case 'BD_Cacodemon' 		: if (bdoom_Cacodemon) 			e.Replacee = "Cacodemon"; 		break;
			case 'BD_PainElemental'		: if (bdoom_PainElemental) 		e.Replacee = "PainElemental"; 	break;
			case 'BD_LostSoul'			: if (bdoom_LostSoul) 			e.Replacee = "LostSoul"; 		break;
			case 'BD_Revenant' 			: if (bdoom_Revenant) 			e.Replacee = "Revenant"; 		break;
			case 'BD_Arachnotron' 		: if (bdoom_Arachnotron) 		e.Replacee = "Arachnotron"; 	break;
			case 'BD_Fatso' 			: if (bdoom_Fatso) 				e.Replacee = "Fatso"; 			break;
			case 'BD_HellKnight' 		: if (bdoom_HellKnight) 		e.Replacee = "HellKnight"; 		break;
			case 'BD_BaronOfHell' 		: if (bdoom_BaronOfHell) 		e.Replacee = "BaronOfHell"; 	break;
			case 'BD_ArchVile' 			: if (bdoom_ArchVile) 			e.Replacee = "ArchVile"; 		break;
			case 'BD_Cyberdemon' 		: if (bdoom_Cyberdemon) 		e.Replacee = "Cyberdemon"; 		break;
			case 'BD_SpiderMastermind' 	: if (bdoom_SpiderMastermind) 	e.Replacee = "SpiderMastermind";break;
			case 'BD_BossBrain' 		: if (bdoom_IconOfSin) 			e.Replacee = "BossBrain";		break;
			case 'BD_SpawnShot' 		: if (bdoom_IconOfSin) 			e.Replacee = "SpawnShot";		break;
		}
	}
}

// controls the amount of special effect actors, such as gibs, debris, flames
Class FXAmountControl : EventHandler {
	Array <DebrisGeneral> bloodlist;
	Array <DebrisGeneral> giblist;
	Array <DebrisGeneral> debrislist;
	Array <DebrisGeneral> flamelist;
	
	//clear the arrays upon map start
	override void WorldLoaded(WorldEvent e) {
		bloodlist.Clear();
		giblist.Clear();
		flamelist.Clear();
		debrislist.Clear();
	}

	//add a thing into a corresponding array when it gets spawned
	override void WorldThingSpawned(WorldEvent e) {
		if (e.Thing is "DebrisGeneral") {
			let a = DebrisGeneral(e.thing);
			if (a) {
				if (a.sfxtype == 'blood')
					bloodlist.push(a);					
				else if (a.sfxtype == 'gibs')
					giblist.push(a);					
				else if (a.sfxtype == 'flames')
					flamelist.push(a);					
				else if (a.sfxtype == 'debris')
					debrislist.push(a);
			}
		}
	}

	//remove the thing from the array when it's removed
	override void WorldThingDestroyed(WorldEvent e) {
		if (e.Thing is "DebrisGeneral") {
			let a = DebrisGeneral(e.thing);
			if (a) {
				if (a.sfxtype == 'blood')
					bloodlist.delete	(bloodlist.Find(a));					
				else if (a.sfxtype == 'gibs')
					giblist.delete		(giblist.Find(a));					
				else if (a.sfxtype == 'flames')
					flamelist.delete	(flamelist.Find(a));					
				else if (a.sfxtype == 'debris')
					debrislist.delete	(debrislist.Find(a));		
			}
		}	
	}

	//continuously check if the number of FX actors is bigger than the array. if true, delete the oldest actors
	override void WorldTick() {
		//console.printf("blood array size: %d | gib array size: %d",bloodlist.Size(),giblist.Size());
		while (bloodlist.Size() > bdoom_bloodnum)
			bloodlist[0].destroy();			
		while (giblist.Size() > bdoom_gibnum)
			giblist[0].destroy();			
		while (flamelist.Size() > bdoom_flamesnum) 
			flamelist[0].destroy();			
		while (debrislist.Size() > bdoom_debrisnum) 
			debrislist[0].destroy();
	}
}

//attaches footstep actors to players
class FootstepsInit : EventHandler {
    override void PlayerEntered(PlayerEvent e) {
        let steps = BD_Footsteps(Actor.Spawn("BD_Footsteps"));
		if (steps) {
			steps.Init(players[e.playerNumber].mo);
			steps.fplayer = players[e.playerNumber];
		}
	}
}
