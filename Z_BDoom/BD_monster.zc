Class BDoomMonster : BDoomActor abstract {
	double hitheight;
	TranslatedBurningBody burncorpse;
	BurningBodyFlame burnflame;
	protected double smokeheight;
	property smokeheight : smokeheight;
	protected int monsterclip; //used by monsters with guns when bdoom_weapons == 2
	property monsterclip : monsterclip;

	bool burning; //is showing burning or smoking animation
	protected int burntimer;
	protected int firetype; //0 = only smoke; 1 = regular yellow; 2 = baron green
	protected state sspawn;
	protected state ssee;
	protected state mmissile;
	protected state mmelee;
	protected state ppain;
	protected state ddeath;
	protected state xxdeath;
	protected state vxdeath;	

	Array <BD_BaseDebris> meatlist; //keeps track of all gibs and blood spawned by the monster, so that they can be FlyBack()'d when it's resurrected

	Default {
		Monster;
		BDoomMonster.monsterclip 10;
		BDoomMonster.smokeheight 0;
		attacksound "none";
	}
	override Void PostBeginPlay() {
		super.PostBeginPlay();
		sspawn = FindState("Spawn");
		ssee = FindState("See");
		mmissile = FindState("Missile");
		mmelee = FindState("Melee");
		ppain = FindState("Pain");
		ddeath = FindState("Death");
		xxdeath = FindState("XDeath");
		vxdeath = FindState("XDeath.Vanilla");
	}
		
	void BD_Bleed(double xvel = 2, double yvel = 3) {
		if (burning || !bdoom_blood)
			return;
		let bld = BD_Blood(Spawn("BD_Blood", (pos.x + frandom(-5.0,5.0), pos.y + frandom(-5.0,5.0), pos.z + frandom(16,default.height))));
		if (bld) {
			bld.vel = (frandom(-xvel,xvel),frandom(-xvel,xvel),frandom(yvel*0.34,yvel));
			bld.target = self;
			meatlist.push(bld);
		}
	}
	//universal point-damage handling:
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) {
		if (inflictor)
			hitheight = inflictor.pos.z - pos.z;
		return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	//A_BulletAttack variant that spawns casings, uses tracers when CVAR allows it and chooses between a vanilla and a new sound
	void BD_BulletAttack(double horz_spread, double vert_spread, int numbullets, int damageperbullet, string OldSound, string NewSound, string Casing, double CasingX = 0, double CasingY = 0, double CasingZ = 0, double TracerHeight = 32, double Tracerofs_xy = 0, class<Actor> puff = "EnBulletPuff") {		
		if (bdoom_debris)
			A_SpawnItemEx(Casing,CasingX,CasingY,CasingZ,		frandom(2,4),0,frandom(2,4),	random(-85,-95),SXF_SETTARGET);
		If(bdoom_weapons)
			A_StartSound(newsound);
		else			
			A_StartSound(oldsound);
		if (bdoom_tracers)
			A_CustomBulletAttack(horz_spread, vert_spread, numbullets, damageperbullet, puff, 0, CBAF_NORANDOM,AAPTR_TARGET,"BulletTracer",TracerHeight,Tracerofs_xy);
		else
			A_CustomBulletAttack(horz_spread, vert_spread, numbullets, damageperbullet, puff, 0, CBAF_NORANDOM);
	}

	state BD_Refire(int ChanceToEnd = 0, statelabel endstate = "See") { 
		if (bdoom_weapons < 2)
			return ResolveState("See");
		else if (monsterclip == 0)
			return ResolveState("Reload");
		else if (ChanceToEnd > random(0,256))
			return ResolveState(endstate);
		else
			return A_MonsterRefire(40,endstate);
		return ResolveState(null);
	}
		
	override void Tick() {
		super.Tick();
		if (isFrozen() || !bdoom_flames)
			return;
		if (health > 0 && InStateSequence(curstate,ssee))
			scale.x = 1;
		if (!burning)
			return;
		if (!InStateSequence(curstate,ssee)) {
			if (burntimer > 350) {
				burntimer = 0;
				burning = false;
				return;
			}
			burntimer++;
			for (int i = random(0,2); i > 0; i--) {
				double rad = radius*0.5;
				int fchance = burntimer*0.7;
				A_SpawnItemEx("BlackSmoke",frandom(-rad,rad),frandom(-rad,rad),/*smokeheight + */frandom(8,20),0,0,frandom(0.4,0.9),failchance:fchance);
			}
			//console.printf("burntimer: %d, smoke chance: %f",burntimer,chance);
		}
		else {
			burning = false;
			burntimer = 0;
			if (burncorpse)	burncorpse.destroy();
			if (burnflame)	burnflame.destroy();
			return;
		}
	}
		
	BasicMeatPiece BD_GibSpawn(Class<Actor> spawnclass, double hpos = 0, double vpos = 0, double hvel = 0, double vvel = 0, int spawnchance = 100) {
		if (random(0,100) > spawnchance)
			return null;
		if (!(spawnclass is "BasicMeatPiece"))
			return null;
		let meat = BasicMeatPiece(Spawn(spawnclass, (pos.x + frandom(-hpos,hpos), pos.y + frandom(-hpos,hpos), pos.z + vpos)));
		if (meat) {
			meat.gibtype = GetClassName();
			vector3 meatvel;
			if (vel ~== (0,0,0))
				//if the monster is static, give gibs some random velocity
				meat.vel = (frandom(-3,3),frandom(-3,3),frandom(3,6));
			else { //otherwise, calculate angle from monster velocity and throw in that direction, with randomization
				double meatangle = atan2(vel.y,vel.x);
				meat.VelFromAngle(frandom(4,8)*hvel,meatangle+frandom(-35,35));
				meat.vel.z = Clamp(vvel,3,8);
				//console.printf("gib angle %d",meatdir.x);
			}
			meat.target = self;
			meat.translation = translation;
			meatlist.push(meat);
			return meat;
		}
		return null;
	}

	void BD_Gibs()	{
		if (bdoom_gibs == 0)
			return;
		A_StartSound("gibs/gibbed",volume:0.65);
		//a fountain of blood spraying in all directions and creating multiple drops on landing
		for (int i = random(16,22); i > 0; i--) {
			let bld = BD_Blood(Spawn("BD_GibBlood", (pos.x + frandom(-5.0,5.0), pos.y + frandom(-5.0,5.0), pos.z + frandom(16,default.height))));
			if (bld) {
				bld.vel = (frandom(-3,3),frandom(-3,3),frandom(2,6));
				bld.target = self;
				bld.gravity = frandom[bdsfx](0.2,0.35);
				meatlist.push(bld);
			}
		}
		//generic-looking meat unaffected by vel
		for (int i = random(1,3); i > 0; i--) {
			let meat = BasicMeatPiece(Spawn("BasicMeatPiece", (pos.x + frandom(-4,4), pos.y + frandom(-4,4), pos.z + frandom(4,28))));
			if (meat) {
				meat.vel = (frandom(-2.5,2.5),frandom(-2.5,3.5),frandom(7,10));	
				meat.target = self;
				meat.translation = translation;
				meat.gravity *= 0.5;
				meatlist.push(meat);
			}
		}
		
		//generic-looking meat affected by vel
		for (int i = random(5,7); i > 0; i--)
			BD_GibSpawn("BasicMeatPiece",hpos: 4,vpos: frandom(8,28), hvel: 1.6, vvel: frandom(6,12), spawnchance: 70);
		
		//more uniquely-looking internal organs
		BD_GibSpawn("Gib_Intestine",hpos: 4,vpos: frandom(8,28), hvel: 0.8, vvel: frandom(4,10), spawnchance: 70);
		BD_GibSpawn("Gib_Intestine",hpos: 4,vpos: frandom(8,28), hvel: 0.8, vvel: frandom(4,10), spawnchance: 70);
		BD_GibSpawn("Gib_Lung",hpos: 4,vpos: frandom(8,28), hvel: 0.8, vvel: frandom(4,10), spawnchance: 50);
		BD_GibSpawn("Gib_Lung",hpos: 4,vpos: frandom(8,28), hvel: 0.8, vvel: frandom(4,10), spawnchance: 50);
		BD_GibSpawn("Gib_liver",hpos: 4,vpos: frandom(8,28), hvel: 0.8, vvel: frandom(4,10), spawnchance: 50);
		BD_GibSpawn("Gib_kidneys",hpos: 4,vpos: frandom(8,28), hvel: 0.8, vvel: frandom(4,10), spawnchance: 50);
		
		//these will automatically select the appropriate sprites based on the classname of the monster that spawned them
		BD_GibSpawn("Gib_head",hpos: 4,vpos: frandom(42,48), hvel: 1.2, vvel: frandom(6,12));
		BD_GibSpawn("Gib_Hand",hpos: 4,vpos: frandom(35,40), hvel: 1.2, vvel: frandom(6,12), spawnchance: 90);
		BD_GibSpawn("Gib_Hand",hpos: 4,vpos: frandom(35,40), hvel: 1.2, vvel: frandom(6,12), spawnchance: 90);
		BD_GibSpawn("Gib_Leg",hpos: 4,vpos: frandom(10,12), hvel: 1.2, vvel: frandom(6,12), spawnchance: 90);
		BD_GibSpawn("Gib_Leg",hpos: 4,vpos: frandom(10,12), hvel: 1.2, vvel: frandom(6,12), spawnchance: 90);

		let torso1 = BasicMeatPiece(	BD_GibSpawn("Gib_Torso1",hpos: 8,vpos: frandom(18,28), hvel: 1, vvel: vel.z*frandom(0.7,0.95))	);
		if (torso1) torso1.scale.x = randompick(-1,1);
		
		let torso2 = BasicMeatPiece(	BD_GibSpawn("Gib_Torso2",hpos: 8,vpos: frandom(18,28), hvel: 1, vvel: vel.z*frandom(0.7,0.95))	);
		if (torso2 && torso1 && torso1.scale.x == -1) torso2.scale.x = -1;		
	}
		
	states {
		Crush:
			CRS1 A -1;
			stop;
		Deathbleed: //for spawning animated blood pool and flies
			#### # random(35,55) {
				if (bBOSSDEATH)
					A_BossDeath();				
				if (burning)
					return ResolveState("DeathEnd");
				return ResolveState(null);
			}
			#### # 1 {
				if (vel ~== (0,0,0)) {
					if (bdoom_blood) {
						let pool = BD_BaseDebris(Spawn("AniBloodPool",(pos.x,pos.y,floorz)));
						if (pool) {
							pool.target = self;
							meatlist.Push(pool);
						}
					}
					A_SpawnItemEx("CorpseFlySpawner",flags:SXF_SETMASTER);
					return ResolveState("DeathEnd");
				}
				return ResolveState(null);
			}
			wait;
		DeathEnd:
			#### # -1;
			stop;
		Raise:
			#### # 0 {
				for (int i = 0; i < meatlist.Size(); i++) {
					let gib = meatlist[i];
					if (gib && gib.FindState("Raise")) {
						gib.SetStateLabel("Raise");
						//Console.Printf("Raise, %s",gib.GetClassName());
					}
				}
			}					
			#### # 2 {
				//raised = true;
				if (self.frame > 0)
					self.frame-=1;
				else {
					for (int i = meatlist.Size()-1; i >= 0; i--) {
						let a = BD_BaseDebris(meatlist[i]);
						if (a) 
							a.destroy();
					}
					meatlist.Clear();
					bFORCEXYBILLBOARD = default.bFORCEXYBILLBOARD;
					translation = default.translation;
					A_SetScale(default.scale.x,default.scale.y);
					burning = false;
					burntimer = 0;
					return ResolveState("See");
				}
				return ResolveState(null);
			}
			wait;
		Death.Telefrag:
		Death.Massacre:
			TNT1 A 0 {
				if (vxdeath)
					return vxdeath;
				else if (xxdeath)
					return xxdeath;
				return ddeath;
			}
			stop;
		Death.Fire:
			TNT1 A 0 {
				burncorpse = TranslatedBurningBody(Spawn("TranslatedBurningBody",pos));
				if (burncorpse) {
					burncorpse.master = self;
					burncorpse.A_SetTranslation("Firedeath");
					burncorpse.fadestart = 0;
					burncorpse.fadespeed = 0.05;
				}
				if (bdoom_flames) {
					burnflame = BurningBodyFlame(Spawn("BurningBodyFlame",pos));
					if (burnflame) 
						burnflame.master = self;
				}
				return ResolveState("DoFireDeath");
			}
			stop;
		Death.GreenFire:
			TNT1 A 0 {
				burncorpse = TranslatedBurningBody(Spawn("TranslatedBurningBody",pos));
				if (burncorpse) {
					burncorpse.master = self;
					burncorpse.A_SetTranslation("GreenFiredeath");
					burncorpse.fadestart = 0;
					burncorpse.fadespeed = 0.05;
				}
				if (bdoom_flames) {
					burnflame = BurningBodyFlame(Spawn("BurningBodyFlame",pos));
					if (burnflame) {
						burnflame.master = self;
						burnflame.SetStateLabel("SpawnGreen");
					}
				}
				return ResolveState("DoFireDeath");
			}
			stop;
		Death.PlasmaDamage:
			TNT1 A 0 {
				burncorpse = TranslatedBurningBody(Spawn("TranslatedBurningBody",pos));
				if (burncorpse) {
					burncorpse.master = self;
					burncorpse.fadestart = 0;
					burncorpse.fadespeed = 0.03;
				}
				return ResolveState("DoFireDeath");
			}
			stop;
		DoFireDeath:
			TNT1 A 0 {
				burning = true;
				burntimer = 0;
				A_SetTranslation("Scorched");
				return ResolveState("Death");
			}
			stop;
		Death.BFGSplash:
			TNT1 A 0 {
				if (bloodcolor.B > 4*(bloodcolor.R  + bloodcolor.G))
					A_SetTranslation("BlueBloodyScorched");
				else if (bloodcolor.G > 4*(bloodcolor.R  + bloodcolor.B))
					A_SetTranslation("GreenBloodyScorched");
				else
					A_SetTranslation("BloodyScorched");
				if (xxdeath)
					return xxdeath;
				return ddeath;
			}
			stop;
		XDeath.Particles:
			TNT1 A 0 {
				//A_XScream();
				A_NoBlocking();
				BD_Gibs();
			}
			TNT1 ABCDEFGHIJKLMN 2;
			goto DeathEnd;
	}
}

/*This is spawned by a burning monster and receives a "fire" translation from it,
while the monster receives "scorched" translation. As this fades out, it creates
an effect of smooth transition from burning to scorched.
In case of plasma death, this receives normal translation, while the monster becomes
scorched.
*/
Class TranslatedBurningBody : Actor {
	double fadespeed; //how quickly it fades
	int fadestart;	//when it starts to fade
	int fadetime;	//timer
	property fadespeed : fadespeed;
	property fadestart : fadestart;
	Default {
		TranslatedBurningBody.fadespeed 0.008;
		TranslatedBurningBody.fadestart 100;
		+NOINTERACTION
		+MOVEWITHSECTOR
		+RELATIVETOFLOOR
		renderstyle "Translucent";
		alpha 1.0;
	}
	override void Tick() {
		//super.Tick();
		if (isFrozen())
			return;
		if (waterlevel > 1) {
			destroy();
			return;
		}
		if (fadetime < fadestart)
			fadetime++;
		else
			A_FadeOut(fadespeed);
		if (!master) {
			destroy();
			return;
		}
		sprite = master.sprite;
		frame = master.frame;
		scale = master.scale;
		SetOrigin(master.pos,true);
	}
	states {
		Spawn:
			#### # -1;
			stop;
	}
}

Class BurningBodyFlame : Actor {
	int burntimer;
	Default {
		+NOINTERACTION
		+MOVEWITHSECTOR
		+RELATIVETOFLOOR
		+BRIGHT
		renderstyle "Add";
		alpha 0.8;
		xscale 1.0;
		yscale 0.65;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (!master)
			return;
		scale.x = master.radius*0.06; //radius of 20 = xscale 1.0
		scale.y = scale.x*0.5;
		A_StartSound("body/burn/start",CHAN_AUTO,attenuation:4);
		A_StartSound("body/burn/loop",14,CHANF_LOOPING,attenuation:4);
	}
	override void Tick () {
		super.Tick();
		if (isFrozen())
			return;
		if (waterlevel > 0) {
			destroy();
			return;
		}
		if (!master || !bdoom_flames) {
			self.destroy();
			return;
		}
		SetOrigin(master.pos,true);
		burntimer++;
		if (burntimer > 100) {
			scale.y*=0.995;
			scale.x*=0.9995;
			A_FadeOut(0.005);
			double bvol = 1 - (burntimer / 250.0);
			A_SoundVolume(14,bvol);
		}
		color col = Color(0xff,0x65+random(0,100),0x00);
		if (InStateSequence(curstate,FindState("SpawnGreen")))
			col = Color(0x00,0xff,0x30+random(0,100));
		for (double i = frandom(0.3,0.6); i < alpha; i += 0.1 )
			A_SpawnParticle(
				col,
				SPF_FULLBRIGHT|SPF_RELVEL|SPF_RELACCEL,
				lifetime:random(20,60),size:frandom(2,4),
				angle:frandom(0,359),
				xoff:frandom(-12,12),yoff:frandom(-12,12),zoff:frandom(8,32),
				velx:frandom(1,2),velz:frandom(0.5,2),accelx:frandom(-0.1,-0.3),accelz:-0.05,
				startalphaf:0.9,sizestep:-0.2
			);
	}
	states{
		Spawn:
			BBR1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			BBR2 ABCDEF 1;
			loop;
		SpawnGreen:
			BGR1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			BGR2 ABCDEF 1;
			loop;
	}
}


Class BD_ZombieBullet : BD_PistolBullet {
	override void PostBeginPlay()
		{
		super.PostBeginPlay();
		BulletDamage = 3 * frandom(1,5);
	}
}

Class BD_ZombiePellet : BD_ShotgunPellet {
	override void PostBeginPlay()
		{
		super.PostBeginPlay();
		BulletDamage = 2 * frandom(3,4);
	}
}

Class BD_SpiderBullet : BD_PistolBullet {
	override void PostBeginPlay()
		{
		super.PostBeginPlay();
		BulletDamage = 2 * frandom(2,4);
	}
}

Class CorpseFlySpawner : Actor {
	private bool active;
	Default {
		+NOINTERACTION
		+MOVEWITHSECTOR
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (master)
			height = master.height;
		//Console.Printf("height: %d",height);
	}
	override void Tick() {	
		super.Tick();
		if (isFrozen() || !bdoom_flies) {
			A_StopSound(CHAN_BODY);
			return;
		}
		else if (active)
			A_StartSound("misc/flyloop",slot:CHAN_BODY,flags:CHANF_DEFAULT,1.0,attenuation:14);
		if (!master || (master && master.health > 0)) {
			A_StopSound(CHAN_BODY);
			destroy();
			return;
		}
	}
	void SpawnFly() {
		let fly = CorpseFly(Spawn("CorpseFly",(pos.x+frandom(64,128)*randompick(-1,1),pos.y+frandom(64,128)*randompick(-1,1),pos.z+height + frandom(18,22))));
		if (fly) fly.master = self;
	}
	states	{
		Spawn:
			TNT1 A 1 NoDelay A_SetTics(35 * random(120,240)); //wait 2-4 minutes
			TNT1 A 1 {
				active = true;
				SpawnFly();
				A_SetTics(35 * random(20,40));
			}
			TNT1 A 1 {
				SpawnFly();
				A_SetTics(35 * random(40,70));
			}
			TNT1 A 1 {
				if (random(0,1) == 1)
					SpawnFly();
				A_SetTics(35 * random(100,150));
			}
			TNT1 A 1 {
				if (random(0,1) == 1)
					SpawnFly();
				A_SetTics(35 * random(180,240));
			}
			TNT1 A 1 {
				if (random(0,1) == 1)
					SpawnFly();
				A_SetTics(35 * random(280,320));
			}
			TNT1 A -1 {
				if (random(0,1) == 1)
					SpawnFly();
			}
			stop;

	}
}	

Class CorpseFly : Actor {
	Default {
		+FLOATBOB
		+FORCEXYBILLBOARD
		+NOINTERACTION
		//+BRIGHT
		floatbobstrength 0.5;
		renderstyle "translucent";
		alpha 0.0;
		scale 0.05;
	}
//this is one of the few actors that, when the related CVAR is disabled, doesn't despawn but instead goes into minimal-resource mode
	override void Tick() {
		if (!bdoom_flies) {
			A_ChangeLinkFlags(sector:true);
			return;
		}
		A_ChangeLinkFlags(sector:false);		
		Super.Tick();
	}
			
	override void PostBeginPlay() {
		super.PostBeginPlay();
		scale.x *= randompick(-1,1);
	}
	states {
		Spawn:
			FLYC ABCBABCBABCBABCBABCBABCBABCBABCB 1 A_FadeIn(0.03,FTF_CLAMP);
		Fly:
			TNT1 A 0 {
				A_Stop();
				if (!master) {
					vel = (frandom(-2,2),frandom(-2,2),0);
					return ResolveState("FadeOut");
				}
				else if (master && (Distance3D(master) > 48 || pos.z < master.pos.z+master.height)) {
					//A_FaceMaster();
					vector3 dest = (master.pos.x,master.pos.y,master.pos.z+master.height+frandom(18,22));
					vel = level.Vec3Diff(pos,dest).unit() * Distance3D(master) / 64;
					return ResolveState("ReturnToMaster");
				}
				return ResolveState(null);
			}
			FLYC ABCBABC 1;
			TNT1 A 0 {
				scale.x *= -1;
				A_FaceMaster();
				angle += frandom(-15,15);
				Thrust(frandom(0.1,0.32),angle+frandom(-20,20));
			}
			FLYC ABCBABCBABCBABCB 1 { vel *= 1.1; }
			TNT1 A 0 A_Jump(256,1,2,3,4,5,6);
			FLYC ABCBABCBABCBABCBABCBABCBABCBABCB 1 { vel *= 0.97; }
			loop;
		ReturnToMaster:
			FLYC ABCBABCBABCBABCBABCBABCBABCBABCBABCBABCBABCBABCB 1 A_FadeIn(0.03,FTF_CLAMP);
			FLYC ABCBABCBABCBABCB 1 { vel *= 0.9; }
			TNT1 A 0 A_Stop();
			goto Fly;
		FadeOut:
			FLYC ABC 1 A_FadeOut(0.01);
			loop;
	}
}
